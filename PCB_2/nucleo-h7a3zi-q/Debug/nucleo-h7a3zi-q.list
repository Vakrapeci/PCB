
nucleo-h7a3zi-q.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081ec  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08008498  08008498  00018498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008650  08008650  00018650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08008658  08008658  00018658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08008660  08008660  00018660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000060  24000000  08008668  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000288  24000060  080086c8  00020060  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240002e8  080086c8  000202e8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001bf90  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000038a3  00000000  00000000  0003c061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000fd0  00000000  00000000  0003f908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000c08  00000000  00000000  000408d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003319c  00000000  00000000  000414e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00014189  00000000  00000000  0007467c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013e194  00000000  00000000  00088805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00004514  00000000  00000000  001c699c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007d  00000000  00000000  001caeb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000060 	.word	0x24000060
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08008480 	.word	0x08008480

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000064 	.word	0x24000064
 80002e8:	08008480 	.word	0x08008480

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000300:	f000 b970 	b.w	80005e4 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9e08      	ldr	r6, [sp, #32]
 8000322:	460d      	mov	r5, r1
 8000324:	4604      	mov	r4, r0
 8000326:	460f      	mov	r7, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14a      	bne.n	80003c2 <__udivmoddi4+0xa6>
 800032c:	428a      	cmp	r2, r1
 800032e:	4694      	mov	ip, r2
 8000330:	d965      	bls.n	80003fe <__udivmoddi4+0xe2>
 8000332:	fab2 f382 	clz	r3, r2
 8000336:	b143      	cbz	r3, 800034a <__udivmoddi4+0x2e>
 8000338:	fa02 fc03 	lsl.w	ip, r2, r3
 800033c:	f1c3 0220 	rsb	r2, r3, #32
 8000340:	409f      	lsls	r7, r3
 8000342:	fa20 f202 	lsr.w	r2, r0, r2
 8000346:	4317      	orrs	r7, r2
 8000348:	409c      	lsls	r4, r3
 800034a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800034e:	fa1f f58c 	uxth.w	r5, ip
 8000352:	fbb7 f1fe 	udiv	r1, r7, lr
 8000356:	0c22      	lsrs	r2, r4, #16
 8000358:	fb0e 7711 	mls	r7, lr, r1, r7
 800035c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000360:	fb01 f005 	mul.w	r0, r1, r5
 8000364:	4290      	cmp	r0, r2
 8000366:	d90a      	bls.n	800037e <__udivmoddi4+0x62>
 8000368:	eb1c 0202 	adds.w	r2, ip, r2
 800036c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000370:	f080 811c 	bcs.w	80005ac <__udivmoddi4+0x290>
 8000374:	4290      	cmp	r0, r2
 8000376:	f240 8119 	bls.w	80005ac <__udivmoddi4+0x290>
 800037a:	3902      	subs	r1, #2
 800037c:	4462      	add	r2, ip
 800037e:	1a12      	subs	r2, r2, r0
 8000380:	b2a4      	uxth	r4, r4
 8000382:	fbb2 f0fe 	udiv	r0, r2, lr
 8000386:	fb0e 2210 	mls	r2, lr, r0, r2
 800038a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038e:	fb00 f505 	mul.w	r5, r0, r5
 8000392:	42a5      	cmp	r5, r4
 8000394:	d90a      	bls.n	80003ac <__udivmoddi4+0x90>
 8000396:	eb1c 0404 	adds.w	r4, ip, r4
 800039a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x294>
 80003a2:	42a5      	cmp	r5, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x294>
 80003a8:	4464      	add	r4, ip
 80003aa:	3802      	subs	r0, #2
 80003ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	2100      	movs	r1, #0
 80003b4:	b11e      	cbz	r6, 80003be <__udivmoddi4+0xa2>
 80003b6:	40dc      	lsrs	r4, r3
 80003b8:	2300      	movs	r3, #0
 80003ba:	e9c6 4300 	strd	r4, r3, [r6]
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d908      	bls.n	80003d8 <__udivmoddi4+0xbc>
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f000 80ed 	beq.w	80005a6 <__udivmoddi4+0x28a>
 80003cc:	2100      	movs	r1, #0
 80003ce:	e9c6 0500 	strd	r0, r5, [r6]
 80003d2:	4608      	mov	r0, r1
 80003d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d8:	fab3 f183 	clz	r1, r3
 80003dc:	2900      	cmp	r1, #0
 80003de:	d149      	bne.n	8000474 <__udivmoddi4+0x158>
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d302      	bcc.n	80003ea <__udivmoddi4+0xce>
 80003e4:	4282      	cmp	r2, r0
 80003e6:	f200 80f8 	bhi.w	80005da <__udivmoddi4+0x2be>
 80003ea:	1a84      	subs	r4, r0, r2
 80003ec:	eb65 0203 	sbc.w	r2, r5, r3
 80003f0:	2001      	movs	r0, #1
 80003f2:	4617      	mov	r7, r2
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d0e2      	beq.n	80003be <__udivmoddi4+0xa2>
 80003f8:	e9c6 4700 	strd	r4, r7, [r6]
 80003fc:	e7df      	b.n	80003be <__udivmoddi4+0xa2>
 80003fe:	b902      	cbnz	r2, 8000402 <__udivmoddi4+0xe6>
 8000400:	deff      	udf	#255	; 0xff
 8000402:	fab2 f382 	clz	r3, r2
 8000406:	2b00      	cmp	r3, #0
 8000408:	f040 8090 	bne.w	800052c <__udivmoddi4+0x210>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f fe8c 	uxth.w	lr, ip
 8000416:	2101      	movs	r1, #1
 8000418:	fbb2 f5f7 	udiv	r5, r2, r7
 800041c:	fb07 2015 	mls	r0, r7, r5, r2
 8000420:	0c22      	lsrs	r2, r4, #16
 8000422:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000426:	fb0e f005 	mul.w	r0, lr, r5
 800042a:	4290      	cmp	r0, r2
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x124>
 800042e:	eb1c 0202 	adds.w	r2, ip, r2
 8000432:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000436:	d202      	bcs.n	800043e <__udivmoddi4+0x122>
 8000438:	4290      	cmp	r0, r2
 800043a:	f200 80cb 	bhi.w	80005d4 <__udivmoddi4+0x2b8>
 800043e:	4645      	mov	r5, r8
 8000440:	1a12      	subs	r2, r2, r0
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb2 f0f7 	udiv	r0, r2, r7
 8000448:	fb07 2210 	mls	r2, r7, r0, r2
 800044c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000450:	fb0e fe00 	mul.w	lr, lr, r0
 8000454:	45a6      	cmp	lr, r4
 8000456:	d908      	bls.n	800046a <__udivmoddi4+0x14e>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000460:	d202      	bcs.n	8000468 <__udivmoddi4+0x14c>
 8000462:	45a6      	cmp	lr, r4
 8000464:	f200 80bb 	bhi.w	80005de <__udivmoddi4+0x2c2>
 8000468:	4610      	mov	r0, r2
 800046a:	eba4 040e 	sub.w	r4, r4, lr
 800046e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000472:	e79f      	b.n	80003b4 <__udivmoddi4+0x98>
 8000474:	f1c1 0720 	rsb	r7, r1, #32
 8000478:	408b      	lsls	r3, r1
 800047a:	fa22 fc07 	lsr.w	ip, r2, r7
 800047e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000482:	fa05 f401 	lsl.w	r4, r5, r1
 8000486:	fa20 f307 	lsr.w	r3, r0, r7
 800048a:	40fd      	lsrs	r5, r7
 800048c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000490:	4323      	orrs	r3, r4
 8000492:	fbb5 f8f9 	udiv	r8, r5, r9
 8000496:	fa1f fe8c 	uxth.w	lr, ip
 800049a:	fb09 5518 	mls	r5, r9, r8, r5
 800049e:	0c1c      	lsrs	r4, r3, #16
 80004a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a4:	fb08 f50e 	mul.w	r5, r8, lr
 80004a8:	42a5      	cmp	r5, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	fa00 f001 	lsl.w	r0, r0, r1
 80004b2:	d90b      	bls.n	80004cc <__udivmoddi4+0x1b0>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004bc:	f080 8088 	bcs.w	80005d0 <__udivmoddi4+0x2b4>
 80004c0:	42a5      	cmp	r5, r4
 80004c2:	f240 8085 	bls.w	80005d0 <__udivmoddi4+0x2b4>
 80004c6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ca:	4464      	add	r4, ip
 80004cc:	1b64      	subs	r4, r4, r5
 80004ce:	b29d      	uxth	r5, r3
 80004d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d4:	fb09 4413 	mls	r4, r9, r3, r4
 80004d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e0:	45a6      	cmp	lr, r4
 80004e2:	d908      	bls.n	80004f6 <__udivmoddi4+0x1da>
 80004e4:	eb1c 0404 	adds.w	r4, ip, r4
 80004e8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004ec:	d26c      	bcs.n	80005c8 <__udivmoddi4+0x2ac>
 80004ee:	45a6      	cmp	lr, r4
 80004f0:	d96a      	bls.n	80005c8 <__udivmoddi4+0x2ac>
 80004f2:	3b02      	subs	r3, #2
 80004f4:	4464      	add	r4, ip
 80004f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fa:	fba3 9502 	umull	r9, r5, r3, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	42ac      	cmp	r4, r5
 8000504:	46c8      	mov	r8, r9
 8000506:	46ae      	mov	lr, r5
 8000508:	d356      	bcc.n	80005b8 <__udivmoddi4+0x29c>
 800050a:	d053      	beq.n	80005b4 <__udivmoddi4+0x298>
 800050c:	b156      	cbz	r6, 8000524 <__udivmoddi4+0x208>
 800050e:	ebb0 0208 	subs.w	r2, r0, r8
 8000512:	eb64 040e 	sbc.w	r4, r4, lr
 8000516:	fa04 f707 	lsl.w	r7, r4, r7
 800051a:	40ca      	lsrs	r2, r1
 800051c:	40cc      	lsrs	r4, r1
 800051e:	4317      	orrs	r7, r2
 8000520:	e9c6 7400 	strd	r7, r4, [r6]
 8000524:	4618      	mov	r0, r3
 8000526:	2100      	movs	r1, #0
 8000528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052c:	f1c3 0120 	rsb	r1, r3, #32
 8000530:	fa02 fc03 	lsl.w	ip, r2, r3
 8000534:	fa20 f201 	lsr.w	r2, r0, r1
 8000538:	fa25 f101 	lsr.w	r1, r5, r1
 800053c:	409d      	lsls	r5, r3
 800053e:	432a      	orrs	r2, r5
 8000540:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000544:	fa1f fe8c 	uxth.w	lr, ip
 8000548:	fbb1 f0f7 	udiv	r0, r1, r7
 800054c:	fb07 1510 	mls	r5, r7, r0, r1
 8000550:	0c11      	lsrs	r1, r2, #16
 8000552:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000556:	fb00 f50e 	mul.w	r5, r0, lr
 800055a:	428d      	cmp	r5, r1
 800055c:	fa04 f403 	lsl.w	r4, r4, r3
 8000560:	d908      	bls.n	8000574 <__udivmoddi4+0x258>
 8000562:	eb1c 0101 	adds.w	r1, ip, r1
 8000566:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800056a:	d22f      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800056c:	428d      	cmp	r5, r1
 800056e:	d92d      	bls.n	80005cc <__udivmoddi4+0x2b0>
 8000570:	3802      	subs	r0, #2
 8000572:	4461      	add	r1, ip
 8000574:	1b49      	subs	r1, r1, r5
 8000576:	b292      	uxth	r2, r2
 8000578:	fbb1 f5f7 	udiv	r5, r1, r7
 800057c:	fb07 1115 	mls	r1, r7, r5, r1
 8000580:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000584:	fb05 f10e 	mul.w	r1, r5, lr
 8000588:	4291      	cmp	r1, r2
 800058a:	d908      	bls.n	800059e <__udivmoddi4+0x282>
 800058c:	eb1c 0202 	adds.w	r2, ip, r2
 8000590:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000594:	d216      	bcs.n	80005c4 <__udivmoddi4+0x2a8>
 8000596:	4291      	cmp	r1, r2
 8000598:	d914      	bls.n	80005c4 <__udivmoddi4+0x2a8>
 800059a:	3d02      	subs	r5, #2
 800059c:	4462      	add	r2, ip
 800059e:	1a52      	subs	r2, r2, r1
 80005a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a4:	e738      	b.n	8000418 <__udivmoddi4+0xfc>
 80005a6:	4631      	mov	r1, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e708      	b.n	80003be <__udivmoddi4+0xa2>
 80005ac:	4639      	mov	r1, r7
 80005ae:	e6e6      	b.n	800037e <__udivmoddi4+0x62>
 80005b0:	4610      	mov	r0, r2
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x90>
 80005b4:	4548      	cmp	r0, r9
 80005b6:	d2a9      	bcs.n	800050c <__udivmoddi4+0x1f0>
 80005b8:	ebb9 0802 	subs.w	r8, r9, r2
 80005bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c0:	3b01      	subs	r3, #1
 80005c2:	e7a3      	b.n	800050c <__udivmoddi4+0x1f0>
 80005c4:	4645      	mov	r5, r8
 80005c6:	e7ea      	b.n	800059e <__udivmoddi4+0x282>
 80005c8:	462b      	mov	r3, r5
 80005ca:	e794      	b.n	80004f6 <__udivmoddi4+0x1da>
 80005cc:	4640      	mov	r0, r8
 80005ce:	e7d1      	b.n	8000574 <__udivmoddi4+0x258>
 80005d0:	46d0      	mov	r8, sl
 80005d2:	e77b      	b.n	80004cc <__udivmoddi4+0x1b0>
 80005d4:	3d02      	subs	r5, #2
 80005d6:	4462      	add	r2, ip
 80005d8:	e732      	b.n	8000440 <__udivmoddi4+0x124>
 80005da:	4608      	mov	r0, r1
 80005dc:	e70a      	b.n	80003f4 <__udivmoddi4+0xd8>
 80005de:	4464      	add	r4, ip
 80005e0:	3802      	subs	r0, #2
 80005e2:	e742      	b.n	800046a <__udivmoddi4+0x14e>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <_ZNSt14numeric_limitsImE3maxEv>:

      static _GLIBCXX_CONSTEXPR unsigned long
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }

      static _GLIBCXX_CONSTEXPR unsigned long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__ * 2UL + 1; }
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005f0:	4618      	mov	r0, r3
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr

080005fa <_ZN13EmbeddedProto21MessageSizeCalculator5clearEv>:
    public:
      MessageSizeCalculator() = default;
      ~MessageSizeCalculator() override = default;
      
      //! Reset the size count of the buffer.
      void clear() override 
 80005fa:	b480      	push	{r7}
 80005fc:	b083      	sub	sp, #12
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
      { 
        size_ = 0; 
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2200      	movs	r2, #0
 8000606:	605a      	str	r2, [r3, #4]
      }
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <_ZNK13EmbeddedProto21MessageSizeCalculator8get_sizeEv>:

      //! Obtain the total number of bytes currently stored in the buffer.
      uint32_t get_size() const override 
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
      { 
        return size_; 
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	685b      	ldr	r3, [r3, #4]
      }
 8000620:	4618      	mov	r0, r3
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <_ZNK13EmbeddedProto21MessageSizeCalculator12get_max_sizeEv>:

      //! To continue serialization return the maximum number that fits in a 32bit unsigned int.
      uint32_t get_max_size() const override 
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
      { 
        return std::numeric_limits<uint32_t>::max(); 
 8000634:	f7ff ffd8 	bl	80005e8 <_ZNSt14numeric_limitsImE3maxEv>
 8000638:	4603      	mov	r3, r0
      }
 800063a:	4618      	mov	r0, r3
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}

08000642 <_ZNK13EmbeddedProto21MessageSizeCalculator18get_available_sizeEv>:

      //! To continue serialization return the maximum number that fits in a 32bit unsigned int.
      uint32_t get_available_size() const override 
 8000642:	b580      	push	{r7, lr}
 8000644:	b082      	sub	sp, #8
 8000646:	af00      	add	r7, sp, #0
 8000648:	6078      	str	r0, [r7, #4]
      { 
        return std::numeric_limits<uint32_t>::max(); 
 800064a:	f7ff ffcd 	bl	80005e8 <_ZNSt14numeric_limitsImE3maxEv>
 800064e:	4603      	mov	r3, r0
      }
 8000650:	4618      	mov	r0, r3
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <_ZN13EmbeddedProto21MessageSizeCalculator4pushEh>:

      //! For calculating the size we just increment the counter and always return true.
      bool push(const uint8_t byte) override
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	460b      	mov	r3, r1
 8000662:	70fb      	strb	r3, [r7, #3]
      {
        // Ignore the unused parameter
        (void)byte;
        ++size_;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	685b      	ldr	r3, [r3, #4]
 8000668:	1c5a      	adds	r2, r3, #1
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	605a      	str	r2, [r3, #4]
        return true;
 800066e:	2301      	movs	r3, #1
      }
 8000670:	4618      	mov	r0, r3
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr

0800067c <_ZN13EmbeddedProto21MessageSizeCalculator4pushEPKhm>:

      //! Increment the size with the given length.
      bool push(const uint8_t* bytes, const uint32_t length) override
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	607a      	str	r2, [r7, #4]
      {
        // Ignore the unused parameter
        (void)bytes;
        size_ += length;
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	685a      	ldr	r2, [r3, #4]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	441a      	add	r2, r3
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	605a      	str	r2, [r3, #4]
        return true;
 8000694:	2301      	movs	r3, #1
      }
 8000696:	4618      	mov	r0, r3
 8000698:	3714      	adds	r7, #20
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
	...

080006a4 <_ZN13EmbeddedProto20WriteBufferInterfaceD1Ev>:
  class WriteBufferInterface
  {
    public:

      WriteBufferInterface() = default;
      virtual ~WriteBufferInterface() = default;
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	4a04      	ldr	r2, [pc, #16]	; (80006c0 <_ZN13EmbeddedProto20WriteBufferInterfaceD1Ev+0x1c>)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4618      	mov	r0, r3
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	080084c8 	.word	0x080084c8

080006c4 <_ZN13EmbeddedProto20WriteBufferInterfaceD0Ev>:
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f7ff ffe9 	bl	80006a4 <_ZN13EmbeddedProto20WriteBufferInterfaceD1Ev>
 80006d2:	2104      	movs	r1, #4
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f007 fe33 	bl	8008340 <_ZdlPvj>
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4618      	mov	r0, r3
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <_ZNK13EmbeddedProto5Field15serialized_sizeEv>:
#include "MessageSizeCalculator.h"

namespace EmbeddedProto 
{
  uint32_t Field::serialized_size() const
  {
 80006e4:	b590      	push	{r4, r7, lr}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
    ::EmbeddedProto::MessageSizeCalculator calcBuffer;
 80006ec:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <_ZNK13EmbeddedProto5Field15serialized_sizeEv+0x44>)
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]
    this->serialize(calcBuffer);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	330c      	adds	r3, #12
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f107 0208 	add.w	r2, r7, #8
 8000700:	4611      	mov	r1, r2
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	4798      	blx	r3
    return calcBuffer.get_size();
 8000706:	f107 0308 	add.w	r3, r7, #8
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff ff82 	bl	8000614 <_ZNK13EmbeddedProto21MessageSizeCalculator8get_sizeEv>
 8000710:	4604      	mov	r4, r0
 8000712:	bf00      	nop
  }
 8000714:	f107 0308 	add.w	r3, r7, #8
 8000718:	4618      	mov	r0, r3
 800071a:	f000 f807 	bl	800072c <_ZN13EmbeddedProto21MessageSizeCalculatorD1Ev>
    return calcBuffer.get_size();
 800071e:	4623      	mov	r3, r4
  }
 8000720:	4618      	mov	r0, r3
 8000722:	3714      	adds	r7, #20
 8000724:	46bd      	mov	sp, r7
 8000726:	bd90      	pop	{r4, r7, pc}
 8000728:	080084a0 	.word	0x080084a0

0800072c <_ZN13EmbeddedProto21MessageSizeCalculatorD1Ev>:
      ~MessageSizeCalculator() override = default;
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	4a05      	ldr	r2, [pc, #20]	; (800074c <_ZN13EmbeddedProto21MessageSizeCalculatorD1Ev+0x20>)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ffb1 	bl	80006a4 <_ZN13EmbeddedProto20WriteBufferInterfaceD1Ev>
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4618      	mov	r0, r3
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	080084a0 	.word	0x080084a0

08000750 <_ZN13EmbeddedProto21MessageSizeCalculatorD0Ev>:
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f7ff ffe7 	bl	800072c <_ZN13EmbeddedProto21MessageSizeCalculatorD1Ev>
 800075e:	2108      	movs	r1, #8
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f007 fded 	bl	8008340 <_ZdlPvj>
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4618      	mov	r0, r3
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <_ZN13EmbeddedProto13WireFormatter7MakeTagEmNS0_8WireTypeE>:
      /*!
        This is the combination of the field number and wire type of the field. The field number is 
        shifted to the left by three bits. This creates space to or the wire type of the designated 
        field.
      */
      static constexpr uint32_t MakeTag(const uint32_t field_number, const WireType type)
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
      {
        return ((field_number << 3) | static_cast<uint32_t>(type));
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	00da      	lsls	r2, r3, #3
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	4313      	orrs	r3, r2
      }
 8000782:	4618      	mov	r0, r3
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr

0800078e <_ZN13EmbeddedProto13WireFormatter16DeserializeFloatERNS_19ReadBufferInterfaceERf>:
        }

        return result;
      }

      static Error DeserializeFloat(ReadBufferInterface& buffer, float& value) 
 800078e:	b580      	push	{r7, lr}
 8000790:	b086      	sub	sp, #24
 8000792:	af00      	add	r7, sp, #0
 8000794:	6078      	str	r0, [r7, #4]
 8000796:	6039      	str	r1, [r7, #0]
      {
        uint32_t temp_value = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	60bb      	str	r3, [r7, #8]
        Error result = DeserializeFixed(buffer, temp_value);
 800079c:	f107 0308 	add.w	r3, r7, #8
 80007a0:	4619      	mov	r1, r3
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f000 f9d6 	bl	8000b54 <_ZN13EmbeddedProto13WireFormatter16DeserializeFixedImEENS_5ErrorERNS_19ReadBufferInterfaceERT_>
 80007a8:	6178      	str	r0, [r7, #20]
        if(Error::NO_ERRORS == result) 
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d108      	bne.n	80007c2 <_ZN13EmbeddedProto13WireFormatter16DeserializeFloatERNS_19ReadBufferInterfaceERf+0x34>
        {
          // Cast from unsigned int to a float.
          const auto* pVoid = static_cast<const void*>(&temp_value);
 80007b0:	f107 0308 	add.w	r3, r7, #8
 80007b4:	613b      	str	r3, [r7, #16]
          const auto* pFloat = static_cast<const float*>(pVoid);
 80007b6:	693b      	ldr	r3, [r7, #16]
 80007b8:	60fb      	str	r3, [r7, #12]
          value = *pFloat;
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	601a      	str	r2, [r3, #0]
        }
        return result;
 80007c2:	697b      	ldr	r3, [r7, #20]
      }
 80007c4:	4618      	mov	r0, r3
 80007c6:	3718      	adds	r7, #24
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <_ZN13EmbeddedProto13WireFormatter17DeserializeDoubleERNS_19ReadBufferInterfaceERd>:

      static Error DeserializeDouble(ReadBufferInterface& buffer, double& value) 
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b088      	sub	sp, #32
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	6039      	str	r1, [r7, #0]
      {
        uint64_t temp_value = 0;
 80007d6:	f04f 0200 	mov.w	r2, #0
 80007da:	f04f 0300 	mov.w	r3, #0
 80007de:	e9c7 2302 	strd	r2, r3, [r7, #8]
        Error result = DeserializeFixed(buffer, temp_value);
 80007e2:	f107 0308 	add.w	r3, r7, #8
 80007e6:	4619      	mov	r1, r3
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f000 f9f0 	bl	8000bce <_ZN13EmbeddedProto13WireFormatter16DeserializeFixedIyEENS_5ErrorERNS_19ReadBufferInterfaceERT_>
 80007ee:	61f8      	str	r0, [r7, #28]
        if(Error::NO_ERRORS == result) 
 80007f0:	69fb      	ldr	r3, [r7, #28]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d10a      	bne.n	800080c <_ZN13EmbeddedProto13WireFormatter17DeserializeDoubleERNS_19ReadBufferInterfaceERd+0x40>
        {
          // Cast from unsigned int to a double.
          const auto* pVoid = static_cast<const void*>(&temp_value);
 80007f6:	f107 0308 	add.w	r3, r7, #8
 80007fa:	61bb      	str	r3, [r7, #24]
          const auto* pDouble = static_cast<const double*>(pVoid);
 80007fc:	69bb      	ldr	r3, [r7, #24]
 80007fe:	617b      	str	r3, [r7, #20]
          value = *pDouble;
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000806:	6839      	ldr	r1, [r7, #0]
 8000808:	e9c1 2300 	strd	r2, r3, [r1]
        }
        return result;
 800080c:	69fb      	ldr	r3, [r7, #28]
      }
 800080e:	4618      	mov	r0, r3
 8000810:	3720      	adds	r7, #32
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <_ZNK13EmbeddedProto16MessageInterface17serialize_with_idEmRNS_20WriteBufferInterfaceEb>:
{

  Error MessageInterface::MessageInterface::serialize_with_id(uint32_t field_number, 
                                                              ::EmbeddedProto::WriteBufferInterface& buffer,
                                                              const bool optional) const
  {
 8000816:	b580      	push	{r7, lr}
 8000818:	b088      	sub	sp, #32
 800081a:	af00      	add	r7, sp, #0
 800081c:	60f8      	str	r0, [r7, #12]
 800081e:	60b9      	str	r1, [r7, #8]
 8000820:	607a      	str	r2, [r7, #4]
 8000822:	70fb      	strb	r3, [r7, #3]
    Error return_value = Error::NO_ERRORS;
 8000824:	2300      	movs	r3, #0
 8000826:	61fb      	str	r3, [r7, #28]

    // See if we have data which should be serialized.
    const uint32_t size_x = this->serialized_size();
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff ff5a 	bl	80006e4 <_ZNK13EmbeddedProto5Field15serialized_sizeEv>
 8000830:	61b8      	str	r0, [r7, #24]
    if((0 < size_x) || optional)
 8000832:	69bb      	ldr	r3, [r7, #24]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d102      	bne.n	800083e <_ZNK13EmbeddedProto16MessageInterface17serialize_with_idEmRNS_20WriteBufferInterfaceEb+0x28>
 8000838:	78fb      	ldrb	r3, [r7, #3]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d030      	beq.n	80008a0 <_ZNK13EmbeddedProto16MessageInterface17serialize_with_idEmRNS_20WriteBufferInterfaceEb+0x8a>
    {
      uint32_t tag = WireFormatter::MakeTag(field_number, 
 800083e:	2102      	movs	r1, #2
 8000840:	68b8      	ldr	r0, [r7, #8]
 8000842:	f7ff ff95 	bl	8000770 <_ZN13EmbeddedProto13WireFormatter7MakeTagEmNS0_8WireTypeE>
 8000846:	6178      	str	r0, [r7, #20]
                              WireFormatter::WireType::LENGTH_DELIMITED);
      return_value = WireFormatter::SerializeVarint(tag, buffer);
 8000848:	6879      	ldr	r1, [r7, #4]
 800084a:	6978      	ldr	r0, [r7, #20]
 800084c:	f000 f8ee 	bl	8000a2c <_ZN13EmbeddedProto13WireFormatter15SerializeVarintImEENS_5ErrorET_RNS_20WriteBufferInterfaceE>
 8000850:	61f8      	str	r0, [r7, #28]
      
      if(Error::NO_ERRORS == return_value)
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d123      	bne.n	80008a0 <_ZNK13EmbeddedProto16MessageInterface17serialize_with_idEmRNS_20WriteBufferInterfaceEb+0x8a>
      {
        return_value = WireFormatter::SerializeVarint(size_x, buffer);
 8000858:	6879      	ldr	r1, [r7, #4]
 800085a:	69b8      	ldr	r0, [r7, #24]
 800085c:	f000 f8e6 	bl	8000a2c <_ZN13EmbeddedProto13WireFormatter15SerializeVarintImEENS_5ErrorET_RNS_20WriteBufferInterfaceE>
 8000860:	61f8      	str	r0, [r7, #28]
        if(Error::NO_ERRORS == return_value)
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d11b      	bne.n	80008a0 <_ZNK13EmbeddedProto16MessageInterface17serialize_with_idEmRNS_20WriteBufferInterfaceEb+0x8a>
        {
          // See if there is enough space left in the buffer for the data.
          if(size_x <= buffer.get_available_size()) 
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	3314      	adds	r3, #20
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	4798      	blx	r3
 8000874:	4602      	mov	r2, r0
 8000876:	69bb      	ldr	r3, [r7, #24]
 8000878:	4293      	cmp	r3, r2
 800087a:	bf94      	ite	ls
 800087c:	2301      	movls	r3, #1
 800087e:	2300      	movhi	r3, #0
 8000880:	b2db      	uxtb	r3, r3
 8000882:	2b00      	cmp	r3, #0
 8000884:	d00a      	beq.n	800089c <_ZNK13EmbeddedProto16MessageInterface17serialize_with_idEmRNS_20WriteBufferInterfaceEb+0x86>
          {
            const auto* base = static_cast<const ::EmbeddedProto::Field*>(this);  
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	613b      	str	r3, [r7, #16]
            return_value = base->serialize(buffer);
 800088a:	693b      	ldr	r3, [r7, #16]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	330c      	adds	r3, #12
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	6879      	ldr	r1, [r7, #4]
 8000894:	6938      	ldr	r0, [r7, #16]
 8000896:	4798      	blx	r3
 8000898:	61f8      	str	r0, [r7, #28]
 800089a:	e001      	b.n	80008a0 <_ZNK13EmbeddedProto16MessageInterface17serialize_with_idEmRNS_20WriteBufferInterfaceEb+0x8a>
          }
          else
          {
            return_value = Error::BUFFER_FULL;
 800089c:	2302      	movs	r3, #2
 800089e:	61fb      	str	r3, [r7, #28]
          }
        }
      }
    }
    return return_value;
 80008a0:	69fb      	ldr	r3, [r7, #28]
  }
 80008a2:	4618      	mov	r0, r3
 80008a4:	3720      	adds	r7, #32
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <_ZN13EmbeddedProto16MessageInterface22deserialize_check_typeERNS_19ReadBufferInterfaceERKNS_13WireFormatter8WireTypeE>:


  Error MessageInterface::deserialize_check_type(::EmbeddedProto::ReadBufferInterface& buffer,
                                                 const ::EmbeddedProto::WireFormatter::WireType& wire_type)
  {
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b08a      	sub	sp, #40	; 0x28
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	60f8      	str	r0, [r7, #12]
 80008b2:	60b9      	str	r1, [r7, #8]
 80008b4:	607a      	str	r2, [r7, #4]
    Error return_value = ::EmbeddedProto::WireFormatter::WireType::LENGTH_DELIMITED == wire_type 
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
                         ? Error::NO_ERRORS : Error::INVALID_WIRETYPE;
 80008ba:	2b02      	cmp	r3, #2
 80008bc:	d101      	bne.n	80008c2 <_ZN13EmbeddedProto16MessageInterface22deserialize_check_typeERNS_19ReadBufferInterfaceERKNS_13WireFormatter8WireTypeE+0x18>
 80008be:	2300      	movs	r3, #0
 80008c0:	e000      	b.n	80008c4 <_ZN13EmbeddedProto16MessageInterface22deserialize_check_typeERNS_19ReadBufferInterfaceERKNS_13WireFormatter8WireTypeE+0x1a>
 80008c2:	2303      	movs	r3, #3
    Error return_value = ::EmbeddedProto::WireFormatter::WireType::LENGTH_DELIMITED == wire_type 
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
    if(Error::NO_ERRORS == return_value)  
 80008c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d121      	bne.n	8000910 <_ZN13EmbeddedProto16MessageInterface22deserialize_check_typeERNS_19ReadBufferInterfaceERKNS_13WireFormatter8WireTypeE+0x66>
    {
      uint32_t size = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
      return_value = ::EmbeddedProto::WireFormatter::DeserializeVarint(buffer, size);
 80008d0:	f107 0320 	add.w	r3, r7, #32
 80008d4:	4619      	mov	r1, r3
 80008d6:	68b8      	ldr	r0, [r7, #8]
 80008d8:	f000 f8de 	bl	8000a98 <_ZN13EmbeddedProto13WireFormatter17DeserializeVarintImEENS_5ErrorERNS_19ReadBufferInterfaceERT_>
 80008dc:	6278      	str	r0, [r7, #36]	; 0x24
      ::EmbeddedProto::ReadBufferSection bufferSection(buffer, size);
 80008de:	6a3a      	ldr	r2, [r7, #32]
 80008e0:	f107 0310 	add.w	r3, r7, #16
 80008e4:	68b9      	ldr	r1, [r7, #8]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 fa96 	bl	8000e18 <_ZN13EmbeddedProto17ReadBufferSectionC1ERNS_19ReadBufferInterfaceEm>
      if(::EmbeddedProto::Error::NO_ERRORS == return_value)
 80008ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d109      	bne.n	8000906 <_ZN13EmbeddedProto16MessageInterface22deserialize_check_typeERNS_19ReadBufferInterfaceERKNS_13WireFormatter8WireTypeE+0x5c>
      {
        return_value = deserialize(bufferSection);
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	3310      	adds	r3, #16
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f107 0210 	add.w	r2, r7, #16
 80008fe:	4611      	mov	r1, r2
 8000900:	68f8      	ldr	r0, [r7, #12]
 8000902:	4798      	blx	r3
 8000904:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }
 8000906:	f107 0310 	add.w	r3, r7, #16
 800090a:	4618      	mov	r0, r3
 800090c:	f000 fa52 	bl	8000db4 <_ZN13EmbeddedProto17ReadBufferSectionD1Ev>
    return return_value;
 8000910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  }
 8000912:	4618      	mov	r0, r3
 8000914:	3728      	adds	r7, #40	; 0x28
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <_ZNK13EmbeddedProto16MessageInterface18skip_unknown_fieldERNS_19ReadBufferInterfaceERKNS_13WireFormatter8WireTypeE>:


  Error MessageInterface::skip_unknown_field(::EmbeddedProto::ReadBufferInterface& buffer,
                                             const ::EmbeddedProto::WireFormatter::WireType& wire_type) const
  {
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
    Error return_value = Error::NO_ERRORS;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]

    // Depending on the wire type select one of its valid variable types and deserialize the value.
    switch(wire_type) {
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b05      	cmp	r3, #5
 8000932:	d827      	bhi.n	8000984 <_ZNK13EmbeddedProto16MessageInterface18skip_unknown_fieldERNS_19ReadBufferInterfaceERKNS_13WireFormatter8WireTypeE+0x68>
 8000934:	a201      	add	r2, pc, #4	; (adr r2, 800093c <_ZNK13EmbeddedProto16MessageInterface18skip_unknown_fieldERNS_19ReadBufferInterfaceERKNS_13WireFormatter8WireTypeE+0x20>)
 8000936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800093a:	bf00      	nop
 800093c:	08000955 	.word	0x08000955
 8000940:	08000961 	.word	0x08000961
 8000944:	0800096d 	.word	0x0800096d
 8000948:	08000985 	.word	0x08000985
 800094c:	08000985 	.word	0x08000985
 8000950:	08000979 	.word	0x08000979
      case ::EmbeddedProto::WireFormatter::WireType::VARINT:
        return_value = skip_varint(buffer);
 8000954:	68b9      	ldr	r1, [r7, #8]
 8000956:	68f8      	ldr	r0, [r7, #12]
 8000958:	f000 f81a 	bl	8000990 <_ZNK13EmbeddedProto16MessageInterface11skip_varintERNS_19ReadBufferInterfaceE>
 800095c:	6178      	str	r0, [r7, #20]
        break;
 800095e:	e012      	b.n	8000986 <_ZNK13EmbeddedProto16MessageInterface18skip_unknown_fieldERNS_19ReadBufferInterfaceERKNS_13WireFormatter8WireTypeE+0x6a>

      case ::EmbeddedProto::WireFormatter::WireType::FIXED64:
        return_value = skip_fixed64(buffer);
 8000960:	68b9      	ldr	r1, [r7, #8]
 8000962:	68f8      	ldr	r0, [r7, #12]
 8000964:	f000 f834 	bl	80009d0 <_ZNK13EmbeddedProto16MessageInterface12skip_fixed64ERNS_19ReadBufferInterfaceE>
 8000968:	6178      	str	r0, [r7, #20]
        break;
 800096a:	e00c      	b.n	8000986 <_ZNK13EmbeddedProto16MessageInterface18skip_unknown_fieldERNS_19ReadBufferInterfaceERKNS_13WireFormatter8WireTypeE+0x6a>

      case ::EmbeddedProto::WireFormatter::WireType::LENGTH_DELIMITED:
        return_value = skip_length_delimited(buffer);
 800096c:	68b9      	ldr	r1, [r7, #8]
 800096e:	68f8      	ldr	r0, [r7, #12]
 8000970:	f000 f83e 	bl	80009f0 <_ZNK13EmbeddedProto16MessageInterface21skip_length_delimitedERNS_19ReadBufferInterfaceE>
 8000974:	6178      	str	r0, [r7, #20]
        break;
 8000976:	e006      	b.n	8000986 <_ZNK13EmbeddedProto16MessageInterface18skip_unknown_fieldERNS_19ReadBufferInterfaceERKNS_13WireFormatter8WireTypeE+0x6a>

      case ::EmbeddedProto::WireFormatter::WireType::FIXED32:
        return_value = skip_fixed32(buffer);
 8000978:	68b9      	ldr	r1, [r7, #8]
 800097a:	68f8      	ldr	r0, [r7, #12]
 800097c:	f000 f818 	bl	80009b0 <_ZNK13EmbeddedProto16MessageInterface12skip_fixed32ERNS_19ReadBufferInterfaceE>
 8000980:	6178      	str	r0, [r7, #20]
        break;
 8000982:	e000      	b.n	8000986 <_ZNK13EmbeddedProto16MessageInterface18skip_unknown_fieldERNS_19ReadBufferInterfaceERKNS_13WireFormatter8WireTypeE+0x6a>

      default:
        // We should never get here. DeserializeTag catches this case.
        break;
 8000984:	bf00      	nop
    }

    return return_value;
 8000986:	697b      	ldr	r3, [r7, #20]
  }
 8000988:	4618      	mov	r0, r3
 800098a:	3718      	adds	r7, #24
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <_ZNK13EmbeddedProto16MessageInterface11skip_varintERNS_19ReadBufferInterfaceE>:


  Error MessageInterface::skip_varint(::EmbeddedProto::ReadBufferInterface& buffer) const
  {
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
    // Use a 64 bit variable to decode the maximum possible number of bytes. As we do not know
    // the actual type.
    uint64_t dummy;
    return ::EmbeddedProto::WireFormatter::DeserializeVarint(buffer, dummy);
 800099a:	f107 0308 	add.w	r3, r7, #8
 800099e:	4619      	mov	r1, r3
 80009a0:	6838      	ldr	r0, [r7, #0]
 80009a2:	f000 f96d 	bl	8000c80 <_ZN13EmbeddedProto13WireFormatter17DeserializeVarintIyEENS_5ErrorERNS_19ReadBufferInterfaceERT_>
 80009a6:	4603      	mov	r3, r0
  }
 80009a8:	4618      	mov	r0, r3
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <_ZNK13EmbeddedProto16MessageInterface12skip_fixed32ERNS_19ReadBufferInterfaceE>:

  Error MessageInterface::skip_fixed32(::EmbeddedProto::ReadBufferInterface& buffer) const
  {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6039      	str	r1, [r7, #0]
    float dummy;
    return ::EmbeddedProto::WireFormatter::DeserializeFloat(buffer, dummy);
 80009ba:	f107 030c 	add.w	r3, r7, #12
 80009be:	4619      	mov	r1, r3
 80009c0:	6838      	ldr	r0, [r7, #0]
 80009c2:	f7ff fee4 	bl	800078e <_ZN13EmbeddedProto13WireFormatter16DeserializeFloatERNS_19ReadBufferInterfaceERf>
 80009c6:	4603      	mov	r3, r0
  }
 80009c8:	4618      	mov	r0, r3
 80009ca:	3710      	adds	r7, #16
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <_ZNK13EmbeddedProto16MessageInterface12skip_fixed64ERNS_19ReadBufferInterfaceE>:

  Error MessageInterface::skip_fixed64(::EmbeddedProto::ReadBufferInterface& buffer) const
  {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
    double dummy;
    return ::EmbeddedProto::WireFormatter::DeserializeDouble(buffer, dummy);
 80009da:	f107 0308 	add.w	r3, r7, #8
 80009de:	4619      	mov	r1, r3
 80009e0:	6838      	ldr	r0, [r7, #0]
 80009e2:	f7ff fef3 	bl	80007cc <_ZN13EmbeddedProto13WireFormatter17DeserializeDoubleERNS_19ReadBufferInterfaceERd>
 80009e6:	4603      	mov	r3, r0
  }
 80009e8:	4618      	mov	r0, r3
 80009ea:	3710      	adds	r7, #16
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <_ZNK13EmbeddedProto16MessageInterface21skip_length_delimitedERNS_19ReadBufferInterfaceE>:

  Error MessageInterface::skip_length_delimited(::EmbeddedProto::ReadBufferInterface& buffer) const
  {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
    // First read the number of bytes 
    uint32_t n_bytes = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	60bb      	str	r3, [r7, #8]
    const Error return_value = ::EmbeddedProto::WireFormatter::DeserializeVarint(buffer, n_bytes);
 80009fe:	f107 0308 	add.w	r3, r7, #8
 8000a02:	4619      	mov	r1, r3
 8000a04:	6838      	ldr	r0, [r7, #0]
 8000a06:	f000 f847 	bl	8000a98 <_ZN13EmbeddedProto13WireFormatter17DeserializeVarintImEENS_5ErrorERNS_19ReadBufferInterfaceERT_>
 8000a0a:	60f8      	str	r0, [r7, #12]
    if(Error::NO_ERRORS == return_value)
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d107      	bne.n	8000a22 <_ZNK13EmbeddedProto16MessageInterface21skip_length_delimitedERNS_19ReadBufferInterfaceE+0x32>
    {
      buffer.advance(n_bytes);
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	3318      	adds	r3, #24
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	68ba      	ldr	r2, [r7, #8]
 8000a1c:	4611      	mov	r1, r2
 8000a1e:	6838      	ldr	r0, [r7, #0]
 8000a20:	4798      	blx	r3
    }
    return return_value;
 8000a22:	68fb      	ldr	r3, [r7, #12]
  }
 8000a24:	4618      	mov	r0, r3
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <_ZN13EmbeddedProto13WireFormatter15SerializeVarintImEENS_5ErrorET_RNS_20WriteBufferInterfaceE>:
        \param[in] value  The data to be serialized, uint32_t or uint64_t.
        \param[in] buffer A reference to a message buffer object in which to store the variable.
        \return A value from the Error enum, NO_ERROR in case everything is fine.
      */
      template<class UINT_TYPE>
      static Error SerializeVarint(UINT_TYPE value, WriteBufferInterface& buffer) 
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
      {
        static_assert(std::is_same<UINT_TYPE, uint32_t>::value || 
                      std::is_same<UINT_TYPE, uint64_t>::value, 
                      "Wrong type passed to SerializeVarint.");

        bool memory_free = true;
 8000a36:	2301      	movs	r3, #1
 8000a38:	73fb      	strb	r3, [r7, #15]
        while((value >= VARINT_MSB_BYTE) && memory_free) 
 8000a3a:	e010      	b.n	8000a5e <_ZN13EmbeddedProto13WireFormatter15SerializeVarintImEENS_5ErrorET_RNS_20WriteBufferInterfaceE+0x32>
        {
          memory_free = buffer.push(static_cast<uint8_t>(value | VARINT_MSB_BYTE));
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	3318      	adds	r3, #24
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	b2d2      	uxtb	r2, r2
 8000a48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000a4c:	b2d2      	uxtb	r2, r2
 8000a4e:	4611      	mov	r1, r2
 8000a50:	6838      	ldr	r0, [r7, #0]
 8000a52:	4798      	blx	r3
 8000a54:	4603      	mov	r3, r0
 8000a56:	73fb      	strb	r3, [r7, #15]
          value >>= VARINT_SHIFT_N_BITS;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	09db      	lsrs	r3, r3, #7
 8000a5c:	607b      	str	r3, [r7, #4]
        while((value >= VARINT_MSB_BYTE) && memory_free) 
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2b7f      	cmp	r3, #127	; 0x7f
 8000a62:	d902      	bls.n	8000a6a <_ZN13EmbeddedProto13WireFormatter15SerializeVarintImEENS_5ErrorET_RNS_20WriteBufferInterfaceE+0x3e>
 8000a64:	7bfb      	ldrb	r3, [r7, #15]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d1e8      	bne.n	8000a3c <_ZN13EmbeddedProto13WireFormatter15SerializeVarintImEENS_5ErrorET_RNS_20WriteBufferInterfaceE+0x10>
        }
        memory_free = buffer.push(static_cast<uint8_t>(value));
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	3318      	adds	r3, #24
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	b2d2      	uxtb	r2, r2
 8000a76:	4611      	mov	r1, r2
 8000a78:	6838      	ldr	r0, [r7, #0]
 8000a7a:	4798      	blx	r3
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	73fb      	strb	r3, [r7, #15]

        const Error return_value = memory_free ? Error::NO_ERRORS : Error::BUFFER_FULL;
 8000a80:	7bfb      	ldrb	r3, [r7, #15]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <_ZN13EmbeddedProto13WireFormatter15SerializeVarintImEENS_5ErrorET_RNS_20WriteBufferInterfaceE+0x5e>
 8000a86:	2300      	movs	r3, #0
 8000a88:	e000      	b.n	8000a8c <_ZN13EmbeddedProto13WireFormatter15SerializeVarintImEENS_5ErrorET_RNS_20WriteBufferInterfaceE+0x60>
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	60bb      	str	r3, [r7, #8]
        return return_value;
 8000a8e:	68bb      	ldr	r3, [r7, #8]
      }
 8000a90:	4618      	mov	r0, r3
 8000a92:	3710      	adds	r7, #16
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <_ZN13EmbeddedProto13WireFormatter17DeserializeVarintImEENS_5ErrorERNS_19ReadBufferInterfaceERT_>:
        \param[in] buffer The data buffer from which bytes are popped.
        \param[out] value The variable in which the varint is returned.
        \return A value from the Error enum, NO_ERROR in case everything is fine.
      */
      template<class UINT_TYPE>
      static Error DeserializeVarint(ReadBufferInterface& buffer, UINT_TYPE& value) 
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	; 0x28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
                      std::is_same<UINT_TYPE, uint64_t>::value, 
                      "Wrong type passed to DeserializeVarint.");
        
        // Calculate how many bytes there are in a varint 128 base encoded number. This should 
        // yield 5 for a 32bit number and 10 for a 64bit number.
        constexpr auto N_DIGITS = std::numeric_limits<UINT_TYPE>::digits;
 8000aa2:	2320      	movs	r3, #32
 8000aa4:	61bb      	str	r3, [r7, #24]
        constexpr auto N_BITS_FLOAT = static_cast<float>(VARINT_SHIFT_N_BITS);
 8000aa6:	4b29      	ldr	r3, [pc, #164]	; (8000b4c <_ZN13EmbeddedProto13WireFormatter17DeserializeVarintImEENS_5ErrorERNS_19ReadBufferInterfaceERT_+0xb4>)
 8000aa8:	617b      	str	r3, [r7, #20]
        constexpr auto DIV_RESULT = N_DIGITS / N_BITS_FLOAT;
 8000aaa:	4b29      	ldr	r3, [pc, #164]	; (8000b50 <_ZN13EmbeddedProto13WireFormatter17DeserializeVarintImEENS_5ErrorERNS_19ReadBufferInterfaceERT_+0xb8>)
 8000aac:	613b      	str	r3, [r7, #16]
        constexpr auto DIV_CEIL = constexpr_ceil(DIV_RESULT);
 8000aae:	2305      	movs	r3, #5
 8000ab0:	60fb      	str	r3, [r7, #12]
        constexpr auto N_BYTES_IN_VARINT = static_cast<uint8_t>(DIV_CEIL);
 8000ab2:	2305      	movs	r3, #5
 8000ab4:	72fb      	strb	r3, [r7, #11]
        
        UINT_TYPE temp_value = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
        uint8_t byte = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	727b      	strb	r3, [r7, #9]
        uint8_t i = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        bool result = false;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	72bb      	strb	r3, [r7, #10]
        do 
        {
          result = buffer.pop(byte);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	331c      	adds	r3, #28
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f107 0209 	add.w	r2, r7, #9
 8000ad4:	4611      	mov	r1, r2
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	4798      	blx	r3
 8000ada:	4603      	mov	r3, r0
 8000adc:	72bb      	strb	r3, [r7, #10]
          if(result) 
 8000ade:	7abb      	ldrb	r3, [r7, #10]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d00c      	beq.n	8000afe <_ZN13EmbeddedProto13WireFormatter17DeserializeVarintImEENS_5ErrorERNS_19ReadBufferInterfaceERT_+0x66>
          {
            temp_value |= static_cast<UINT_TYPE>(byte & (~VARINT_MSB_BYTE)) << (i * VARINT_SHIFT_N_BITS);
 8000ae4:	7a7b      	ldrb	r3, [r7, #9]
 8000ae6:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8000aea:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000aee:	4613      	mov	r3, r2
 8000af0:	00db      	lsls	r3, r3, #3
 8000af2:	1a9b      	subs	r3, r3, r2
 8000af4:	fa01 f303 	lsl.w	r3, r1, r3
 8000af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000afa:	4313      	orrs	r3, r2
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
          }
          ++i;
 8000afe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b02:	3301      	adds	r3, #1
 8000b04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        } while((byte & VARINT_MSB_BYTE) && (i < N_BYTES_IN_VARINT) && result);
 8000b08:	7a7b      	ldrb	r3, [r7, #9]
 8000b0a:	b25b      	sxtb	r3, r3
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	da06      	bge.n	8000b1e <_ZN13EmbeddedProto13WireFormatter17DeserializeVarintImEENS_5ErrorERNS_19ReadBufferInterfaceERT_+0x86>
 8000b10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b14:	2b04      	cmp	r3, #4
 8000b16:	d802      	bhi.n	8000b1e <_ZN13EmbeddedProto13WireFormatter17DeserializeVarintImEENS_5ErrorERNS_19ReadBufferInterfaceERT_+0x86>
 8000b18:	7abb      	ldrb	r3, [r7, #10]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d1d4      	bne.n	8000ac8 <_ZN13EmbeddedProto13WireFormatter17DeserializeVarintImEENS_5ErrorERNS_19ReadBufferInterfaceERT_+0x30>

        Error return_value = Error::NO_ERRORS;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
        if(result)
 8000b22:	7abb      	ldrb	r3, [r7, #10]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d00a      	beq.n	8000b3e <_ZN13EmbeddedProto13WireFormatter17DeserializeVarintImEENS_5ErrorERNS_19ReadBufferInterfaceERT_+0xa6>
        {
          if(byte & VARINT_MSB_BYTE)
 8000b28:	7a7b      	ldrb	r3, [r7, #9]
 8000b2a:	b25b      	sxtb	r3, r3
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	da02      	bge.n	8000b36 <_ZN13EmbeddedProto13WireFormatter17DeserializeVarintImEENS_5ErrorERNS_19ReadBufferInterfaceERT_+0x9e>
          {
            // This varint was not closed properly.
            return_value = Error::OVERLONG_VARINT;
 8000b30:	2306      	movs	r3, #6
 8000b32:	61fb      	str	r3, [r7, #28]
 8000b34:	e005      	b.n	8000b42 <_ZN13EmbeddedProto13WireFormatter17DeserializeVarintImEENS_5ErrorERNS_19ReadBufferInterfaceERT_+0xaa>
          }
          else
          {
            // All is well.
            value = temp_value;
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	e001      	b.n	8000b42 <_ZN13EmbeddedProto13WireFormatter17DeserializeVarintImEENS_5ErrorERNS_19ReadBufferInterfaceERT_+0xaa>
          }
        }
        else 
        {
          return_value = Error::END_OF_BUFFER;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	61fb      	str	r3, [r7, #28]
        }

        return return_value;
 8000b42:	69fb      	ldr	r3, [r7, #28]
      }
 8000b44:	4618      	mov	r0, r3
 8000b46:	3728      	adds	r7, #40	; 0x28
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40e00000 	.word	0x40e00000
 8000b50:	40924925 	.word	0x40924925

08000b54 <_ZN13EmbeddedProto13WireFormatter16DeserializeFixedImEENS_5ErrorERNS_19ReadBufferInterfaceERT_>:
      static Error DeserializeFixed(ReadBufferInterface& buffer, TYPE& value) 
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	6039      	str	r1, [r7, #0]
        TYPE temp_value = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	617b      	str	r3, [r7, #20]
        bool result(true);
 8000b62:	2301      	movs	r3, #1
 8000b64:	74fb      	strb	r3, [r7, #19]
        uint8_t byte = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	72fb      	strb	r3, [r7, #11]
        for(uint8_t i = 0; (i < std::numeric_limits<TYPE>::digits) && result; 
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	74bb      	strb	r3, [r7, #18]
 8000b6e:	e018      	b.n	8000ba2 <_ZN13EmbeddedProto13WireFormatter16DeserializeFixedImEENS_5ErrorERNS_19ReadBufferInterfaceERT_+0x4e>
          result = buffer.pop(byte);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	331c      	adds	r3, #28
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f107 020b 	add.w	r2, r7, #11
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	4798      	blx	r3
 8000b82:	4603      	mov	r3, r0
 8000b84:	74fb      	strb	r3, [r7, #19]
          if(result)
 8000b86:	7cfb      	ldrb	r3, [r7, #19]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d007      	beq.n	8000b9c <_ZN13EmbeddedProto13WireFormatter16DeserializeFixedImEENS_5ErrorERNS_19ReadBufferInterfaceERT_+0x48>
            temp_value |= (static_cast<TYPE>(byte) << i);
 8000b8c:	7afb      	ldrb	r3, [r7, #11]
 8000b8e:	461a      	mov	r2, r3
 8000b90:	7cbb      	ldrb	r3, [r7, #18]
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	697a      	ldr	r2, [r7, #20]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	617b      	str	r3, [r7, #20]
            i += std::numeric_limits<uint8_t>::digits)  
 8000b9c:	7cbb      	ldrb	r3, [r7, #18]
 8000b9e:	3308      	adds	r3, #8
 8000ba0:	74bb      	strb	r3, [r7, #18]
        for(uint8_t i = 0; (i < std::numeric_limits<TYPE>::digits) && result; 
 8000ba2:	7cbb      	ldrb	r3, [r7, #18]
 8000ba4:	2b1f      	cmp	r3, #31
 8000ba6:	d802      	bhi.n	8000bae <_ZN13EmbeddedProto13WireFormatter16DeserializeFixedImEENS_5ErrorERNS_19ReadBufferInterfaceERT_+0x5a>
 8000ba8:	7cfb      	ldrb	r3, [r7, #19]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d1e0      	bne.n	8000b70 <_ZN13EmbeddedProto13WireFormatter16DeserializeFixedImEENS_5ErrorERNS_19ReadBufferInterfaceERT_+0x1c>
        Error return_value = Error::NO_ERRORS;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
        if(result)
 8000bb2:	7cfb      	ldrb	r3, [r7, #19]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d003      	beq.n	8000bc0 <_ZN13EmbeddedProto13WireFormatter16DeserializeFixedImEENS_5ErrorERNS_19ReadBufferInterfaceERT_+0x6c>
          value = temp_value;
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	697a      	ldr	r2, [r7, #20]
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	e001      	b.n	8000bc4 <_ZN13EmbeddedProto13WireFormatter16DeserializeFixedImEENS_5ErrorERNS_19ReadBufferInterfaceERT_+0x70>
          return_value = Error::END_OF_BUFFER;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	60fb      	str	r3, [r7, #12]
        return return_value;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
      }
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3718      	adds	r7, #24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <_ZN13EmbeddedProto13WireFormatter16DeserializeFixedIyEENS_5ErrorERNS_19ReadBufferInterfaceERT_>:
      static Error DeserializeFixed(ReadBufferInterface& buffer, TYPE& value) 
 8000bce:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000bd2:	b088      	sub	sp, #32
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
        TYPE temp_value = 0;
 8000bda:	f04f 0200 	mov.w	r2, #0
 8000bde:	f04f 0300 	mov.w	r3, #0
 8000be2:	e9c7 2306 	strd	r2, r3, [r7, #24]
        bool result(true);
 8000be6:	2301      	movs	r3, #1
 8000be8:	75fb      	strb	r3, [r7, #23]
        uint8_t byte = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	73fb      	strb	r3, [r7, #15]
        for(uint8_t i = 0; (i < std::numeric_limits<TYPE>::digits) && result; 
 8000bee:	2300      	movs	r3, #0
 8000bf0:	75bb      	strb	r3, [r7, #22]
 8000bf2:	e02c      	b.n	8000c4e <_ZN13EmbeddedProto13WireFormatter16DeserializeFixedIyEENS_5ErrorERNS_19ReadBufferInterfaceERT_+0x80>
          result = buffer.pop(byte);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	331c      	adds	r3, #28
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f107 020f 	add.w	r2, r7, #15
 8000c00:	4611      	mov	r1, r2
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	4798      	blx	r3
 8000c06:	4603      	mov	r3, r0
 8000c08:	75fb      	strb	r3, [r7, #23]
          if(result)
 8000c0a:	7dfb      	ldrb	r3, [r7, #23]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d01b      	beq.n	8000c48 <_ZN13EmbeddedProto13WireFormatter16DeserializeFixedIyEENS_5ErrorERNS_19ReadBufferInterfaceERT_+0x7a>
            temp_value |= (static_cast<TYPE>(byte) << i);
 8000c10:	7bfb      	ldrb	r3, [r7, #15]
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	2200      	movs	r2, #0
 8000c16:	4698      	mov	r8, r3
 8000c18:	4691      	mov	r9, r2
 8000c1a:	7dbb      	ldrb	r3, [r7, #22]
 8000c1c:	f1a3 0120 	sub.w	r1, r3, #32
 8000c20:	f1c3 0220 	rsb	r2, r3, #32
 8000c24:	fa09 f503 	lsl.w	r5, r9, r3
 8000c28:	fa08 f101 	lsl.w	r1, r8, r1
 8000c2c:	430d      	orrs	r5, r1
 8000c2e:	fa28 f202 	lsr.w	r2, r8, r2
 8000c32:	4315      	orrs	r5, r2
 8000c34:	fa08 f403 	lsl.w	r4, r8, r3
 8000c38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000c3c:	ea42 0a04 	orr.w	sl, r2, r4
 8000c40:	ea43 0b05 	orr.w	fp, r3, r5
 8000c44:	e9c7 ab06 	strd	sl, fp, [r7, #24]
            i += std::numeric_limits<uint8_t>::digits)  
 8000c48:	7dbb      	ldrb	r3, [r7, #22]
 8000c4a:	3308      	adds	r3, #8
 8000c4c:	75bb      	strb	r3, [r7, #22]
        for(uint8_t i = 0; (i < std::numeric_limits<TYPE>::digits) && result; 
 8000c4e:	7dbb      	ldrb	r3, [r7, #22]
 8000c50:	2b3f      	cmp	r3, #63	; 0x3f
 8000c52:	d802      	bhi.n	8000c5a <_ZN13EmbeddedProto13WireFormatter16DeserializeFixedIyEENS_5ErrorERNS_19ReadBufferInterfaceERT_+0x8c>
 8000c54:	7dfb      	ldrb	r3, [r7, #23]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d1cc      	bne.n	8000bf4 <_ZN13EmbeddedProto13WireFormatter16DeserializeFixedIyEENS_5ErrorERNS_19ReadBufferInterfaceERT_+0x26>
        Error return_value = Error::NO_ERRORS;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	613b      	str	r3, [r7, #16]
        if(result)
 8000c5e:	7dfb      	ldrb	r3, [r7, #23]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d005      	beq.n	8000c70 <_ZN13EmbeddedProto13WireFormatter16DeserializeFixedIyEENS_5ErrorERNS_19ReadBufferInterfaceERT_+0xa2>
          value = temp_value;
 8000c64:	6839      	ldr	r1, [r7, #0]
 8000c66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000c6a:	e9c1 2300 	strd	r2, r3, [r1]
 8000c6e:	e001      	b.n	8000c74 <_ZN13EmbeddedProto13WireFormatter16DeserializeFixedIyEENS_5ErrorERNS_19ReadBufferInterfaceERT_+0xa6>
          return_value = Error::END_OF_BUFFER;
 8000c70:	2301      	movs	r3, #1
 8000c72:	613b      	str	r3, [r7, #16]
        return return_value;
 8000c74:	693b      	ldr	r3, [r7, #16]
      }
 8000c76:	4618      	mov	r0, r3
 8000c78:	3720      	adds	r7, #32
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000c80 <_ZN13EmbeddedProto13WireFormatter17DeserializeVarintIyEENS_5ErrorERNS_19ReadBufferInterfaceERT_>:
      static Error DeserializeVarint(ReadBufferInterface& buffer, UINT_TYPE& value) 
 8000c80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000c84:	b08c      	sub	sp, #48	; 0x30
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
 8000c8a:	6039      	str	r1, [r7, #0]
        constexpr auto N_DIGITS = std::numeric_limits<UINT_TYPE>::digits;
 8000c8c:	2340      	movs	r3, #64	; 0x40
 8000c8e:	61fb      	str	r3, [r7, #28]
        constexpr auto N_BITS_FLOAT = static_cast<float>(VARINT_SHIFT_N_BITS);
 8000c90:	4b36      	ldr	r3, [pc, #216]	; (8000d6c <_ZN13EmbeddedProto13WireFormatter17DeserializeVarintIyEENS_5ErrorERNS_19ReadBufferInterfaceERT_+0xec>)
 8000c92:	61bb      	str	r3, [r7, #24]
        constexpr auto DIV_RESULT = N_DIGITS / N_BITS_FLOAT;
 8000c94:	4b36      	ldr	r3, [pc, #216]	; (8000d70 <_ZN13EmbeddedProto13WireFormatter17DeserializeVarintIyEENS_5ErrorERNS_19ReadBufferInterfaceERT_+0xf0>)
 8000c96:	617b      	str	r3, [r7, #20]
        constexpr auto DIV_CEIL = constexpr_ceil(DIV_RESULT);
 8000c98:	230a      	movs	r3, #10
 8000c9a:	613b      	str	r3, [r7, #16]
        constexpr auto N_BYTES_IN_VARINT = static_cast<uint8_t>(DIV_CEIL);
 8000c9c:	230a      	movs	r3, #10
 8000c9e:	73fb      	strb	r3, [r7, #15]
        UINT_TYPE temp_value = 0;
 8000ca0:	f04f 0200 	mov.w	r2, #0
 8000ca4:	f04f 0300 	mov.w	r3, #0
 8000ca8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        uint8_t byte = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	737b      	strb	r3, [r7, #13]
        uint8_t i = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        bool result = false;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	73bb      	strb	r3, [r7, #14]
          result = buffer.pop(byte);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	331c      	adds	r3, #28
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f107 020d 	add.w	r2, r7, #13
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	4798      	blx	r3
 8000ccc:	4603      	mov	r3, r0
 8000cce:	73bb      	strb	r3, [r7, #14]
          if(result) 
 8000cd0:	7bbb      	ldrb	r3, [r7, #14]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d020      	beq.n	8000d18 <_ZN13EmbeddedProto13WireFormatter17DeserializeVarintIyEENS_5ErrorERNS_19ReadBufferInterfaceERT_+0x98>
            temp_value |= static_cast<UINT_TYPE>(byte & (~VARINT_MSB_BYTE)) << (i * VARINT_SHIFT_N_BITS);
 8000cd6:	7b7b      	ldrb	r3, [r7, #13]
 8000cd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000cdc:	17da      	asrs	r2, r3, #31
 8000cde:	4698      	mov	r8, r3
 8000ce0:	4691      	mov	r9, r2
 8000ce2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	00db      	lsls	r3, r3, #3
 8000cea:	1a9b      	subs	r3, r3, r2
 8000cec:	f1a3 0120 	sub.w	r1, r3, #32
 8000cf0:	f1c3 0220 	rsb	r2, r3, #32
 8000cf4:	fa09 f503 	lsl.w	r5, r9, r3
 8000cf8:	fa08 f101 	lsl.w	r1, r8, r1
 8000cfc:	430d      	orrs	r5, r1
 8000cfe:	fa28 f202 	lsr.w	r2, r8, r2
 8000d02:	4315      	orrs	r5, r2
 8000d04:	fa08 f403 	lsl.w	r4, r8, r3
 8000d08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000d0c:	ea42 0a04 	orr.w	sl, r2, r4
 8000d10:	ea43 0b05 	orr.w	fp, r3, r5
 8000d14:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
          ++i;
 8000d18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        } while((byte & VARINT_MSB_BYTE) && (i < N_BYTES_IN_VARINT) && result);
 8000d22:	7b7b      	ldrb	r3, [r7, #13]
 8000d24:	b25b      	sxtb	r3, r3
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	da06      	bge.n	8000d38 <_ZN13EmbeddedProto13WireFormatter17DeserializeVarintIyEENS_5ErrorERNS_19ReadBufferInterfaceERT_+0xb8>
 8000d2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d2e:	2b09      	cmp	r3, #9
 8000d30:	d802      	bhi.n	8000d38 <_ZN13EmbeddedProto13WireFormatter17DeserializeVarintIyEENS_5ErrorERNS_19ReadBufferInterfaceERT_+0xb8>
 8000d32:	7bbb      	ldrb	r3, [r7, #14]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d1c0      	bne.n	8000cba <_ZN13EmbeddedProto13WireFormatter17DeserializeVarintIyEENS_5ErrorERNS_19ReadBufferInterfaceERT_+0x3a>
        Error return_value = Error::NO_ERRORS;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	623b      	str	r3, [r7, #32]
        if(result)
 8000d3c:	7bbb      	ldrb	r3, [r7, #14]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d00c      	beq.n	8000d5c <_ZN13EmbeddedProto13WireFormatter17DeserializeVarintIyEENS_5ErrorERNS_19ReadBufferInterfaceERT_+0xdc>
          if(byte & VARINT_MSB_BYTE)
 8000d42:	7b7b      	ldrb	r3, [r7, #13]
 8000d44:	b25b      	sxtb	r3, r3
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	da02      	bge.n	8000d50 <_ZN13EmbeddedProto13WireFormatter17DeserializeVarintIyEENS_5ErrorERNS_19ReadBufferInterfaceERT_+0xd0>
            return_value = Error::OVERLONG_VARINT;
 8000d4a:	2306      	movs	r3, #6
 8000d4c:	623b      	str	r3, [r7, #32]
 8000d4e:	e007      	b.n	8000d60 <_ZN13EmbeddedProto13WireFormatter17DeserializeVarintIyEENS_5ErrorERNS_19ReadBufferInterfaceERT_+0xe0>
            value = temp_value;
 8000d50:	6839      	ldr	r1, [r7, #0]
 8000d52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000d56:	e9c1 2300 	strd	r2, r3, [r1]
 8000d5a:	e001      	b.n	8000d60 <_ZN13EmbeddedProto13WireFormatter17DeserializeVarintIyEENS_5ErrorERNS_19ReadBufferInterfaceERT_+0xe0>
          return_value = Error::END_OF_BUFFER;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	623b      	str	r3, [r7, #32]
        return return_value;
 8000d60:	6a3b      	ldr	r3, [r7, #32]
      }
 8000d62:	4618      	mov	r0, r3
 8000d64:	3730      	adds	r7, #48	; 0x30
 8000d66:	46bd      	mov	sp, r7
 8000d68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000d6c:	40e00000 	.word	0x40e00000
 8000d70:	41124925 	.word	0x41124925

08000d74 <_ZN13EmbeddedProto19ReadBufferInterfaceD1Ev>:
  class ReadBufferInterface
  {
    public:

      ReadBufferInterface() = default;
      virtual ~ReadBufferInterface() = default;
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <_ZN13EmbeddedProto19ReadBufferInterfaceD1Ev+0x1c>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4618      	mov	r0, r3
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	08008514 	.word	0x08008514

08000d94 <_ZN13EmbeddedProto19ReadBufferInterfaceD0Ev>:
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f7ff ffe9 	bl	8000d74 <_ZN13EmbeddedProto19ReadBufferInterfaceD1Ev>
 8000da2:	2104      	movs	r1, #4
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f007 facb 	bl	8008340 <_ZdlPvj>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4618      	mov	r0, r3
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <_ZN13EmbeddedProto17ReadBufferSectionD1Ev>:
        \param buffer The actual data buffer from which the bytes are obtained.
        \param size The maximum number of bytes to return from buffer.
      */
      ReadBufferSection(ReadBufferInterface& buffer, const uint32_t size);

      ~ReadBufferSection() override = default;
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	4a05      	ldr	r2, [pc, #20]	; (8000dd4 <_ZN13EmbeddedProto17ReadBufferSectionD1Ev+0x20>)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ffd5 	bl	8000d74 <_ZN13EmbeddedProto19ReadBufferInterfaceD1Ev>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	0800853c 	.word	0x0800853c

08000dd8 <_ZN13EmbeddedProto17ReadBufferSectionD0Ev>:
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff ffe7 	bl	8000db4 <_ZN13EmbeddedProto17ReadBufferSectionD1Ev>
 8000de6:	2110      	movs	r1, #16
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f007 faa9 	bl	8008340 <_ZdlPvj>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4618      	mov	r0, r3
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <_ZN13EmbeddedProto19ReadBufferInterfaceC1Ev>:
      ReadBufferInterface() = default;
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <_ZN13EmbeddedProto19ReadBufferInterfaceC1Ev+0x1c>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	08008514 	.word	0x08008514

08000e18 <_ZN13EmbeddedProto17ReadBufferSectionC1ERNS_19ReadBufferInterfaceEm>:


namespace EmbeddedProto 
{

  ReadBufferSection::ReadBufferSection(ReadBufferInterface& buffer, const uint32_t size)
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
    : buffer_(buffer),
      size_(std::min(size, buffer.get_size())),
      max_size_(std::min(size, buffer.get_size()))
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff ffe6 	bl	8000df8 <_ZN13EmbeddedProto19ReadBufferInterfaceC1Ev>
 8000e2c:	4a18      	ldr	r2, [pc, #96]	; (8000e90 <_ZN13EmbeddedProto17ReadBufferSectionC1ERNS_19ReadBufferInterfaceEm+0x78>)
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	601a      	str	r2, [r3, #0]
    : buffer_(buffer),
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	68ba      	ldr	r2, [r7, #8]
 8000e36:	605a      	str	r2, [r3, #4]
      size_(std::min(size, buffer.get_size())),
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	3308      	adds	r3, #8
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	68b8      	ldr	r0, [r7, #8]
 8000e42:	4798      	blx	r3
 8000e44:	4603      	mov	r3, r0
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	f107 0210 	add.w	r2, r7, #16
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	4611      	mov	r1, r2
 8000e50:	4618      	mov	r0, r3
 8000e52:	f000 f8d0 	bl	8000ff6 <_ZSt3minImERKT_S2_S2_>
 8000e56:	4603      	mov	r3, r0
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	609a      	str	r2, [r3, #8]
      max_size_(std::min(size, buffer.get_size()))
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	3308      	adds	r3, #8
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	68b8      	ldr	r0, [r7, #8]
 8000e68:	4798      	blx	r3
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	617b      	str	r3, [r7, #20]
 8000e6e:	f107 0214 	add.w	r2, r7, #20
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	4611      	mov	r1, r2
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 f8bd 	bl	8000ff6 <_ZSt3minImERKT_S2_S2_>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	60da      	str	r2, [r3, #12]
  {
    
  }
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	4618      	mov	r0, r3
 8000e88:	3718      	adds	r7, #24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	0800853c 	.word	0x0800853c

08000e94 <_ZNK13EmbeddedProto17ReadBufferSection8get_sizeEv>:

  uint32_t ReadBufferSection::get_size() const
  {
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
    return size_;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	689b      	ldr	r3, [r3, #8]
  }
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <_ZNK13EmbeddedProto17ReadBufferSection12get_max_sizeEv>:

  uint32_t ReadBufferSection::get_max_size() const
  {
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
    return max_size_;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	68db      	ldr	r3, [r3, #12]
  }
 8000eb8:	4618      	mov	r0, r3
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <_ZNK13EmbeddedProto17ReadBufferSection4peekERh>:

  bool ReadBufferSection::peek(uint8_t& byte) const
  {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
    bool result = 0 < size_;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	bf14      	ite	ne
 8000ed6:	2301      	movne	r3, #1
 8000ed8:	2300      	moveq	r3, #0
 8000eda:	73fb      	strb	r3, [r7, #15]
    if(result)
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d00b      	beq.n	8000efa <_ZNK13EmbeddedProto17ReadBufferSection4peekERh+0x36>
    {
      result = buffer_.peek(byte);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685a      	ldr	r2, [r3, #4]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	3310      	adds	r3, #16
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	6839      	ldr	r1, [r7, #0]
 8000ef2:	4610      	mov	r0, r2
 8000ef4:	4798      	blx	r3
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	73fb      	strb	r3, [r7, #15]
    }
    return result;
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
  }
 8000efc:	4618      	mov	r0, r3
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <_ZN13EmbeddedProto17ReadBufferSection7advanceEv>:

  bool ReadBufferSection::advance()
  {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
    bool result = 0 < size_;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	bf14      	ite	ne
 8000f14:	2301      	movne	r3, #1
 8000f16:	2300      	moveq	r3, #0
 8000f18:	73fb      	strb	r3, [r7, #15]
    if(result) 
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d00f      	beq.n	8000f40 <_ZN13EmbeddedProto17ReadBufferSection7advanceEv+0x3c>
    {
      result = buffer_.advance();
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	3314      	adds	r3, #20
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4610      	mov	r0, r2
 8000f30:	4798      	blx	r3
 8000f32:	4603      	mov	r3, r0
 8000f34:	73fb      	strb	r3, [r7, #15]
      --size_;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	1e5a      	subs	r2, r3, #1
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
    }
    return result;
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
  }
 8000f42:	4618      	mov	r0, r3
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <_ZN13EmbeddedProto17ReadBufferSection7advanceEm>:

  bool ReadBufferSection::advance(const uint32_t n_bytes)
  {
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b084      	sub	sp, #16
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
 8000f52:	6039      	str	r1, [r7, #0]
    bool result = 0 < size_;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	bf14      	ite	ne
 8000f5c:	2301      	movne	r3, #1
 8000f5e:	2300      	moveq	r3, #0
 8000f60:	73fb      	strb	r3, [r7, #15]
    if(result) 
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d01c      	beq.n	8000fa2 <_ZN13EmbeddedProto17ReadBufferSection7advanceEm+0x58>
    {
      uint32_t n = (n_bytes <= size_) ? n_bytes : size_;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	683a      	ldr	r2, [r7, #0]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d903      	bls.n	8000f7a <_ZN13EmbeddedProto17ReadBufferSection7advanceEm+0x30>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	3308      	adds	r3, #8
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	e000      	b.n	8000f7c <_ZN13EmbeddedProto17ReadBufferSection7advanceEm+0x32>
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	60bb      	str	r3, [r7, #8]
      result = buffer_.advance(n);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	685a      	ldr	r2, [r3, #4]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	3318      	adds	r3, #24
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	68b9      	ldr	r1, [r7, #8]
 8000f8e:	4610      	mov	r0, r2
 8000f90:	4798      	blx	r3
 8000f92:	4603      	mov	r3, r0
 8000f94:	73fb      	strb	r3, [r7, #15]
      size_ -= n;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	689a      	ldr	r2, [r3, #8]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	1ad2      	subs	r2, r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
    }
    return result;
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
  }
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <_ZN13EmbeddedProto17ReadBufferSection3popERh>:

  bool ReadBufferSection::pop(uint8_t& byte)
  {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
    bool result = 0 < size_;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	bf14      	ite	ne
 8000fbe:	2301      	movne	r3, #1
 8000fc0:	2300      	moveq	r3, #0
 8000fc2:	73fb      	strb	r3, [r7, #15]
    if(result)
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d010      	beq.n	8000fec <_ZN13EmbeddedProto17ReadBufferSection3popERh+0x40>
    {
      result = buffer_.pop(byte);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685a      	ldr	r2, [r3, #4]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	331c      	adds	r3, #28
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	6839      	ldr	r1, [r7, #0]
 8000fda:	4610      	mov	r0, r2
 8000fdc:	4798      	blx	r3
 8000fde:	4603      	mov	r3, r0
 8000fe0:	73fb      	strb	r3, [r7, #15]
      --size_;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	1e5a      	subs	r2, r3, #1
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	609a      	str	r2, [r3, #8]
    }
    return result;
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
  }
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <_ZSt3minImERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8000ff6:	b480      	push	{r7}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
 8000ffe:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	429a      	cmp	r2, r3
 800100a:	d201      	bcs.n	8001010 <_ZSt3minImERKT_S2_S2_+0x1a>
	return __b;
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	e000      	b.n	8001012 <_ZSt3minImERKT_S2_S2_+0x1c>
      return __a;
 8001010:	687b      	ldr	r3, [r7, #4]
    }
 8001012:	4618      	mov	r0, r3
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
	...

08001020 <_ZN14UartReadBufferC1Ev>:
 *    the Netherlands
 */

#include "UartReadBuffer.h"

UartReadBuffer::UartReadBuffer()
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  : data_{0},
    write_index_(0),
    read_index_(0)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fee4 	bl	8000df8 <_ZN13EmbeddedProto19ReadBufferInterfaceC1Ev>
 8001030:	4a0a      	ldr	r2, [pc, #40]	; (800105c <_ZN14UartReadBufferC1Ev+0x3c>)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	601a      	str	r2, [r3, #0]
  : data_{0},
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3304      	adds	r3, #4
 800103a:	2232      	movs	r2, #50	; 0x32
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f007 f996 	bl	8008370 <memset>
    write_index_(0),
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	639a      	str	r2, [r3, #56]	; 0x38
    read_index_(0)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	63da      	str	r2, [r3, #60]	; 0x3c
{

}
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	08008564 	.word	0x08008564

08001060 <_ZNK14UartReadBuffer8get_sizeEv>:

uint32_t UartReadBuffer::get_size() const
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  return write_index_;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800106c:	4618      	mov	r0, r3
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <_ZNK14UartReadBuffer12get_max_sizeEv>:

uint32_t UartReadBuffer::get_max_size() const
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  return MAX_SIZE;
 8001080:	2332      	movs	r3, #50	; 0x32
}
 8001082:	4618      	mov	r0, r3
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <_ZNK14UartReadBuffer4peekERh>:

bool UartReadBuffer::peek(uint8_t& byte) const
{
 800108e:	b480      	push	{r7}
 8001090:	b085      	sub	sp, #20
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
 8001096:	6039      	str	r1, [r7, #0]
  const bool return_value = write_index_ > read_index_;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010a0:	429a      	cmp	r2, r3
 80010a2:	bf8c      	ite	hi
 80010a4:	2301      	movhi	r3, #1
 80010a6:	2300      	movls	r3, #0
 80010a8:	73fb      	strb	r3, [r7, #15]
  if(return_value)
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d006      	beq.n	80010be <_ZNK14UartReadBuffer4peekERh+0x30>
  {
    byte = data_[read_index_];
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	4413      	add	r3, r2
 80010b8:	791a      	ldrb	r2, [r3, #4]
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	701a      	strb	r2, [r3, #0]
  }
  return return_value;
 80010be:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <_ZN14UartReadBuffer7advanceEv>:

bool UartReadBuffer::advance()
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  const bool return_value = write_index_ > read_index_;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010dc:	429a      	cmp	r2, r3
 80010de:	bf8c      	ite	hi
 80010e0:	2301      	movhi	r3, #1
 80010e2:	2300      	movls	r3, #0
 80010e4:	73fb      	strb	r3, [r7, #15]
  if(return_value)
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d004      	beq.n	80010f6 <_ZN14UartReadBuffer7advanceEv+0x2a>
  {
    ++read_index_;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010f0:	1c5a      	adds	r2, r3, #1
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  return return_value;
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <_ZN14UartReadBuffer7advanceEm>:

bool UartReadBuffer::advance(const uint32_t N)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  const uint32_t new_read_index = read_index_ + N;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001112:	683a      	ldr	r2, [r7, #0]
 8001114:	4413      	add	r3, r2
 8001116:	60fb      	str	r3, [r7, #12]
  const bool return_value = write_index_ > new_read_index;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	429a      	cmp	r2, r3
 8001120:	bf34      	ite	cc
 8001122:	2301      	movcc	r3, #1
 8001124:	2300      	movcs	r3, #0
 8001126:	72fb      	strb	r3, [r7, #11]
  if(return_value)
 8001128:	7afb      	ldrb	r3, [r7, #11]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d002      	beq.n	8001134 <_ZN14UartReadBuffer7advanceEm+0x30>
  {
    read_index_ = new_read_index;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	68fa      	ldr	r2, [r7, #12]
 8001132:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  return return_value;
 8001134:	7afb      	ldrb	r3, [r7, #11]
}
 8001136:	4618      	mov	r0, r3
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <_ZN14UartReadBuffer3popERh>:

bool UartReadBuffer::pop(uint8_t& byte)
{
 8001142:	b480      	push	{r7}
 8001144:	b085      	sub	sp, #20
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
 800114a:	6039      	str	r1, [r7, #0]
  const bool return_value = write_index_ > read_index_;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001154:	429a      	cmp	r2, r3
 8001156:	bf8c      	ite	hi
 8001158:	2301      	movhi	r3, #1
 800115a:	2300      	movls	r3, #0
 800115c:	73fb      	strb	r3, [r7, #15]
  if(return_value) {
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d00b      	beq.n	800117c <_ZN14UartReadBuffer3popERh+0x3a>
    byte = data_[read_index_];
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	4413      	add	r3, r2
 800116c:	791a      	ldrb	r2, [r3, #4]
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	701a      	strb	r2, [r3, #0]
    ++read_index_;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001176:	1c5a      	adds	r2, r3, #1
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  return return_value;
 800117c:	7bfb      	ldrb	r3, [r7, #15]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3714      	adds	r7, #20
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <_ZN14UartReadBuffer5clearEv>:
{
  return write_index_;
}

void UartReadBuffer::clear()
{
 800118a:	b480      	push	{r7}
 800118c:	b083      	sub	sp, #12
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
  read_index_ = 0;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	63da      	str	r2, [r3, #60]	; 0x3c
  write_index_ = 0;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <_ZN14UartReadBuffer4pushERh>:

bool UartReadBuffer::push(uint8_t& byte)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b085      	sub	sp, #20
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
 80011b2:	6039      	str	r1, [r7, #0]
  const bool return_value = MAX_SIZE > write_index_;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011b8:	2b31      	cmp	r3, #49	; 0x31
 80011ba:	bf94      	ite	ls
 80011bc:	2301      	movls	r3, #1
 80011be:	2300      	movhi	r3, #0
 80011c0:	73fb      	strb	r3, [r7, #15]
  if(return_value)
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d00c      	beq.n	80011e2 <_ZN14UartReadBuffer4pushERh+0x38>
  {
    data_[write_index_] = byte;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011cc:	683a      	ldr	r2, [r7, #0]
 80011ce:	7811      	ldrb	r1, [r2, #0]
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	4413      	add	r3, r2
 80011d4:	460a      	mov	r2, r1
 80011d6:	711a      	strb	r2, [r3, #4]
    ++write_index_;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011dc:	1c5a      	adds	r2, r3, #1
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  return return_value;
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <_ZN14UartReadBufferD1Ev>:
    //! Store a maximum of MAX_SIZE bytes in the buffer
    static constexpr uint32_t MAX_SIZE = 50;

  public:
    UartReadBuffer();
    ~UartReadBuffer() override = default;
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	4a05      	ldr	r2, [pc, #20]	; (8001210 <_ZN14UartReadBufferD1Ev+0x20>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff fdb7 	bl	8000d74 <_ZN13EmbeddedProto19ReadBufferInterfaceD1Ev>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	08008564 	.word	0x08008564

08001214 <_ZN14UartReadBufferD0Ev>:
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ffe7 	bl	80011f0 <_ZN14UartReadBufferD1Ev>
 8001222:	2140      	movs	r1, #64	; 0x40
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f007 f88b 	bl	8008340 <_ZdlPvj>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <_ZN15UartWriteBuffer5clearEv>:
#include "UartWriteBuffer.h"

#include <string.h>

void UartWriteBuffer::clear()
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  write_index_ = 0;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <_ZNK15UartWriteBuffer8get_sizeEv>:

uint32_t UartWriteBuffer::get_size() const
{
 800124e:	b480      	push	{r7}
 8001250:	b083      	sub	sp, #12
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
  return write_index_;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <_ZNK15UartWriteBuffer12get_max_sizeEv>:

uint32_t UartWriteBuffer::get_max_size() const
{
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  return MAX_SIZE;
 800126e:	2332      	movs	r3, #50	; 0x32
}
 8001270:	4618      	mov	r0, r3
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <_ZNK15UartWriteBuffer18get_available_sizeEv>:

uint32_t UartWriteBuffer::get_available_size() const
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  return MAX_SIZE - write_index_;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001288:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
}
 800128c:	4618      	mov	r0, r3
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <_ZN15UartWriteBuffer4pushEh>:

bool UartWriteBuffer::push(const uint8_t byte)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	460b      	mov	r3, r1
 80012a2:	70fb      	strb	r3, [r7, #3]
  bool return_value = MAX_SIZE > write_index_;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012a8:	2b31      	cmp	r3, #49	; 0x31
 80012aa:	bf94      	ite	ls
 80012ac:	2301      	movls	r3, #1
 80012ae:	2300      	movhi	r3, #0
 80012b0:	73fb      	strb	r3, [r7, #15]
  if(return_value)
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d00a      	beq.n	80012ce <_ZN15UartWriteBuffer4pushEh+0x36>
  {
    data_[write_index_] = byte;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	4413      	add	r3, r2
 80012c0:	78fa      	ldrb	r2, [r7, #3]
 80012c2:	711a      	strb	r2, [r3, #4]
    ++write_index_;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012c8:	1c5a      	adds	r2, r3, #1
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  return return_value;
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <_ZN15UartWriteBuffer4pushEPKhm>:

bool UartWriteBuffer::push(const uint8_t* bytes, const uint32_t length)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  bool return_value = MAX_SIZE > (write_index_ + length);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4413      	add	r3, r2
 80012f0:	2b31      	cmp	r3, #49	; 0x31
 80012f2:	bf94      	ite	ls
 80012f4:	2301      	movls	r3, #1
 80012f6:	2300      	movhi	r3, #0
 80012f8:	75fb      	strb	r3, [r7, #23]
  if(return_value)
 80012fa:	7dfb      	ldrb	r3, [r7, #23]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d00f      	beq.n	8001320 <_ZN15UartWriteBuffer4pushEPKhm+0x44>
  {
    memcpy(data_ + write_index_, bytes, length);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	1d1a      	adds	r2, r3, #4
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001308:	4413      	add	r3, r2
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	68b9      	ldr	r1, [r7, #8]
 800130e:	4618      	mov	r0, r3
 8001310:	f007 f85c 	bl	80083cc <memcpy>
    write_index_ += length;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	441a      	add	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  return return_value;
 8001320:	7dfb      	ldrb	r3, [r7, #23]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <_ZN15UartWriteBuffer8get_dataEv>:

uint8_t* UartWriteBuffer::get_data()
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
  return data_;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3304      	adds	r3, #4
}
 8001336:	4618      	mov	r0, r3
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
	...

08001344 <_ZN15UartWriteBufferD1Ev>:
    //! Store a maximum of MAX_SIZE bytes in the buffer
    static constexpr uint32_t MAX_SIZE = 50;

  public:
    UartWriteBuffer() = default;
    ~UartWriteBuffer() override = default;
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	4a05      	ldr	r2, [pc, #20]	; (8001364 <_ZN15UartWriteBufferD1Ev+0x20>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff f9a5 	bl	80006a4 <_ZN13EmbeddedProto20WriteBufferInterfaceD1Ev>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4618      	mov	r0, r3
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	0800858c 	.word	0x0800858c

08001368 <_ZN15UartWriteBufferD0Ev>:
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff ffe7 	bl	8001344 <_ZN15UartWriteBufferD1Ev>
 8001376:	213c      	movs	r1, #60	; 0x3c
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f006 ffe1 	bl	8008340 <_ZdlPvj>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4618      	mov	r0, r3
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <_ZN13EmbeddedProto13WireFormatter14DeserializeTagERNS_19ReadBufferInterfaceERNS0_8WireTypeERm>:
      static Error DeserializeTag(ReadBufferInterface& buffer, WireType& type, uint32_t& id) 
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
        Error return_value = DeserializeVarint(buffer, temp_value);
 8001394:	f107 0310 	add.w	r3, r7, #16
 8001398:	4619      	mov	r1, r3
 800139a:	68f8      	ldr	r0, [r7, #12]
 800139c:	f7ff fb7c 	bl	8000a98 <_ZN13EmbeddedProto13WireFormatter17DeserializeVarintImEENS_5ErrorERNS_19ReadBufferInterfaceERT_>
 80013a0:	6178      	str	r0, [r7, #20]
        if(Error::NO_ERRORS == return_value) 
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d111      	bne.n	80013cc <_ZN13EmbeddedProto13WireFormatter14DeserializeTagERNS_19ReadBufferInterfaceERNS0_8WireTypeERm+0x44>
          if((temp_value &  0x07) <= static_cast<uint32_t>(WireType::FIXED32))
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	2b05      	cmp	r3, #5
 80013b0:	d80a      	bhi.n	80013c8 <_ZN13EmbeddedProto13WireFormatter14DeserializeTagERNS_19ReadBufferInterfaceERNS0_8WireTypeERm+0x40>
            type = static_cast<WireType>(temp_value &  0x07);
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	f003 0307 	and.w	r3, r3, #7
 80013b8:	461a      	mov	r2, r3
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	601a      	str	r2, [r3, #0]
            id = (temp_value >> 3);
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	08da      	lsrs	r2, r3, #3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	e001      	b.n	80013cc <_ZN13EmbeddedProto13WireFormatter14DeserializeTagERNS_19ReadBufferInterfaceERNS0_8WireTypeERm+0x44>
            return_value = Error::INVALID_WIRETYPE;
 80013c8:	2303      	movs	r3, #3
 80013ca:	617b      	str	r3, [r7, #20]
        return return_value;
 80013cc:	697b      	ldr	r3, [r7, #20]
      }
 80013ce:	4618      	mov	r0, r3
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <_ZN13EmbeddedProto13WireFormatter15DeserializeBoolERNS_19ReadBufferInterfaceERb>:
      static Error DeserializeBool(ReadBufferInterface& buffer, bool& value) 
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b084      	sub	sp, #16
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	6039      	str	r1, [r7, #0]
        Error result = Error::NO_ERRORS;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]
        if(buffer.pop(byte))
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	331c      	adds	r3, #28
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f107 020b 	add.w	r2, r7, #11
 80013f0:	4611      	mov	r1, r2
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	4798      	blx	r3
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d008      	beq.n	800140e <_ZN13EmbeddedProto13WireFormatter15DeserializeBoolERNS_19ReadBufferInterfaceERb+0x38>
          value = static_cast<bool>(byte);
 80013fc:	7afb      	ldrb	r3, [r7, #11]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	bf14      	ite	ne
 8001402:	2301      	movne	r3, #1
 8001404:	2300      	moveq	r3, #0
 8001406:	b2da      	uxtb	r2, r3
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	701a      	strb	r2, [r3, #0]
 800140c:	e001      	b.n	8001412 <_ZN13EmbeddedProto13WireFormatter15DeserializeBoolERNS_19ReadBufferInterfaceERb+0x3c>
          result = Error::END_OF_BUFFER;
 800140e:	2301      	movs	r3, #1
 8001410:	60fb      	str	r3, [r7, #12]
        return result;
 8001412:	68fb      	ldr	r3, [r7, #12]
      }
 8001414:	4618      	mov	r0, r3
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <_ZN13EmbeddedProto5FieldC1Ev>:
        sfixed32, 
        floatfixed
      };


      Field() = default;
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	4a04      	ldr	r2, [pc, #16]	; (8001438 <_ZN13EmbeddedProto5FieldC1Ev+0x1c>)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4618      	mov	r0, r3
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	080085fc 	.word	0x080085fc

0800143c <_ZN13EmbeddedProto5FieldD1Ev>:
      virtual ~Field() = default;
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	4a04      	ldr	r2, [pc, #16]	; (8001458 <_ZN13EmbeddedProto5FieldD1Ev+0x1c>)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4618      	mov	r0, r3
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	080085fc 	.word	0x080085fc

0800145c <_ZN13EmbeddedProto5FieldD0Ev>:
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff ffe9 	bl	800143c <_ZN13EmbeddedProto5FieldD1Ev>
 800146a:	2104      	movs	r1, #4
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f006 ff67 	bl	8008340 <_ZdlPvj>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4618      	mov	r0, r3
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <_ZN13EmbeddedProto16MessageInterfaceC1Ev>:

class MessageInterface : public ::EmbeddedProto::Field
{
  public:

    MessageInterface() = default;
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff ffc8 	bl	800141c <_ZN13EmbeddedProto5FieldC1Ev>
 800148c:	4a03      	ldr	r2, [pc, #12]	; (800149c <_ZN13EmbeddedProto16MessageInterfaceC1Ev+0x20>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	080084f0 	.word	0x080084f0

080014a0 <_ZN13EmbeddedProto16MessageInterfaceD1Ev>:

    ~MessageInterface() override = default;
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	4a05      	ldr	r2, [pc, #20]	; (80014c0 <_ZN13EmbeddedProto16MessageInterfaceD1Ev+0x20>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ffc3 	bl	800143c <_ZN13EmbeddedProto5FieldD1Ev>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4618      	mov	r0, r3
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	080084f0 	.word	0x080084f0

080014c4 <_ZN13EmbeddedProto16MessageInterfaceD0Ev>:
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff ffe7 	bl	80014a0 <_ZN13EmbeddedProto16MessageInterfaceD1Ev>
 80014d2:	2104      	movs	r1, #4
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f006 ff33 	bl	8008340 <_ZdlPvj>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4618      	mov	r0, r3
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <_ZN7Command12clear_buttonEv>:
      set_value(rhs.get_value());
      return *this;
    }

    static constexpr char const* BUTTON_NAME = "button";
    inline void clear_button() { button_.clear(); }
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3304      	adds	r3, #4
 80014f0:	4618      	mov	r0, r3
 80014f2:	f000 fcdc 	bl	8001eae <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE7EN7Command7ButtonsELNS_13WireFormatter8WireTypeE0EE5clearEv>
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <_ZNK7Command10get_buttonEv>:
    inline void set_button(const Buttons& value) { button_ = value; }
    inline void set_button(const Buttons&& value) { button_ = value; }
    inline const Buttons& get_button() const { return button_.get(); }
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3304      	adds	r3, #4
 800150a:	4618      	mov	r0, r3
 800150c:	f000 fcdc 	bl	8001ec8 <_ZNK13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE7EN7Command7ButtonsELNS_13WireFormatter8WireTypeE0EE3getEv>
 8001510:	4603      	mov	r3, r0
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <_ZN7Command11clear_valueEv>:
    inline Buttons button() const { return button_.get(); }

    static constexpr char const* VALUE_NAME = "value";
    inline void clear_value() { value_.clear(); }
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3308      	adds	r3, #8
 8001526:	4618      	mov	r0, r3
 8001528:	f000 fcd9 	bl	8001ede <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE2EmLNS_13WireFormatter8WireTypeE0EE5clearEv>
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <_ZNK7Command9serializeERN13EmbeddedProto20WriteBufferInterfaceE>:
    inline uint32_t& mutable_value() { return value_.get(); }
    inline const uint32_t& get_value() const { return value_.get(); }
    inline uint32_t value() const { return value_.get(); }


    ::EmbeddedProto::Error serialize(::EmbeddedProto::WriteBufferInterface& buffer) const override
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
    {
      ::EmbeddedProto::Error return_value = ::EmbeddedProto::Error::NO_ERRORS;
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]

      if((static_cast<Buttons>(0) != button_.get()) && (::EmbeddedProto::Error::NO_ERRORS == return_value))
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	3304      	adds	r3, #4
 8001546:	4618      	mov	r0, r3
 8001548:	f000 fcbe 	bl	8001ec8 <_ZNK13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE7EN7Command7ButtonsELNS_13WireFormatter8WireTypeE0EE3getEv>
 800154c:	4603      	mov	r3, r0
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d004      	beq.n	800155e <_ZNK7Command9serializeERN13EmbeddedProto20WriteBufferInterfaceE+0x2a>
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d101      	bne.n	800155e <_ZNK7Command9serializeERN13EmbeddedProto20WriteBufferInterfaceE+0x2a>
 800155a:	2301      	movs	r3, #1
 800155c:	e000      	b.n	8001560 <_ZNK7Command9serializeERN13EmbeddedProto20WriteBufferInterfaceE+0x2c>
 800155e:	2300      	movs	r3, #0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d007      	beq.n	8001574 <_ZNK7Command9serializeERN13EmbeddedProto20WriteBufferInterfaceE+0x40>
      {
        return_value = button_.serialize_with_id(static_cast<uint32_t>(FieldNumber::BUTTON), buffer, false);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	1d18      	adds	r0, r3, #4
 8001568:	2300      	movs	r3, #0
 800156a:	683a      	ldr	r2, [r7, #0]
 800156c:	2101      	movs	r1, #1
 800156e:	f000 fcd9 	bl	8001f24 <_ZNK13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE7EN7Command7ButtonsELNS_13WireFormatter8WireTypeE0EE17serialize_with_idEmRNS_20WriteBufferInterfaceEb>
 8001572:	60f8      	str	r0, [r7, #12]
      }

      if((0U != value_.get()) && (::EmbeddedProto::Error::NO_ERRORS == return_value))
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3308      	adds	r3, #8
 8001578:	4618      	mov	r0, r3
 800157a:	f000 fcc8 	bl	8001f0e <_ZNK13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE2EmLNS_13WireFormatter8WireTypeE0EE3getEv>
 800157e:	4603      	mov	r3, r0
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d004      	beq.n	8001590 <_ZNK7Command9serializeERN13EmbeddedProto20WriteBufferInterfaceE+0x5c>
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d101      	bne.n	8001590 <_ZNK7Command9serializeERN13EmbeddedProto20WriteBufferInterfaceE+0x5c>
 800158c:	2301      	movs	r3, #1
 800158e:	e000      	b.n	8001592 <_ZNK7Command9serializeERN13EmbeddedProto20WriteBufferInterfaceE+0x5e>
 8001590:	2300      	movs	r3, #0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d008      	beq.n	80015a8 <_ZNK7Command9serializeERN13EmbeddedProto20WriteBufferInterfaceE+0x74>
      {
        return_value = value_.serialize_with_id(static_cast<uint32_t>(FieldNumber::VALUE), buffer, false);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f103 0008 	add.w	r0, r3, #8
 800159c:	2300      	movs	r3, #0
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	2102      	movs	r1, #2
 80015a2:	f000 fcdd 	bl	8001f60 <_ZNK13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE2EmLNS_13WireFormatter8WireTypeE0EE17serialize_with_idEmRNS_20WriteBufferInterfaceEb>
 80015a6:	60f8      	str	r0, [r7, #12]
      }

      return return_value;
 80015a8:	68fb      	ldr	r3, [r7, #12]
    };
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <_ZN7Command11deserializeERN13EmbeddedProto19ReadBufferInterfaceE>:

    ::EmbeddedProto::Error deserialize(::EmbeddedProto::ReadBufferInterface& buffer) override
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b088      	sub	sp, #32
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	6039      	str	r1, [r7, #0]
    {
      ::EmbeddedProto::Error return_value = ::EmbeddedProto::Error::NO_ERRORS;
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]
      ::EmbeddedProto::WireFormatter::WireType wire_type = ::EmbeddedProto::WireFormatter::WireType::VARINT;
 80015c0:	2300      	movs	r3, #0
 80015c2:	613b      	str	r3, [r7, #16]
      uint32_t id_number = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60fb      	str	r3, [r7, #12]
      FieldNumber id_tag = FieldNumber::NOT_SET;
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]

      ::EmbeddedProto::Error tag_value = ::EmbeddedProto::WireFormatter::DeserializeTag(buffer, wire_type, id_number);
 80015cc:	f107 020c 	add.w	r2, r7, #12
 80015d0:	f107 0310 	add.w	r3, r7, #16
 80015d4:	4619      	mov	r1, r3
 80015d6:	6838      	ldr	r0, [r7, #0]
 80015d8:	f7ff fed6 	bl	8001388 <_ZN13EmbeddedProto13WireFormatter14DeserializeTagERNS_19ReadBufferInterfaceERNS0_8WireTypeERm>
 80015dc:	61b8      	str	r0, [r7, #24]
      while((::EmbeddedProto::Error::NO_ERRORS == return_value) && (::EmbeddedProto::Error::NO_ERRORS == tag_value))
 80015de:	e039      	b.n	8001654 <_ZN7Command11deserializeERN13EmbeddedProto19ReadBufferInterfaceE+0xa2>
      {
        id_tag = static_cast<FieldNumber>(id_number);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	617b      	str	r3, [r7, #20]
        switch(id_tag)
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d012      	beq.n	8001610 <_ZN7Command11deserializeERN13EmbeddedProto19ReadBufferInterfaceE+0x5e>
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d81c      	bhi.n	800162a <_ZN7Command11deserializeERN13EmbeddedProto19ReadBufferInterfaceE+0x78>
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d016      	beq.n	8001624 <_ZN7Command11deserializeERN13EmbeddedProto19ReadBufferInterfaceE+0x72>
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d116      	bne.n	800162a <_ZN7Command11deserializeERN13EmbeddedProto19ReadBufferInterfaceE+0x78>
        {
          case FieldNumber::BUTTON:
            return_value = button_.deserialize_check_type(buffer, wire_type);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3304      	adds	r3, #4
 8001600:	f107 0210 	add.w	r2, r7, #16
 8001604:	6839      	ldr	r1, [r7, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f000 fcc8 	bl	8001f9c <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE7EN7Command7ButtonsELNS_13WireFormatter8WireTypeE0EE22deserialize_check_typeERNS_19ReadBufferInterfaceERKS6_>
 800160c:	61f8      	str	r0, [r7, #28]
            break;
 800160e:	e015      	b.n	800163c <_ZN7Command11deserializeERN13EmbeddedProto19ReadBufferInterfaceE+0x8a>

          case FieldNumber::VALUE:
            return_value = value_.deserialize_check_type(buffer, wire_type);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3308      	adds	r3, #8
 8001614:	f107 0210 	add.w	r2, r7, #16
 8001618:	6839      	ldr	r1, [r7, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f000 fcd9 	bl	8001fd2 <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE2EmLNS_13WireFormatter8WireTypeE0EE22deserialize_check_typeERNS_19ReadBufferInterfaceERKS4_>
 8001620:	61f8      	str	r0, [r7, #28]
            break;
 8001622:	e00b      	b.n	800163c <_ZN7Command11deserializeERN13EmbeddedProto19ReadBufferInterfaceE+0x8a>

          case FieldNumber::NOT_SET:
            return_value = ::EmbeddedProto::Error::INVALID_FIELD_ID;
 8001624:	2305      	movs	r3, #5
 8001626:	61fb      	str	r3, [r7, #28]
            break;
 8001628:	e008      	b.n	800163c <_ZN7Command11deserializeERN13EmbeddedProto19ReadBufferInterfaceE+0x8a>

          default:
            return_value = skip_unknown_field(buffer, wire_type);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f107 0210 	add.w	r2, r7, #16
 8001630:	6839      	ldr	r1, [r7, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff f972 	bl	800091c <_ZNK13EmbeddedProto16MessageInterface18skip_unknown_fieldERNS_19ReadBufferInterfaceERKNS_13WireFormatter8WireTypeE>
 8001638:	61f8      	str	r0, [r7, #28]
            break;
 800163a:	bf00      	nop
        }

        if(::EmbeddedProto::Error::NO_ERRORS == return_value)
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d108      	bne.n	8001654 <_ZN7Command11deserializeERN13EmbeddedProto19ReadBufferInterfaceE+0xa2>
        {
          // Read the next tag.
          tag_value = ::EmbeddedProto::WireFormatter::DeserializeTag(buffer, wire_type, id_number);
 8001642:	f107 020c 	add.w	r2, r7, #12
 8001646:	f107 0310 	add.w	r3, r7, #16
 800164a:	4619      	mov	r1, r3
 800164c:	6838      	ldr	r0, [r7, #0]
 800164e:	f7ff fe9b 	bl	8001388 <_ZN13EmbeddedProto13WireFormatter14DeserializeTagERNS_19ReadBufferInterfaceERNS0_8WireTypeERm>
 8001652:	61b8      	str	r0, [r7, #24]
      while((::EmbeddedProto::Error::NO_ERRORS == return_value) && (::EmbeddedProto::Error::NO_ERRORS == tag_value))
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d102      	bne.n	8001660 <_ZN7Command11deserializeERN13EmbeddedProto19ReadBufferInterfaceE+0xae>
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0bf      	beq.n	80015e0 <_ZN7Command11deserializeERN13EmbeddedProto19ReadBufferInterfaceE+0x2e>
        }
      }

      // When an error was detect while reading the tag but no other errors where found, set it in the return value.
      if((::EmbeddedProto::Error::NO_ERRORS == return_value)
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d107      	bne.n	8001676 <_ZN7Command11deserializeERN13EmbeddedProto19ReadBufferInterfaceE+0xc4>
         && (::EmbeddedProto::Error::NO_ERRORS != tag_value)
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d004      	beq.n	8001676 <_ZN7Command11deserializeERN13EmbeddedProto19ReadBufferInterfaceE+0xc4>
         && (::EmbeddedProto::Error::END_OF_BUFFER != tag_value)) // The end of the buffer is not an array in this case.
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d001      	beq.n	8001676 <_ZN7Command11deserializeERN13EmbeddedProto19ReadBufferInterfaceE+0xc4>
      {
        return_value = tag_value;
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	61fb      	str	r3, [r7, #28]
      }

      return return_value;
 8001676:	69fb      	ldr	r3, [r7, #28]
    };
 8001678:	4618      	mov	r0, r3
 800167a:	3720      	adds	r7, #32
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <_ZN7Command5clearEv>:

    void clear() override
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
    {
      clear_button();
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff ff2b 	bl	80014e4 <_ZN7Command12clear_buttonEv>
      clear_value();
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff ff43 	bl	800151a <_ZN7Command11clear_valueEv>

    }
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <_ZN5Reply15clear_LED_stateEv>:
      set_LED_state(rhs.get_LED_state());
      return *this;
    }

    static constexpr char const* LED_STATE_NAME = "LED_state";
    inline void clear_LED_state() { LED_state_.clear(); }
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3304      	adds	r3, #4
 80016a8:	4618      	mov	r0, r3
 80016aa:	f000 fcbd 	bl	8002028 <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE6EbLNS_13WireFormatter8WireTypeE0EE5clearEv>
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <_ZN5Reply13set_LED_stateEOKb>:
    inline void set_LED_state(const bool& value) { LED_state_ = value; }
    inline void set_LED_state(const bool&& value) { LED_state_ = value; }
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
 80016be:	6039      	str	r1, [r7, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3304      	adds	r3, #4
 80016c4:	6839      	ldr	r1, [r7, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 fcbb 	bl	8002042 <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE6EbLNS_13WireFormatter8WireTypeE0EEaSERKb>
 80016cc:	bf00      	nop
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <_ZNK5Reply9serializeERN13EmbeddedProto20WriteBufferInterfaceE>:
    inline bool& mutable_LED_state() { return LED_state_.get(); }
    inline const bool& get_LED_state() const { return LED_state_.get(); }
    inline bool LED_state() const { return LED_state_.get(); }


    ::EmbeddedProto::Error serialize(::EmbeddedProto::WriteBufferInterface& buffer) const override
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
    {
      ::EmbeddedProto::Error return_value = ::EmbeddedProto::Error::NO_ERRORS;
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]

      if((false != LED_state_.get()) && (::EmbeddedProto::Error::NO_ERRORS == return_value))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3304      	adds	r3, #4
 80016e6:	4618      	mov	r0, r3
 80016e8:	f000 fcc6 	bl	8002078 <_ZNK13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE6EbLNS_13WireFormatter8WireTypeE0EE3getEv>
 80016ec:	4603      	mov	r3, r0
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d004      	beq.n	80016fe <_ZNK5Reply9serializeERN13EmbeddedProto20WriteBufferInterfaceE+0x2a>
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <_ZNK5Reply9serializeERN13EmbeddedProto20WriteBufferInterfaceE+0x2a>
 80016fa:	2301      	movs	r3, #1
 80016fc:	e000      	b.n	8001700 <_ZNK5Reply9serializeERN13EmbeddedProto20WriteBufferInterfaceE+0x2c>
 80016fe:	2300      	movs	r3, #0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d007      	beq.n	8001714 <_ZNK5Reply9serializeERN13EmbeddedProto20WriteBufferInterfaceE+0x40>
      {
        return_value = LED_state_.serialize_with_id(static_cast<uint32_t>(FieldNumber::LED_STATE), buffer, false);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	1d18      	adds	r0, r3, #4
 8001708:	2300      	movs	r3, #0
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	2101      	movs	r1, #1
 800170e:	f000 fcbe 	bl	800208e <_ZNK13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE6EbLNS_13WireFormatter8WireTypeE0EE17serialize_with_idEmRNS_20WriteBufferInterfaceEb>
 8001712:	60f8      	str	r0, [r7, #12]
      }

      return return_value;
 8001714:	68fb      	ldr	r3, [r7, #12]
    };
 8001716:	4618      	mov	r0, r3
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <_ZN5Reply11deserializeERN13EmbeddedProto19ReadBufferInterfaceE>:

    ::EmbeddedProto::Error deserialize(::EmbeddedProto::ReadBufferInterface& buffer) override
 800171e:	b580      	push	{r7, lr}
 8001720:	b088      	sub	sp, #32
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
 8001726:	6039      	str	r1, [r7, #0]
    {
      ::EmbeddedProto::Error return_value = ::EmbeddedProto::Error::NO_ERRORS;
 8001728:	2300      	movs	r3, #0
 800172a:	61fb      	str	r3, [r7, #28]
      ::EmbeddedProto::WireFormatter::WireType wire_type = ::EmbeddedProto::WireFormatter::WireType::VARINT;
 800172c:	2300      	movs	r3, #0
 800172e:	613b      	str	r3, [r7, #16]
      uint32_t id_number = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	60fb      	str	r3, [r7, #12]
      FieldNumber id_tag = FieldNumber::NOT_SET;
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]

      ::EmbeddedProto::Error tag_value = ::EmbeddedProto::WireFormatter::DeserializeTag(buffer, wire_type, id_number);
 8001738:	f107 020c 	add.w	r2, r7, #12
 800173c:	f107 0310 	add.w	r3, r7, #16
 8001740:	4619      	mov	r1, r3
 8001742:	6838      	ldr	r0, [r7, #0]
 8001744:	f7ff fe20 	bl	8001388 <_ZN13EmbeddedProto13WireFormatter14DeserializeTagERNS_19ReadBufferInterfaceERNS0_8WireTypeERm>
 8001748:	61b8      	str	r0, [r7, #24]
      while((::EmbeddedProto::Error::NO_ERRORS == return_value) && (::EmbeddedProto::Error::NO_ERRORS == tag_value))
 800174a:	e029      	b.n	80017a0 <_ZN5Reply11deserializeERN13EmbeddedProto19ReadBufferInterfaceE+0x82>
      {
        id_tag = static_cast<FieldNumber>(id_number);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	617b      	str	r3, [r7, #20]
        switch(id_tag)
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00c      	beq.n	8001770 <_ZN5Reply11deserializeERN13EmbeddedProto19ReadBufferInterfaceE+0x52>
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d10c      	bne.n	8001776 <_ZN5Reply11deserializeERN13EmbeddedProto19ReadBufferInterfaceE+0x58>
        {
          case FieldNumber::LED_STATE:
            return_value = LED_state_.deserialize_check_type(buffer, wire_type);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3304      	adds	r3, #4
 8001760:	f107 0210 	add.w	r2, r7, #16
 8001764:	6839      	ldr	r1, [r7, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f000 fcaf 	bl	80020ca <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE6EbLNS_13WireFormatter8WireTypeE0EE22deserialize_check_typeERNS_19ReadBufferInterfaceERKS4_>
 800176c:	61f8      	str	r0, [r7, #28]
            break;
 800176e:	e00b      	b.n	8001788 <_ZN5Reply11deserializeERN13EmbeddedProto19ReadBufferInterfaceE+0x6a>

          case FieldNumber::NOT_SET:
            return_value = ::EmbeddedProto::Error::INVALID_FIELD_ID;
 8001770:	2305      	movs	r3, #5
 8001772:	61fb      	str	r3, [r7, #28]
            break;
 8001774:	e008      	b.n	8001788 <_ZN5Reply11deserializeERN13EmbeddedProto19ReadBufferInterfaceE+0x6a>

          default:
            return_value = skip_unknown_field(buffer, wire_type);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f107 0210 	add.w	r2, r7, #16
 800177c:	6839      	ldr	r1, [r7, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff f8cc 	bl	800091c <_ZNK13EmbeddedProto16MessageInterface18skip_unknown_fieldERNS_19ReadBufferInterfaceERKNS_13WireFormatter8WireTypeE>
 8001784:	61f8      	str	r0, [r7, #28]
            break;
 8001786:	bf00      	nop
        }

        if(::EmbeddedProto::Error::NO_ERRORS == return_value)
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d108      	bne.n	80017a0 <_ZN5Reply11deserializeERN13EmbeddedProto19ReadBufferInterfaceE+0x82>
        {
          // Read the next tag.
          tag_value = ::EmbeddedProto::WireFormatter::DeserializeTag(buffer, wire_type, id_number);
 800178e:	f107 020c 	add.w	r2, r7, #12
 8001792:	f107 0310 	add.w	r3, r7, #16
 8001796:	4619      	mov	r1, r3
 8001798:	6838      	ldr	r0, [r7, #0]
 800179a:	f7ff fdf5 	bl	8001388 <_ZN13EmbeddedProto13WireFormatter14DeserializeTagERNS_19ReadBufferInterfaceERNS0_8WireTypeERm>
 800179e:	61b8      	str	r0, [r7, #24]
      while((::EmbeddedProto::Error::NO_ERRORS == return_value) && (::EmbeddedProto::Error::NO_ERRORS == tag_value))
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d102      	bne.n	80017ac <_ZN5Reply11deserializeERN13EmbeddedProto19ReadBufferInterfaceE+0x8e>
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d0cf      	beq.n	800174c <_ZN5Reply11deserializeERN13EmbeddedProto19ReadBufferInterfaceE+0x2e>
        }
      }

      // When an error was detect while reading the tag but no other errors where found, set it in the return value.
      if((::EmbeddedProto::Error::NO_ERRORS == return_value)
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d107      	bne.n	80017c2 <_ZN5Reply11deserializeERN13EmbeddedProto19ReadBufferInterfaceE+0xa4>
         && (::EmbeddedProto::Error::NO_ERRORS != tag_value)
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d004      	beq.n	80017c2 <_ZN5Reply11deserializeERN13EmbeddedProto19ReadBufferInterfaceE+0xa4>
         && (::EmbeddedProto::Error::END_OF_BUFFER != tag_value)) // The end of the buffer is not an array in this case.
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d001      	beq.n	80017c2 <_ZN5Reply11deserializeERN13EmbeddedProto19ReadBufferInterfaceE+0xa4>
      {
        return_value = tag_value;
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	61fb      	str	r3, [r7, #28]
      }

      return return_value;
 80017c2:	69fb      	ldr	r3, [r7, #28]
    };
 80017c4:	4618      	mov	r0, r3
 80017c6:	3720      	adds	r7, #32
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <_ZN5Reply5clearEv>:

    void clear() override
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
    {
      clear_LED_state();
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff ff61 	bl	800169c <_ZN5Reply15clear_LED_stateEv>

    }
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
	...

080017e4 <_ZN13EmbeddedProto20WriteBufferInterfaceC1Ev>:
      WriteBufferInterface() = default;
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	4a04      	ldr	r2, [pc, #16]	; (8001800 <_ZN13EmbeddedProto20WriteBufferInterfaceC1Ev+0x1c>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4618      	mov	r0, r3
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	080084c8 	.word	0x080084c8

08001804 <_ZN15UartWriteBufferC1Ev>:
{
    //! Store a maximum of MAX_SIZE bytes in the buffer
    static constexpr uint32_t MAX_SIZE = 50;

  public:
    UartWriteBuffer() = default;
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff ffe8 	bl	80017e4 <_ZN13EmbeddedProto20WriteBufferInterfaceC1Ev>
 8001814:	4a03      	ldr	r2, [pc, #12]	; (8001824 <_ZN15UartWriteBufferC1Ev+0x20>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4618      	mov	r0, r3
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	0800858c 	.word	0x0800858c

08001828 <_ZN7CommandC1Ev>:
    Command() = default;
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fe22 	bl	800147c <_ZN13EmbeddedProto16MessageInterfaceC1Ev>
 8001838:	4a0d      	ldr	r2, [pc, #52]	; (8001870 <_ZN7CommandC1Ev+0x48>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	3304      	adds	r3, #4
      EmbeddedProto::enumeration<Buttons> button_ = static_cast<Buttons>(0);
 8001842:	2200      	movs	r2, #0
    Command() = default;
 8001844:	60ba      	str	r2, [r7, #8]
 8001846:	f107 0208 	add.w	r2, r7, #8
 800184a:	4611      	mov	r1, r2
 800184c:	4618      	mov	r0, r3
 800184e:	f000 fb0e 	bl	8001e6e <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE7EN7Command7ButtonsELNS_13WireFormatter8WireTypeE0EEC1EOKS4_>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3308      	adds	r3, #8
      EmbeddedProto::uint32 value_ = 0U;
 8001856:	2200      	movs	r2, #0
    Command() = default;
 8001858:	60fa      	str	r2, [r7, #12]
 800185a:	f107 020c 	add.w	r2, r7, #12
 800185e:	4611      	mov	r1, r2
 8001860:	4618      	mov	r0, r3
 8001862:	f000 fb14 	bl	8001e8e <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE2EmLNS_13WireFormatter8WireTypeE0EEC1EOKm>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4618      	mov	r0, r3
 800186a:	3710      	adds	r7, #16
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	080085d8 	.word	0x080085d8

08001874 <_ZN5ReplyC1Ev>:
    Reply() = default;
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fdfc 	bl	800147c <_ZN13EmbeddedProto16MessageInterfaceC1Ev>
 8001884:	4a08      	ldr	r2, [pc, #32]	; (80018a8 <_ZN5ReplyC1Ev+0x34>)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3304      	adds	r3, #4
 800188e:	2200      	movs	r2, #0
 8001890:	73fa      	strb	r2, [r7, #15]
 8001892:	f107 020f 	add.w	r2, r7, #15
 8001896:	4611      	mov	r1, r2
 8001898:	4618      	mov	r0, r3
 800189a:	f000 fbb5 	bl	8002008 <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE6EbLNS_13WireFormatter8WireTypeE0EEC1EOKb>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4618      	mov	r0, r3
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	080085b4 	.word	0x080085b4

080018ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018ac:	b590      	push	{r4, r7, lr}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018b2:	f000 fefd 	bl	80026b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018b6:	f000 f879 	bl	80019ac <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018ba:	f000 f963 	bl	8001b84 <_ZL12MX_GPIO_Initv>
  MX_USART3_UART_Init();
 80018be:	f000 f8f9 	bl	8001ab4 <_ZL19MX_USART3_UART_Initv>
  MX_USB_OTG_HS_USB_Init();
 80018c2:	f000 f957 	bl	8001b74 <_ZL22MX_USB_OTG_HS_USB_Initv>
  while (1)
  {
	    /* USER CODE END WHILE */

	    // Read the first byte from uart. The first byte indicates how many bytes will follow.
	    uint8_t n_bytes = 0;
 80018c6:	2300      	movs	r3, #0
 80018c8:	70fb      	strb	r3, [r7, #3]
	    receive_status = HAL_UART_Receive(&huart3, &n_bytes, 1, 100);
 80018ca:	1cf9      	adds	r1, r7, #3
 80018cc:	2364      	movs	r3, #100	; 0x64
 80018ce:	2201      	movs	r2, #1
 80018d0:	4830      	ldr	r0, [pc, #192]	; (8001994 <main+0xe8>)
 80018d2:	f004 feab 	bl	800662c <HAL_UART_Receive>
 80018d6:	4603      	mov	r3, r0
 80018d8:	461a      	mov	r2, r3
 80018da:	4b2f      	ldr	r3, [pc, #188]	; (8001998 <main+0xec>)
 80018dc:	701a      	strb	r2, [r3, #0]
	    if(HAL_OK == receive_status)
 80018de:	4b2e      	ldr	r3, [pc, #184]	; (8001998 <main+0xec>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1ef      	bne.n	80018c6 <main+0x1a>
	    {
	      // Read the actual data to be deserialized.
	      uint8_t byte;
	      for(uint8_t i = 0; (i < n_bytes) && (HAL_OK == receive_status); ++i)
 80018e6:	2300      	movs	r3, #0
 80018e8:	73fb      	strb	r3, [r7, #15]
 80018ea:	e011      	b.n	8001910 <main+0x64>
	      {
	        receive_status = HAL_UART_Receive(&huart3, &byte, 1, 100);
 80018ec:	1cb9      	adds	r1, r7, #2
 80018ee:	2364      	movs	r3, #100	; 0x64
 80018f0:	2201      	movs	r2, #1
 80018f2:	4828      	ldr	r0, [pc, #160]	; (8001994 <main+0xe8>)
 80018f4:	f004 fe9a 	bl	800662c <HAL_UART_Receive>
 80018f8:	4603      	mov	r3, r0
 80018fa:	461a      	mov	r2, r3
 80018fc:	4b26      	ldr	r3, [pc, #152]	; (8001998 <main+0xec>)
 80018fe:	701a      	strb	r2, [r3, #0]
	        read_buffer.push(byte);
 8001900:	1cbb      	adds	r3, r7, #2
 8001902:	4619      	mov	r1, r3
 8001904:	4825      	ldr	r0, [pc, #148]	; (800199c <main+0xf0>)
 8001906:	f7ff fc50 	bl	80011aa <_ZN14UartReadBuffer4pushERh>
	      for(uint8_t i = 0; (i < n_bytes) && (HAL_OK == receive_status); ++i)
 800190a:	7bfb      	ldrb	r3, [r7, #15]
 800190c:	3301      	adds	r3, #1
 800190e:	73fb      	strb	r3, [r7, #15]
 8001910:	78fb      	ldrb	r3, [r7, #3]
 8001912:	7bfa      	ldrb	r2, [r7, #15]
 8001914:	429a      	cmp	r2, r3
 8001916:	d203      	bcs.n	8001920 <main+0x74>
 8001918:	4b1f      	ldr	r3, [pc, #124]	; (8001998 <main+0xec>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d0e5      	beq.n	80018ec <main+0x40>
	      }

	      if(HAL_OK == receive_status)
 8001920:	4b1d      	ldr	r3, [pc, #116]	; (8001998 <main+0xec>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1ce      	bne.n	80018c6 <main+0x1a>
	      {
	        // Deserialize the data received.
	        auto deserialize_status = received_command.deserialize(read_buffer);
 8001928:	491c      	ldr	r1, [pc, #112]	; (800199c <main+0xf0>)
 800192a:	481d      	ldr	r0, [pc, #116]	; (80019a0 <main+0xf4>)
 800192c:	f7ff fe41 	bl	80015b2 <_ZN7Command11deserializeERN13EmbeddedProto19ReadBufferInterfaceE>
 8001930:	60b8      	str	r0, [r7, #8]
	        if(::EmbeddedProto::Error::NO_ERRORS == deserialize_status) {
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d125      	bne.n	8001984 <main+0xd8>
	          // Process the command.
	          process_command(received_command, outgoing_reply);
 8001938:	491a      	ldr	r1, [pc, #104]	; (80019a4 <main+0xf8>)
 800193a:	4819      	ldr	r0, [pc, #100]	; (80019a0 <main+0xf4>)
 800193c:	f000 fa3c 	bl	8001db8 <_Z15process_commandRK7CommandR5Reply>
	          // Serialize the data.
	          auto serialization_status = outgoing_reply.serialize(write_buffer);
 8001940:	4919      	ldr	r1, [pc, #100]	; (80019a8 <main+0xfc>)
 8001942:	4818      	ldr	r0, [pc, #96]	; (80019a4 <main+0xf8>)
 8001944:	f7ff fec6 	bl	80016d4 <_ZNK5Reply9serializeERN13EmbeddedProto20WriteBufferInterfaceE>
 8001948:	6078      	str	r0, [r7, #4]
	          if(::EmbeddedProto::Error::NO_ERRORS == serialization_status)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d119      	bne.n	8001984 <main+0xd8>
	          {
	            // first transmit the number of bytes in the message.
	            n_bytes = write_buffer.get_size();
 8001950:	4815      	ldr	r0, [pc, #84]	; (80019a8 <main+0xfc>)
 8001952:	f7ff fc7c 	bl	800124e <_ZNK15UartWriteBuffer8get_sizeEv>
 8001956:	4603      	mov	r3, r0
 8001958:	b2db      	uxtb	r3, r3
 800195a:	70fb      	strb	r3, [r7, #3]
	            HAL_UART_Transmit(&huart3, &n_bytes, 1, 50);
 800195c:	1cf9      	adds	r1, r7, #3
 800195e:	2332      	movs	r3, #50	; 0x32
 8001960:	2201      	movs	r2, #1
 8001962:	480c      	ldr	r0, [pc, #48]	; (8001994 <main+0xe8>)
 8001964:	f004 fdd4 	bl	8006510 <HAL_UART_Transmit>
	            // Now transmit the actual data.
	            HAL_UART_Transmit(&huart3, write_buffer.get_data(), write_buffer.get_size(), 50);
 8001968:	480f      	ldr	r0, [pc, #60]	; (80019a8 <main+0xfc>)
 800196a:	f7ff fcde 	bl	800132a <_ZN15UartWriteBuffer8get_dataEv>
 800196e:	4604      	mov	r4, r0
 8001970:	480d      	ldr	r0, [pc, #52]	; (80019a8 <main+0xfc>)
 8001972:	f7ff fc6c 	bl	800124e <_ZNK15UartWriteBuffer8get_sizeEv>
 8001976:	4603      	mov	r3, r0
 8001978:	b29a      	uxth	r2, r3
 800197a:	2332      	movs	r3, #50	; 0x32
 800197c:	4621      	mov	r1, r4
 800197e:	4805      	ldr	r0, [pc, #20]	; (8001994 <main+0xe8>)
 8001980:	f004 fdc6 	bl	8006510 <HAL_UART_Transmit>
	          }
	        }
	        // Clear the buffers after we are done.
	        read_buffer.clear();
 8001984:	4805      	ldr	r0, [pc, #20]	; (800199c <main+0xf0>)
 8001986:	f7ff fc00 	bl	800118a <_ZN14UartReadBuffer5clearEv>
	        write_buffer.clear();
 800198a:	4807      	ldr	r0, [pc, #28]	; (80019a8 <main+0xfc>)
 800198c:	f7ff fc52 	bl	8001234 <_ZN15UartWriteBuffer5clearEv>

	      }
	    }

	    /* USER CODE BEGIN 3 */
  }
 8001990:	e799      	b.n	80018c6 <main+0x1a>
 8001992:	bf00      	nop
 8001994:	2400007c 	.word	0x2400007c
 8001998:	2400018c 	.word	0x2400018c
 800199c:	24000110 	.word	0x24000110
 80019a0:	24000190 	.word	0x24000190
 80019a4:	2400019c 	.word	0x2400019c
 80019a8:	24000150 	.word	0x24000150

080019ac <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b09c      	sub	sp, #112	; 0x70
 80019b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b6:	224c      	movs	r2, #76	; 0x4c
 80019b8:	2100      	movs	r1, #0
 80019ba:	4618      	mov	r0, r3
 80019bc:	f006 fcd8 	bl	8008370 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	2220      	movs	r2, #32
 80019c4:	2100      	movs	r1, #0
 80019c6:	4618      	mov	r0, r3
 80019c8:	f006 fcd2 	bl	8008370 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80019cc:	4b37      	ldr	r3, [pc, #220]	; (8001aac <_Z18SystemClock_Configv+0x100>)
 80019ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80019d6:	2004      	movs	r0, #4
 80019d8:	f001 ff52 	bl	8003880 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80019dc:	2300      	movs	r3, #0
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	4b33      	ldr	r3, [pc, #204]	; (8001ab0 <_Z18SystemClock_Configv+0x104>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	4a32      	ldr	r2, [pc, #200]	; (8001ab0 <_Z18SystemClock_Configv+0x104>)
 80019e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019ea:	6193      	str	r3, [r2, #24]
 80019ec:	4b30      	ldr	r3, [pc, #192]	; (8001ab0 <_Z18SystemClock_Configv+0x104>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019f4:	603b      	str	r3, [r7, #0]
 80019f6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80019f8:	bf00      	nop
 80019fa:	4b2d      	ldr	r3, [pc, #180]	; (8001ab0 <_Z18SystemClock_Configv+0x104>)
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a06:	bf14      	ite	ne
 8001a08:	2301      	movne	r3, #1
 8001a0a:	2300      	moveq	r3, #0
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f3      	bne.n	80019fa <_Z18SystemClock_Configv+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001a12:	2321      	movs	r3, #33	; 0x21
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001a16:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a20:	2302      	movs	r3, #2
 8001a22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a24:	2302      	movs	r3, #2
 8001a26:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8001a2c:	2318      	movs	r3, #24
 8001a2e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001a30:	2302      	movs	r3, #2
 8001a32:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a34:	2304      	movs	r3, #4
 8001a36:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001a3c:	230c      	movs	r3, #12
 8001a3e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f001 ff71 	bl	8003934 <HAL_RCC_OscConfig>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	bf14      	ite	ne
 8001a58:	2301      	movne	r3, #1
 8001a5a:	2300      	moveq	r3, #0
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 8001a62:	f000 f9ff 	bl	8001e64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a66:	233f      	movs	r3, #63	; 0x3f
 8001a68:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001a82:	2300      	movs	r3, #0
 8001a84:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a86:	1d3b      	adds	r3, r7, #4
 8001a88:	2102      	movs	r1, #2
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f002 fb84 	bl	8004198 <HAL_RCC_ClockConfig>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	bf14      	ite	ne
 8001a96:	2301      	movne	r3, #1
 8001a98:	2300      	moveq	r3, #0
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <_Z18SystemClock_Configv+0xf8>
  {
    Error_Handler();
 8001aa0:	f000 f9e0 	bl	8001e64 <Error_Handler>
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	3770      	adds	r7, #112	; 0x70
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	58024400 	.word	0x58024400
 8001ab0:	58024800 	.word	0x58024800

08001ab4 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ab8:	4b2c      	ldr	r3, [pc, #176]	; (8001b6c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001aba:	4a2d      	ldr	r2, [pc, #180]	; (8001b70 <_ZL19MX_USART3_UART_Initv+0xbc>)
 8001abc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001abe:	4b2b      	ldr	r3, [pc, #172]	; (8001b6c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001ac0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ac4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ac6:	4b29      	ldr	r3, [pc, #164]	; (8001b6c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001acc:	4b27      	ldr	r3, [pc, #156]	; (8001b6c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ad2:	4b26      	ldr	r3, [pc, #152]	; (8001b6c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ad8:	4b24      	ldr	r3, [pc, #144]	; (8001b6c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001ada:	220c      	movs	r2, #12
 8001adc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ade:	4b23      	ldr	r3, [pc, #140]	; (8001b6c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae4:	4b21      	ldr	r3, [pc, #132]	; (8001b6c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aea:	4b20      	ldr	r3, [pc, #128]	; (8001b6c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001af0:	4b1e      	ldr	r3, [pc, #120]	; (8001b6c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001af6:	4b1d      	ldr	r3, [pc, #116]	; (8001b6c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001afc:	481b      	ldr	r0, [pc, #108]	; (8001b6c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001afe:	f004 fcb7 	bl	8006470 <HAL_UART_Init>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	bf14      	ite	ne
 8001b08:	2301      	movne	r3, #1
 8001b0a:	2300      	moveq	r3, #0
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 8001b12:	f000 f9a7 	bl	8001e64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b16:	2100      	movs	r1, #0
 8001b18:	4814      	ldr	r0, [pc, #80]	; (8001b6c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001b1a:	f006 fb47 	bl	80081ac <HAL_UARTEx_SetTxFifoThreshold>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	bf14      	ite	ne
 8001b24:	2301      	movne	r3, #1
 8001b26:	2300      	moveq	r3, #0
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 8001b2e:	f000 f999 	bl	8001e64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b32:	2100      	movs	r1, #0
 8001b34:	480d      	ldr	r0, [pc, #52]	; (8001b6c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001b36:	f006 fb77 	bl	8008228 <HAL_UARTEx_SetRxFifoThreshold>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	bf14      	ite	ne
 8001b40:	2301      	movne	r3, #1
 8001b42:	2300      	moveq	r3, #0
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 8001b4a:	f000 f98b 	bl	8001e64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001b4e:	4807      	ldr	r0, [pc, #28]	; (8001b6c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001b50:	f006 faf3 	bl	800813a <HAL_UARTEx_DisableFifoMode>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	bf14      	ite	ne
 8001b5a:	2301      	movne	r3, #1
 8001b5c:	2300      	moveq	r3, #0
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 8001b64:	f000 f97e 	bl	8001e64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b68:	bf00      	nop
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	2400007c 	.word	0x2400007c
 8001b70:	40004800 	.word	0x40004800

08001b74 <_ZL22MX_USB_OTG_HS_USB_Initv>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
	...

08001b84 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08e      	sub	sp, #56	; 0x38
 8001b88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]
 8001b96:	60da      	str	r2, [r3, #12]
 8001b98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b9a:	4b80      	ldr	r3, [pc, #512]	; (8001d9c <_ZL12MX_GPIO_Initv+0x218>)
 8001b9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001ba0:	4a7e      	ldr	r2, [pc, #504]	; (8001d9c <_ZL12MX_GPIO_Initv+0x218>)
 8001ba2:	f043 0304 	orr.w	r3, r3, #4
 8001ba6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001baa:	4b7c      	ldr	r3, [pc, #496]	; (8001d9c <_ZL12MX_GPIO_Initv+0x218>)
 8001bac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	623b      	str	r3, [r7, #32]
 8001bb6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bb8:	4b78      	ldr	r3, [pc, #480]	; (8001d9c <_ZL12MX_GPIO_Initv+0x218>)
 8001bba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001bbe:	4a77      	ldr	r2, [pc, #476]	; (8001d9c <_ZL12MX_GPIO_Initv+0x218>)
 8001bc0:	f043 0320 	orr.w	r3, r3, #32
 8001bc4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001bc8:	4b74      	ldr	r3, [pc, #464]	; (8001d9c <_ZL12MX_GPIO_Initv+0x218>)
 8001bca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001bce:	f003 0320 	and.w	r3, r3, #32
 8001bd2:	61fb      	str	r3, [r7, #28]
 8001bd4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bd6:	4b71      	ldr	r3, [pc, #452]	; (8001d9c <_ZL12MX_GPIO_Initv+0x218>)
 8001bd8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001bdc:	4a6f      	ldr	r2, [pc, #444]	; (8001d9c <_ZL12MX_GPIO_Initv+0x218>)
 8001bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001be6:	4b6d      	ldr	r3, [pc, #436]	; (8001d9c <_ZL12MX_GPIO_Initv+0x218>)
 8001be8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf0:	61bb      	str	r3, [r7, #24]
 8001bf2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf4:	4b69      	ldr	r3, [pc, #420]	; (8001d9c <_ZL12MX_GPIO_Initv+0x218>)
 8001bf6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001bfa:	4a68      	ldr	r2, [pc, #416]	; (8001d9c <_ZL12MX_GPIO_Initv+0x218>)
 8001bfc:	f043 0302 	orr.w	r3, r3, #2
 8001c00:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001c04:	4b65      	ldr	r3, [pc, #404]	; (8001d9c <_ZL12MX_GPIO_Initv+0x218>)
 8001c06:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c12:	4b62      	ldr	r3, [pc, #392]	; (8001d9c <_ZL12MX_GPIO_Initv+0x218>)
 8001c14:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001c18:	4a60      	ldr	r2, [pc, #384]	; (8001d9c <_ZL12MX_GPIO_Initv+0x218>)
 8001c1a:	f043 0308 	orr.w	r3, r3, #8
 8001c1e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001c22:	4b5e      	ldr	r3, [pc, #376]	; (8001d9c <_ZL12MX_GPIO_Initv+0x218>)
 8001c24:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001c28:	f003 0308 	and.w	r3, r3, #8
 8001c2c:	613b      	str	r3, [r7, #16]
 8001c2e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c30:	4b5a      	ldr	r3, [pc, #360]	; (8001d9c <_ZL12MX_GPIO_Initv+0x218>)
 8001c32:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001c36:	4a59      	ldr	r2, [pc, #356]	; (8001d9c <_ZL12MX_GPIO_Initv+0x218>)
 8001c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c3c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001c40:	4b56      	ldr	r3, [pc, #344]	; (8001d9c <_ZL12MX_GPIO_Initv+0x218>)
 8001c42:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4e:	4b53      	ldr	r3, [pc, #332]	; (8001d9c <_ZL12MX_GPIO_Initv+0x218>)
 8001c50:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001c54:	4a51      	ldr	r2, [pc, #324]	; (8001d9c <_ZL12MX_GPIO_Initv+0x218>)
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001c5e:	4b4f      	ldr	r3, [pc, #316]	; (8001d9c <_ZL12MX_GPIO_Initv+0x218>)
 8001c60:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	60bb      	str	r3, [r7, #8]
 8001c6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c6c:	4b4b      	ldr	r3, [pc, #300]	; (8001d9c <_ZL12MX_GPIO_Initv+0x218>)
 8001c6e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001c72:	4a4a      	ldr	r2, [pc, #296]	; (8001d9c <_ZL12MX_GPIO_Initv+0x218>)
 8001c74:	f043 0310 	orr.w	r3, r3, #16
 8001c78:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001c7c:	4b47      	ldr	r3, [pc, #284]	; (8001d9c <_ZL12MX_GPIO_Initv+0x218>)
 8001c7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001c82:	f003 0310 	and.w	r3, r3, #16
 8001c86:	607b      	str	r3, [r7, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c90:	4843      	ldr	r0, [pc, #268]	; (8001da0 <_ZL12MX_GPIO_Initv+0x21c>)
 8001c92:	f001 fddb 	bl	800384c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001c96:	2200      	movs	r2, #0
 8001c98:	f244 0101 	movw	r1, #16385	; 0x4001
 8001c9c:	4841      	ldr	r0, [pc, #260]	; (8001da4 <_ZL12MX_GPIO_Initv+0x220>)
 8001c9e:	f001 fdd5 	bl	800384c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2102      	movs	r1, #2
 8001ca6:	4840      	ldr	r0, [pc, #256]	; (8001da8 <_ZL12MX_GPIO_Initv+0x224>)
 8001ca8:	f001 fdd0 	bl	800384c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001cac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	483a      	ldr	r0, [pc, #232]	; (8001dac <_ZL12MX_GPIO_Initv+0x228>)
 8001cc2:	f001 fbfb 	bl	80034bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8001cc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4830      	ldr	r0, [pc, #192]	; (8001da0 <_ZL12MX_GPIO_Initv+0x21c>)
 8001ce0:	f001 fbec 	bl	80034bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001ce4:	f244 0301 	movw	r3, #16385	; 0x4001
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cea:	2301      	movs	r3, #1
 8001cec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4829      	ldr	r0, [pc, #164]	; (8001da4 <_ZL12MX_GPIO_Initv+0x220>)
 8001cfe:	f001 fbdd 	bl	80034bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001d02:	2380      	movs	r3, #128	; 0x80
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d06:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d14:	4619      	mov	r1, r3
 8001d16:	4826      	ldr	r0, [pc, #152]	; (8001db0 <_ZL12MX_GPIO_Initv+0x22c>)
 8001d18:	f001 fbd0 	bl	80034bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001d1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d22:	2300      	movs	r3, #0
 8001d24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4820      	ldr	r0, [pc, #128]	; (8001db4 <_ZL12MX_GPIO_Initv+0x230>)
 8001d32:	f001 fbc3 	bl	80034bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001d36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d44:	2300      	movs	r3, #0
 8001d46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001d48:	230a      	movs	r3, #10
 8001d4a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d50:	4619      	mov	r1, r3
 8001d52:	4818      	ldr	r0, [pc, #96]	; (8001db4 <_ZL12MX_GPIO_Initv+0x230>)
 8001d54:	f001 fbb2 	bl	80034bc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8001d58:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d66:	2300      	movs	r3, #0
 8001d68:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4810      	ldr	r0, [pc, #64]	; (8001db4 <_ZL12MX_GPIO_Initv+0x230>)
 8001d72:	f001 fba3 	bl	80034bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001d76:	2302      	movs	r3, #2
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d82:	2300      	movs	r3, #0
 8001d84:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4806      	ldr	r0, [pc, #24]	; (8001da8 <_ZL12MX_GPIO_Initv+0x224>)
 8001d8e:	f001 fb95 	bl	80034bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d92:	bf00      	nop
 8001d94:	3738      	adds	r7, #56	; 0x38
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	58024400 	.word	0x58024400
 8001da0:	58021400 	.word	0x58021400
 8001da4:	58020400 	.word	0x58020400
 8001da8:	58021000 	.word	0x58021000
 8001dac:	58020800 	.word	0x58020800
 8001db0:	58021800 	.word	0x58021800
 8001db4:	58020000 	.word	0x58020000

08001db8 <_Z15process_commandRK7CommandR5Reply>:
/*!
 * \param[in] command The received command.
 * \param[out] reply The reply to be send over uart.
 */
void process_command(const Command& command, Reply& reply)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  switch(command.get_button())
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff fb9b 	bl	80014fe <_ZNK7Command10get_buttonEv>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	d006      	beq.n	8001dde <_Z15process_commandRK7CommandR5Reply+0x26>
 8001dd0:	2b03      	cmp	r3, #3
 8001dd2:	d83c      	bhi.n	8001e4e <_Z15process_commandRK7CommandR5Reply+0x96>
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d006      	beq.n	8001de6 <_Z15process_commandRK7CommandR5Reply+0x2e>
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d01e      	beq.n	8001e1a <_Z15process_commandRK7CommandR5Reply+0x62>
    }


    default:
      // By default send back the current state.
      break;
 8001ddc:	e037      	b.n	8001e4e <_Z15process_commandRK7CommandR5Reply+0x96>
      reply.clear();
 8001dde:	6838      	ldr	r0, [r7, #0]
 8001de0:	f7ff fcf4 	bl	80017cc <_ZN5Reply5clearEv>
      break;
 8001de4:	e038      	b.n	8001e58 <_Z15process_commandRK7CommandR5Reply+0xa0>
    	if(HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin) != 1){
 8001de6:	2102      	movs	r1, #2
 8001de8:	481d      	ldr	r0, [pc, #116]	; (8001e60 <_Z15process_commandRK7CommandR5Reply+0xa8>)
 8001dea:	f001 fd17 	bl	800381c <HAL_GPIO_ReadPin>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	bf14      	ite	ne
 8001df4:	2301      	movne	r3, #1
 8001df6:	2300      	moveq	r3, #0
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d029      	beq.n	8001e52 <_Z15process_commandRK7CommandR5Reply+0x9a>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, (GPIO_PinState) 1);
 8001dfe:	2201      	movs	r2, #1
 8001e00:	2102      	movs	r1, #2
 8001e02:	4817      	ldr	r0, [pc, #92]	; (8001e60 <_Z15process_commandRK7CommandR5Reply+0xa8>)
 8001e04:	f001 fd22 	bl	800384c <HAL_GPIO_WritePin>
		  reply.set_LED_state(1);
 8001e08:	2301      	movs	r3, #1
 8001e0a:	73bb      	strb	r3, [r7, #14]
 8001e0c:	f107 030e 	add.w	r3, r7, #14
 8001e10:	4619      	mov	r1, r3
 8001e12:	6838      	ldr	r0, [r7, #0]
 8001e14:	f7ff fc4f 	bl	80016b6 <_ZN5Reply13set_LED_stateEOKb>
    	break;
 8001e18:	e01b      	b.n	8001e52 <_Z15process_commandRK7CommandR5Reply+0x9a>
    	if(HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin) != 0){
 8001e1a:	2102      	movs	r1, #2
 8001e1c:	4810      	ldr	r0, [pc, #64]	; (8001e60 <_Z15process_commandRK7CommandR5Reply+0xa8>)
 8001e1e:	f001 fcfd 	bl	800381c <HAL_GPIO_ReadPin>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	bf14      	ite	ne
 8001e28:	2301      	movne	r3, #1
 8001e2a:	2300      	moveq	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d011      	beq.n	8001e56 <_Z15process_commandRK7CommandR5Reply+0x9e>
    	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, (GPIO_PinState) 0);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2102      	movs	r1, #2
 8001e36:	480a      	ldr	r0, [pc, #40]	; (8001e60 <_Z15process_commandRK7CommandR5Reply+0xa8>)
 8001e38:	f001 fd08 	bl	800384c <HAL_GPIO_WritePin>
		  reply.set_LED_state(0);
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	73fb      	strb	r3, [r7, #15]
 8001e40:	f107 030f 	add.w	r3, r7, #15
 8001e44:	4619      	mov	r1, r3
 8001e46:	6838      	ldr	r0, [r7, #0]
 8001e48:	f7ff fc35 	bl	80016b6 <_ZN5Reply13set_LED_stateEOKb>
    	break;
 8001e4c:	e003      	b.n	8001e56 <_Z15process_commandRK7CommandR5Reply+0x9e>
      break;
 8001e4e:	bf00      	nop
 8001e50:	e002      	b.n	8001e58 <_Z15process_commandRK7CommandR5Reply+0xa0>
    	break;
 8001e52:	bf00      	nop
 8001e54:	e000      	b.n	8001e58 <_Z15process_commandRK7CommandR5Reply+0xa0>
    	break;
 8001e56:	bf00      	nop
  }

}
 8001e58:	bf00      	nop
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	58021000 	.word	0x58021000

08001e64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e68:	b672      	cpsid	i
}
 8001e6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e6c:	e7fe      	b.n	8001e6c <Error_Handler+0x8>

08001e6e <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE7EN7Command7ButtonsELNS_13WireFormatter8WireTypeE0EEC1EOKS4_>:
      using TYPE = VARIABLE_TYPE;
      using CLASS_TYPE = FieldTemplate<FIELDTYPE, VARIABLE_TYPE, WIRETYPE>;

      FieldTemplate() = default;
      FieldTemplate(const VARIABLE_TYPE& v) : value_(v) { };
      FieldTemplate(const VARIABLE_TYPE&& v) : value_(v) { };
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	6039      	str	r1, [r7, #0]
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4618      	mov	r0, r3
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE2EmLNS_13WireFormatter8WireTypeE0EEC1EOKm>:
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
 8001e96:	6039      	str	r1, [r7, #0]
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE7EN7Command7ButtonsELNS_13WireFormatter8WireTypeE0EE5clearEv>:
      template<Field::FieldTypes FIELDTYPE_RHS, class TYPE_RHS, WireFormatter::WireType WIRETYPE_RHS>
      bool operator>=(const FieldTemplate<FIELDTYPE_RHS, TYPE_RHS, WIRETYPE_RHS>& rhs) { return value_ >= rhs.get(); }
      template<Field::FieldTypes FIELDTYPE_RHS, class TYPE_RHS, WireFormatter::WireType WIRETYPE_RHS>
      bool operator<=(const FieldTemplate<FIELDTYPE_RHS, TYPE_RHS, WIRETYPE_RHS>& rhs) { return value_ <= rhs.get(); }

      void clear() { value_ = static_cast<VARIABLE_TYPE>(0); }
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <_ZNK13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE7EN7Command7ButtonsELNS_13WireFormatter8WireTypeE0EE3getEv>:
      const VARIABLE_TYPE& get() const { return value_; }
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE2EmLNS_13WireFormatter8WireTypeE0EE5clearEv>:
      void clear() { value_ = static_cast<VARIABLE_TYPE>(0); }
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE2EmLNS_13WireFormatter8WireTypeE0EE3getEv>:
      VARIABLE_TYPE& get() { return value_; }
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4618      	mov	r0, r3
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <_ZNK13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE2EmLNS_13WireFormatter8WireTypeE0EE3getEv>:
      const VARIABLE_TYPE& get() const { return value_; }
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <_ZNK13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE7EN7Command7ButtonsELNS_13WireFormatter8WireTypeE0EE17serialize_with_idEmRNS_20WriteBufferInterfaceEb>:
      Error serialize_with_id(uint32_t field_number, WriteBufferInterface& buffer, [[maybe_unused]] const bool optional) const
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
 8001f30:	70fb      	strb	r3, [r7, #3]
        Error return_value = WireFormatter::SerializeVarint(WireFormatter::MakeTag(field_number, WIRETYPE), buffer);
 8001f32:	2100      	movs	r1, #0
 8001f34:	68b8      	ldr	r0, [r7, #8]
 8001f36:	f7fe fc1b 	bl	8000770 <_ZN13EmbeddedProto13WireFormatter7MakeTagEmNS0_8WireTypeE>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe fd74 	bl	8000a2c <_ZN13EmbeddedProto13WireFormatter15SerializeVarintImEENS_5ErrorET_RNS_20WriteBufferInterfaceE>
 8001f44:	6178      	str	r0, [r7, #20]
        if(Error::NO_ERRORS == return_value)
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d104      	bne.n	8001f56 <_ZNK13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE7EN7Command7ButtonsELNS_13WireFormatter8WireTypeE0EE17serialize_with_idEmRNS_20WriteBufferInterfaceEb+0x32>
          return_value = serialize(buffer);
 8001f4c:	6879      	ldr	r1, [r7, #4]
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f000 f8d6 	bl	8002100 <_ZNK13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE7EN7Command7ButtonsELNS_13WireFormatter8WireTypeE0EE9serializeERNS_20WriteBufferInterfaceE>
 8001f54:	6178      	str	r0, [r7, #20]
        return return_value;
 8001f56:	697b      	ldr	r3, [r7, #20]
      }   
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <_ZNK13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE2EmLNS_13WireFormatter8WireTypeE0EE17serialize_with_idEmRNS_20WriteBufferInterfaceEb>:
      Error serialize_with_id(uint32_t field_number, WriteBufferInterface& buffer, [[maybe_unused]] const bool optional) const
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
 8001f6c:	70fb      	strb	r3, [r7, #3]
        Error return_value = WireFormatter::SerializeVarint(WireFormatter::MakeTag(field_number, WIRETYPE), buffer);
 8001f6e:	2100      	movs	r1, #0
 8001f70:	68b8      	ldr	r0, [r7, #8]
 8001f72:	f7fe fbfd 	bl	8000770 <_ZN13EmbeddedProto13WireFormatter7MakeTagEmNS0_8WireTypeE>
 8001f76:	4603      	mov	r3, r0
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7fe fd56 	bl	8000a2c <_ZN13EmbeddedProto13WireFormatter15SerializeVarintImEENS_5ErrorET_RNS_20WriteBufferInterfaceE>
 8001f80:	6178      	str	r0, [r7, #20]
        if(Error::NO_ERRORS == return_value)
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d104      	bne.n	8001f92 <_ZNK13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE2EmLNS_13WireFormatter8WireTypeE0EE17serialize_with_idEmRNS_20WriteBufferInterfaceEb+0x32>
          return_value = serialize(buffer);
 8001f88:	6879      	ldr	r1, [r7, #4]
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f000 f8c6 	bl	800211c <_ZNK13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE2EmLNS_13WireFormatter8WireTypeE0EE9serializeERNS_20WriteBufferInterfaceE>
 8001f90:	6178      	str	r0, [r7, #20]
        return return_value;
 8001f92:	697b      	ldr	r3, [r7, #20]
      }   
 8001f94:	4618      	mov	r0, r3
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE7EN7Command7ButtonsELNS_13WireFormatter8WireTypeE0EE22deserialize_check_typeERNS_19ReadBufferInterfaceERKS6_>:
      Error deserialize_check_type(ReadBufferInterface& buffer, 
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
        Error return_value = WIRETYPE == wire_type ? Error::NO_ERRORS : Error::INVALID_WIRETYPE;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE7EN7Command7ButtonsELNS_13WireFormatter8WireTypeE0EE22deserialize_check_typeERNS_19ReadBufferInterfaceERKS6_+0x18>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	e000      	b.n	8001fb6 <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE7EN7Command7ButtonsELNS_13WireFormatter8WireTypeE0EE22deserialize_check_typeERNS_19ReadBufferInterfaceERKS6_+0x1a>
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	617b      	str	r3, [r7, #20]
        if(Error::NO_ERRORS == return_value) 
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d104      	bne.n	8001fc8 <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE7EN7Command7ButtonsELNS_13WireFormatter8WireTypeE0EE22deserialize_check_typeERNS_19ReadBufferInterfaceERKS6_+0x2c>
          return_value = deserialize(buffer);
 8001fbe:	68b9      	ldr	r1, [r7, #8]
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f000 f8b9 	bl	8002138 <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE7EN7Command7ButtonsELNS_13WireFormatter8WireTypeE0EE11deserializeERNS_19ReadBufferInterfaceE>
 8001fc6:	6178      	str	r0, [r7, #20]
        return return_value;
 8001fc8:	697b      	ldr	r3, [r7, #20]
      }
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3718      	adds	r7, #24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE2EmLNS_13WireFormatter8WireTypeE0EE22deserialize_check_typeERNS_19ReadBufferInterfaceERKS4_>:
      Error deserialize_check_type(ReadBufferInterface& buffer, 
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b086      	sub	sp, #24
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	60f8      	str	r0, [r7, #12]
 8001fda:	60b9      	str	r1, [r7, #8]
 8001fdc:	607a      	str	r2, [r7, #4]
        Error return_value = WIRETYPE == wire_type ? Error::NO_ERRORS : Error::INVALID_WIRETYPE;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE2EmLNS_13WireFormatter8WireTypeE0EE22deserialize_check_typeERNS_19ReadBufferInterfaceERKS4_+0x18>
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	e000      	b.n	8001fec <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE2EmLNS_13WireFormatter8WireTypeE0EE22deserialize_check_typeERNS_19ReadBufferInterfaceERKS4_+0x1a>
 8001fea:	2303      	movs	r3, #3
 8001fec:	617b      	str	r3, [r7, #20]
        if(Error::NO_ERRORS == return_value) 
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d104      	bne.n	8001ffe <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE2EmLNS_13WireFormatter8WireTypeE0EE22deserialize_check_typeERNS_19ReadBufferInterfaceERKS4_+0x2c>
          return_value = deserialize(buffer);
 8001ff4:	68b9      	ldr	r1, [r7, #8]
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f000 f8ac 	bl	8002154 <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE2EmLNS_13WireFormatter8WireTypeE0EE11deserializeERNS_19ReadBufferInterfaceE>
 8001ffc:	6178      	str	r0, [r7, #20]
        return return_value;
 8001ffe:	697b      	ldr	r3, [r7, #20]
      }
 8002000:	4618      	mov	r0, r3
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE6EbLNS_13WireFormatter8WireTypeE0EEC1EOKb>:
      FieldTemplate(const VARIABLE_TYPE&& v) : value_(v) { };
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	781a      	ldrb	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	701a      	strb	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4618      	mov	r0, r3
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE6EbLNS_13WireFormatter8WireTypeE0EE5clearEv>:
      void clear() { value_ = static_cast<VARIABLE_TYPE>(0); }
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	701a      	strb	r2, [r3, #0]
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE6EbLNS_13WireFormatter8WireTypeE0EEaSERKb>:
      CLASS_TYPE& operator=(const VARIABLE_TYPE& v) 
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	6039      	str	r1, [r7, #0]
        value_ = v;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	781a      	ldrb	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	701a      	strb	r2, [r3, #0]
        return *this;
 8002054:	687b      	ldr	r3, [r7, #4]
      }
 8002056:	4618      	mov	r0, r3
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE6EbLNS_13WireFormatter8WireTypeE0EE3getEv>:
      VARIABLE_TYPE& get() { return value_; }
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4618      	mov	r0, r3
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <_ZNK13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE6EbLNS_13WireFormatter8WireTypeE0EE3getEv>:
      const VARIABLE_TYPE& get() const { return value_; }
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4618      	mov	r0, r3
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <_ZNK13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE6EbLNS_13WireFormatter8WireTypeE0EE17serialize_with_idEmRNS_20WriteBufferInterfaceEb>:
      Error serialize_with_id(uint32_t field_number, WriteBufferInterface& buffer, [[maybe_unused]] const bool optional) const
 800208e:	b580      	push	{r7, lr}
 8002090:	b086      	sub	sp, #24
 8002092:	af00      	add	r7, sp, #0
 8002094:	60f8      	str	r0, [r7, #12]
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	607a      	str	r2, [r7, #4]
 800209a:	70fb      	strb	r3, [r7, #3]
        Error return_value = WireFormatter::SerializeVarint(WireFormatter::MakeTag(field_number, WIRETYPE), buffer);
 800209c:	2100      	movs	r1, #0
 800209e:	68b8      	ldr	r0, [r7, #8]
 80020a0:	f7fe fb66 	bl	8000770 <_ZN13EmbeddedProto13WireFormatter7MakeTagEmNS0_8WireTypeE>
 80020a4:	4603      	mov	r3, r0
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7fe fcbf 	bl	8000a2c <_ZN13EmbeddedProto13WireFormatter15SerializeVarintImEENS_5ErrorET_RNS_20WriteBufferInterfaceE>
 80020ae:	6178      	str	r0, [r7, #20]
        if(Error::NO_ERRORS == return_value)
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d104      	bne.n	80020c0 <_ZNK13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE6EbLNS_13WireFormatter8WireTypeE0EE17serialize_with_idEmRNS_20WriteBufferInterfaceEb+0x32>
          return_value = serialize(buffer);
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f000 f859 	bl	8002170 <_ZNK13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE6EbLNS_13WireFormatter8WireTypeE0EE9serializeERNS_20WriteBufferInterfaceE>
 80020be:	6178      	str	r0, [r7, #20]
        return return_value;
 80020c0:	697b      	ldr	r3, [r7, #20]
      }   
 80020c2:	4618      	mov	r0, r3
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE6EbLNS_13WireFormatter8WireTypeE0EE22deserialize_check_typeERNS_19ReadBufferInterfaceERKS4_>:
      Error deserialize_check_type(ReadBufferInterface& buffer, 
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b086      	sub	sp, #24
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	60f8      	str	r0, [r7, #12]
 80020d2:	60b9      	str	r1, [r7, #8]
 80020d4:	607a      	str	r2, [r7, #4]
        Error return_value = WIRETYPE == wire_type ? Error::NO_ERRORS : Error::INVALID_WIRETYPE;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE6EbLNS_13WireFormatter8WireTypeE0EE22deserialize_check_typeERNS_19ReadBufferInterfaceERKS4_+0x18>
 80020de:	2300      	movs	r3, #0
 80020e0:	e000      	b.n	80020e4 <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE6EbLNS_13WireFormatter8WireTypeE0EE22deserialize_check_typeERNS_19ReadBufferInterfaceERKS4_+0x1a>
 80020e2:	2303      	movs	r3, #3
 80020e4:	617b      	str	r3, [r7, #20]
        if(Error::NO_ERRORS == return_value) 
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d104      	bne.n	80020f6 <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE6EbLNS_13WireFormatter8WireTypeE0EE22deserialize_check_typeERNS_19ReadBufferInterfaceERKS4_+0x2c>
          return_value = deserialize(buffer);
 80020ec:	68b9      	ldr	r1, [r7, #8]
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 f84c 	bl	800218c <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE6EbLNS_13WireFormatter8WireTypeE0EE11deserializeERNS_19ReadBufferInterfaceE>
 80020f4:	6178      	str	r0, [r7, #20]
        return return_value;
 80020f6:	697b      	ldr	r3, [r7, #20]
      }
 80020f8:	4618      	mov	r0, r3
 80020fa:	3718      	adds	r7, #24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <_ZNK13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE7EN7Command7ButtonsELNS_13WireFormatter8WireTypeE0EE9serializeERNS_20WriteBufferInterfaceE>:
      Error serialize(WriteBufferInterface& buffer) const
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
        return serialize_<FIELDTYPE>(buffer);
 800210a:	6839      	ldr	r1, [r7, #0]
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 f84b 	bl	80021a8 <_ZNK13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE7EN7Command7ButtonsELNS_13WireFormatter8WireTypeE0EE10serialize_ILS2_7ELb1EEENS_5ErrorERNS_20WriteBufferInterfaceE>
 8002112:	4603      	mov	r3, r0
      }
 8002114:	4618      	mov	r0, r3
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <_ZNK13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE2EmLNS_13WireFormatter8WireTypeE0EE9serializeERNS_20WriteBufferInterfaceE>:
      Error serialize(WriteBufferInterface& buffer) const
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
        return serialize_<FIELDTYPE>(buffer);
 8002126:	6839      	ldr	r1, [r7, #0]
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 f850 	bl	80021ce <_ZNK13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE2EmLNS_13WireFormatter8WireTypeE0EE10serialize_ILS2_2ELb1EEENS_5ErrorERNS_20WriteBufferInterfaceE>
 800212e:	4603      	mov	r3, r0
      }
 8002130:	4618      	mov	r0, r3
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE7EN7Command7ButtonsELNS_13WireFormatter8WireTypeE0EE11deserializeERNS_19ReadBufferInterfaceE>:
      Error deserialize(ReadBufferInterface& buffer)
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
        return deserialize_<FIELDTYPE>(buffer);
 8002142:	6839      	ldr	r1, [r7, #0]
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 f855 	bl	80021f4 <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE7EN7Command7ButtonsELNS_13WireFormatter8WireTypeE0EE12deserialize_ILS2_7ELb1EEENS_5ErrorERNS_19ReadBufferInterfaceE>
 800214a:	4603      	mov	r3, r0
      }
 800214c:	4618      	mov	r0, r3
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE2EmLNS_13WireFormatter8WireTypeE0EE11deserializeERNS_19ReadBufferInterfaceE>:
      Error deserialize(ReadBufferInterface& buffer)
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
        return deserialize_<FIELDTYPE>(buffer);
 800215e:	6839      	ldr	r1, [r7, #0]
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 f860 	bl	8002226 <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE2EmLNS_13WireFormatter8WireTypeE0EE12deserialize_ILS2_2ELb1EEENS_5ErrorERNS_19ReadBufferInterfaceE>
 8002166:	4603      	mov	r3, r0
      }
 8002168:	4618      	mov	r0, r3
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <_ZNK13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE6EbLNS_13WireFormatter8WireTypeE0EE9serializeERNS_20WriteBufferInterfaceE>:
      Error serialize(WriteBufferInterface& buffer) const
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
        return serialize_<FIELDTYPE>(buffer);
 800217a:	6839      	ldr	r1, [r7, #0]
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 f864 	bl	800224a <_ZNK13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE6EbLNS_13WireFormatter8WireTypeE0EE10serialize_ILS2_6ELb1EEENS_5ErrorERNS_20WriteBufferInterfaceE>
 8002182:	4603      	mov	r3, r0
      }
 8002184:	4618      	mov	r0, r3
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE6EbLNS_13WireFormatter8WireTypeE0EE11deserializeERNS_19ReadBufferInterfaceE>:
      Error deserialize(ReadBufferInterface& buffer)
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
        return deserialize_<FIELDTYPE>(buffer);
 8002196:	6839      	ldr	r1, [r7, #0]
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f878 	bl	800228e <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE6EbLNS_13WireFormatter8WireTypeE0EE12deserialize_ILS2_6ELb1EEENS_5ErrorERNS_19ReadBufferInterfaceE>
 800219e:	4603      	mov	r3, r0
      }
 80021a0:	4618      	mov	r0, r3
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <_ZNK13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE7EN7Command7ButtonsELNS_13WireFormatter8WireTypeE0EE10serialize_ILS2_7ELb1EEENS_5ErrorERNS_20WriteBufferInterfaceE>:
        const uint8_t byte = get() ? 0x01 : 0x00;
        return buffer.push(byte) ? Error::NO_ERRORS : Error::BUFFER_FULL; 
      }

      template<Field::FieldTypes SER_FIELDTYPE, typename std::enable_if<Field::FieldTypes::enumeration == SER_FIELDTYPE, bool>::type = true>
      Error serialize_(WriteBufferInterface& buffer) const { return WireFormatter::SerializeVarint(static_cast<uint32_t>(get()), buffer); }
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff fe88 	bl	8001ec8 <_ZNK13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE7EN7Command7ButtonsELNS_13WireFormatter8WireTypeE0EE3getEv>
 80021b8:	4603      	mov	r3, r0
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6839      	ldr	r1, [r7, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7fe fc34 	bl	8000a2c <_ZN13EmbeddedProto13WireFormatter15SerializeVarintImEENS_5ErrorET_RNS_20WriteBufferInterfaceE>
 80021c4:	4603      	mov	r3, r0
 80021c6:	4618      	mov	r0, r3
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <_ZNK13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE2EmLNS_13WireFormatter8WireTypeE0EE10serialize_ILS2_2ELb1EEENS_5ErrorERNS_20WriteBufferInterfaceE>:
      Error serialize_(WriteBufferInterface& buffer) const { return WireFormatter::SerializeVarint(get(), buffer); }
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b082      	sub	sp, #8
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	6039      	str	r1, [r7, #0]
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7ff fe98 	bl	8001f0e <_ZNK13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE2EmLNS_13WireFormatter8WireTypeE0EE3getEv>
 80021de:	4603      	mov	r3, r0
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6839      	ldr	r1, [r7, #0]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7fe fc21 	bl	8000a2c <_ZN13EmbeddedProto13WireFormatter15SerializeVarintImEENS_5ErrorET_RNS_20WriteBufferInterfaceE>
 80021ea:	4603      	mov	r3, r0
 80021ec:	4618      	mov	r0, r3
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE7EN7Command7ButtonsELNS_13WireFormatter8WireTypeE0EE12deserialize_ILS2_7ELb1EEENS_5ErrorERNS_19ReadBufferInterfaceE>:

      template<Field::FieldTypes DES_FIELDTYPE, typename std::enable_if<Field::FieldTypes::boolean == DES_FIELDTYPE, bool>::type = true>
      Error deserialize_(ReadBufferInterface& buffer) { return WireFormatter::DeserializeBool(buffer, get()); }

      template<Field::FieldTypes DES_FIELDTYPE, typename std::enable_if<Field::FieldTypes::enumeration == DES_FIELDTYPE, bool>::type = true>
      Error deserialize_(ReadBufferInterface& buffer)
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
      { 
        uint32_t value = 0;
 80021fe:	2300      	movs	r3, #0
 8002200:	60bb      	str	r3, [r7, #8]
        const Error return_value = WireFormatter::DeserializeVarint(buffer, value);
 8002202:	f107 0308 	add.w	r3, r7, #8
 8002206:	4619      	mov	r1, r3
 8002208:	6838      	ldr	r0, [r7, #0]
 800220a:	f7fe fc45 	bl	8000a98 <_ZN13EmbeddedProto13WireFormatter17DeserializeVarintImEENS_5ErrorERNS_19ReadBufferInterfaceERT_>
 800220e:	60f8      	str	r0, [r7, #12]
        if(::EmbeddedProto::Error::NO_ERRORS == return_value)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d102      	bne.n	800221c <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE7EN7Command7ButtonsELNS_13WireFormatter8WireTypeE0EE12deserialize_ILS2_7ELb1EEENS_5ErrorERNS_19ReadBufferInterfaceE+0x28>
        {
          value_ = static_cast<VARIABLE_TYPE>(value);
 8002216:	68ba      	ldr	r2, [r7, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	601a      	str	r2, [r3, #0]
        }
        return return_value;
 800221c:	68fb      	ldr	r3, [r7, #12]
      }
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE2EmLNS_13WireFormatter8WireTypeE0EE12deserialize_ILS2_2ELb1EEENS_5ErrorERNS_19ReadBufferInterfaceE>:
      Error deserialize_(ReadBufferInterface& buffer) { return WireFormatter::DeserializeUInt(buffer, get()); }
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	6039      	str	r1, [r7, #0]
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7ff fe61 	bl	8001ef8 <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE2EmLNS_13WireFormatter8WireTypeE0EE3getEv>
 8002236:	4603      	mov	r3, r0
 8002238:	4619      	mov	r1, r3
 800223a:	6838      	ldr	r0, [r7, #0]
 800223c:	f000 f839 	bl	80022b2 <_ZN13EmbeddedProto13WireFormatter15DeserializeUIntImEENS_5ErrorERNS_19ReadBufferInterfaceERT_>
 8002240:	4603      	mov	r3, r0
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <_ZNK13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE6EbLNS_13WireFormatter8WireTypeE0EE10serialize_ILS2_6ELb1EEENS_5ErrorERNS_20WriteBufferInterfaceE>:
      Error serialize_(WriteBufferInterface& buffer) const 
 800224a:	b580      	push	{r7, lr}
 800224c:	b084      	sub	sp, #16
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
 8002252:	6039      	str	r1, [r7, #0]
        const uint8_t byte = get() ? 0x01 : 0x00;
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff ff0f 	bl	8002078 <_ZNK13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE6EbLNS_13WireFormatter8WireTypeE0EE3getEv>
 800225a:	4603      	mov	r3, r0
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <_ZNK13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE6EbLNS_13WireFormatter8WireTypeE0EE10serialize_ILS2_6ELb1EEENS_5ErrorERNS_20WriteBufferInterfaceE+0x1c>
 8002262:	2301      	movs	r3, #1
 8002264:	e000      	b.n	8002268 <_ZNK13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE6EbLNS_13WireFormatter8WireTypeE0EE10serialize_ILS2_6ELb1EEENS_5ErrorERNS_20WriteBufferInterfaceE+0x1e>
 8002266:	2300      	movs	r3, #0
 8002268:	73fb      	strb	r3, [r7, #15]
        return buffer.push(byte) ? Error::NO_ERRORS : Error::BUFFER_FULL; 
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	3318      	adds	r3, #24
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	7bfa      	ldrb	r2, [r7, #15]
 8002274:	4611      	mov	r1, r2
 8002276:	6838      	ldr	r0, [r7, #0]
 8002278:	4798      	blx	r3
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <_ZNK13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE6EbLNS_13WireFormatter8WireTypeE0EE10serialize_ILS2_6ELb1EEENS_5ErrorERNS_20WriteBufferInterfaceE+0x3a>
 8002280:	2300      	movs	r3, #0
 8002282:	e000      	b.n	8002286 <_ZNK13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE6EbLNS_13WireFormatter8WireTypeE0EE10serialize_ILS2_6ELb1EEENS_5ErrorERNS_20WriteBufferInterfaceE+0x3c>
 8002284:	2302      	movs	r3, #2
      }
 8002286:	4618      	mov	r0, r3
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE6EbLNS_13WireFormatter8WireTypeE0EE12deserialize_ILS2_6ELb1EEENS_5ErrorERNS_19ReadBufferInterfaceE>:
      Error deserialize_(ReadBufferInterface& buffer) { return WireFormatter::DeserializeBool(buffer, get()); }
 800228e:	b580      	push	{r7, lr}
 8002290:	b082      	sub	sp, #8
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
 8002296:	6039      	str	r1, [r7, #0]
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7ff fee2 	bl	8002062 <_ZN13EmbeddedProto13FieldTemplateILNS_5Field10FieldTypesE6EbLNS_13WireFormatter8WireTypeE0EE3getEv>
 800229e:	4603      	mov	r3, r0
 80022a0:	4619      	mov	r1, r3
 80022a2:	6838      	ldr	r0, [r7, #0]
 80022a4:	f7ff f897 	bl	80013d6 <_ZN13EmbeddedProto13WireFormatter15DeserializeBoolERNS_19ReadBufferInterfaceERb>
 80022a8:	4603      	mov	r3, r0
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <_ZN13EmbeddedProto13WireFormatter15DeserializeUIntImEENS_5ErrorERNS_19ReadBufferInterfaceERT_>:
      static Error DeserializeUInt(ReadBufferInterface& buffer, UINT_TYPE& value) 
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b082      	sub	sp, #8
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
 80022ba:	6039      	str	r1, [r7, #0]
        return DeserializeVarint(buffer, value);
 80022bc:	6839      	ldr	r1, [r7, #0]
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7fe fbea 	bl	8000a98 <_ZN13EmbeddedProto13WireFormatter17DeserializeVarintImEENS_5ErrorERNS_19ReadBufferInterfaceERT_>
 80022c4:	4603      	mov	r3, r0
      }
 80022c6:	4618      	mov	r0, r3
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <_ZN5ReplyD1Ev>:
    ~Reply() override = default;
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	4a05      	ldr	r2, [pc, #20]	; (80022f0 <_ZN5ReplyD1Ev+0x20>)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff f8dd 	bl	80014a0 <_ZN13EmbeddedProto16MessageInterfaceD1Ev>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4618      	mov	r0, r3
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	080085b4 	.word	0x080085b4

080022f4 <_ZN5ReplyD0Ev>:
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7ff ffe7 	bl	80022d0 <_ZN5ReplyD1Ev>
 8002302:	2108      	movs	r1, #8
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f006 f81b 	bl	8008340 <_ZdlPvj>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4618      	mov	r0, r3
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <_ZN7CommandD1Ev>:
    ~Command() override = default;
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	4a05      	ldr	r2, [pc, #20]	; (8002334 <_ZN7CommandD1Ev+0x20>)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff f8bb 	bl	80014a0 <_ZN13EmbeddedProto16MessageInterfaceD1Ev>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4618      	mov	r0, r3
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	080085d8 	.word	0x080085d8

08002338 <_ZN7CommandD0Ev>:
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7ff ffe7 	bl	8002314 <_ZN7CommandD1Ev>
 8002346:	210c      	movs	r1, #12
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f005 fff9 	bl	8008340 <_ZdlPvj>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4618      	mov	r0, r3
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d110      	bne.n	800238a <_Z41__static_initialization_and_destruction_0ii+0x32>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800236e:	4293      	cmp	r3, r2
 8002370:	d10b      	bne.n	800238a <_Z41__static_initialization_and_destruction_0ii+0x32>
UartReadBuffer read_buffer;
 8002372:	4812      	ldr	r0, [pc, #72]	; (80023bc <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002374:	f7fe fe54 	bl	8001020 <_ZN14UartReadBufferC1Ev>
UartWriteBuffer write_buffer;
 8002378:	4811      	ldr	r0, [pc, #68]	; (80023c0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800237a:	f7ff fa43 	bl	8001804 <_ZN15UartWriteBufferC1Ev>
Command received_command;
 800237e:	4811      	ldr	r0, [pc, #68]	; (80023c4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002380:	f7ff fa52 	bl	8001828 <_ZN7CommandC1Ev>
Reply outgoing_reply;
 8002384:	4810      	ldr	r0, [pc, #64]	; (80023c8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8002386:	f7ff fa75 	bl	8001874 <_ZN5ReplyC1Ev>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d110      	bne.n	80023b2 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002396:	4293      	cmp	r3, r2
 8002398:	d10b      	bne.n	80023b2 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 800239a:	480b      	ldr	r0, [pc, #44]	; (80023c8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800239c:	f7ff ff98 	bl	80022d0 <_ZN5ReplyD1Ev>
Command received_command;
 80023a0:	4808      	ldr	r0, [pc, #32]	; (80023c4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80023a2:	f7ff ffb7 	bl	8002314 <_ZN7CommandD1Ev>
UartWriteBuffer write_buffer;
 80023a6:	4806      	ldr	r0, [pc, #24]	; (80023c0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80023a8:	f7fe ffcc 	bl	8001344 <_ZN15UartWriteBufferD1Ev>
UartReadBuffer read_buffer;
 80023ac:	4803      	ldr	r0, [pc, #12]	; (80023bc <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80023ae:	f7fe ff1f 	bl	80011f0 <_ZN14UartReadBufferD1Ev>
}
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	24000110 	.word	0x24000110
 80023c0:	24000150 	.word	0x24000150
 80023c4:	24000190 	.word	0x24000190
 80023c8:	2400019c 	.word	0x2400019c

080023cc <_GLOBAL__sub_I_huart3>:
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80023d4:	2001      	movs	r0, #1
 80023d6:	f7ff ffbf 	bl	8002358 <_Z41__static_initialization_and_destruction_0ii>
 80023da:	bd80      	pop	{r7, pc}

080023dc <_GLOBAL__sub_D_huart3>:
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
 80023e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80023e4:	2000      	movs	r0, #0
 80023e6:	f7ff ffb7 	bl	8002358 <_Z41__static_initialization_and_destruction_0ii>
 80023ea:	bd80      	pop	{r7, pc}

080023ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023f2:	4b0a      	ldr	r3, [pc, #40]	; (800241c <HAL_MspInit+0x30>)
 80023f4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80023f8:	4a08      	ldr	r2, [pc, #32]	; (800241c <HAL_MspInit+0x30>)
 80023fa:	f043 0302 	orr.w	r3, r3, #2
 80023fe:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002402:	4b06      	ldr	r3, [pc, #24]	; (800241c <HAL_MspInit+0x30>)
 8002404:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	607b      	str	r3, [r7, #4]
 800240e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	58024400 	.word	0x58024400

08002420 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b0ba      	sub	sp, #232	; 0xe8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002428:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	60da      	str	r2, [r3, #12]
 8002436:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002438:	f107 0310 	add.w	r3, r7, #16
 800243c:	22c0      	movs	r2, #192	; 0xc0
 800243e:	2100      	movs	r1, #0
 8002440:	4618      	mov	r0, r3
 8002442:	f005 ff95 	bl	8008370 <memset>
  if(huart->Instance==USART3)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a2b      	ldr	r2, [pc, #172]	; (80024f8 <HAL_UART_MspInit+0xd8>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d14e      	bne.n	80024ee <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002450:	f04f 0202 	mov.w	r2, #2
 8002454:	f04f 0300 	mov.w	r3, #0
 8002458:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800245c:	2300      	movs	r3, #0
 800245e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002462:	f107 0310 	add.w	r3, r7, #16
 8002466:	4618      	mov	r0, r3
 8002468:	f002 fa22 	bl	80048b0 <HAL_RCCEx_PeriphCLKConfig>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002472:	f7ff fcf7 	bl	8001e64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002476:	4b21      	ldr	r3, [pc, #132]	; (80024fc <HAL_UART_MspInit+0xdc>)
 8002478:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800247c:	4a1f      	ldr	r2, [pc, #124]	; (80024fc <HAL_UART_MspInit+0xdc>)
 800247e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002482:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8002486:	4b1d      	ldr	r3, [pc, #116]	; (80024fc <HAL_UART_MspInit+0xdc>)
 8002488:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800248c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002494:	4b19      	ldr	r3, [pc, #100]	; (80024fc <HAL_UART_MspInit+0xdc>)
 8002496:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800249a:	4a18      	ldr	r2, [pc, #96]	; (80024fc <HAL_UART_MspInit+0xdc>)
 800249c:	f043 0308 	orr.w	r3, r3, #8
 80024a0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80024a4:	4b15      	ldr	r3, [pc, #84]	; (80024fc <HAL_UART_MspInit+0xdc>)
 80024a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	60bb      	str	r3, [r7, #8]
 80024b0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80024b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ba:	2302      	movs	r3, #2
 80024bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c6:	2300      	movs	r3, #0
 80024c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024cc:	2307      	movs	r3, #7
 80024ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024d2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80024d6:	4619      	mov	r1, r3
 80024d8:	4809      	ldr	r0, [pc, #36]	; (8002500 <HAL_UART_MspInit+0xe0>)
 80024da:	f000 ffef 	bl	80034bc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80024de:	2200      	movs	r2, #0
 80024e0:	2100      	movs	r1, #0
 80024e2:	2027      	movs	r0, #39	; 0x27
 80024e4:	f000 fa51 	bl	800298a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80024e8:	2027      	movs	r0, #39	; 0x27
 80024ea:	f000 fa68 	bl	80029be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80024ee:	bf00      	nop
 80024f0:	37e8      	adds	r7, #232	; 0xe8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40004800 	.word	0x40004800
 80024fc:	58024400 	.word	0x58024400
 8002500:	58020c00 	.word	0x58020c00

08002504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002508:	e7fe      	b.n	8002508 <NMI_Handler+0x4>

0800250a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800250a:	b480      	push	{r7}
 800250c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800250e:	e7fe      	b.n	800250e <HardFault_Handler+0x4>

08002510 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002514:	e7fe      	b.n	8002514 <MemManage_Handler+0x4>

08002516 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002516:	b480      	push	{r7}
 8002518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800251a:	e7fe      	b.n	800251a <BusFault_Handler+0x4>

0800251c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002520:	e7fe      	b.n	8002520 <UsageFault_Handler+0x4>

08002522 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002522:	b480      	push	{r7}
 8002524:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002534:	bf00      	nop
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800253e:	b480      	push	{r7}
 8002540:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002542:	bf00      	nop
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002550:	f000 f920 	bl	8002794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002554:	bf00      	nop
 8002556:	bd80      	pop	{r7, pc}

08002558 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800255c:	4802      	ldr	r0, [pc, #8]	; (8002568 <USART3_IRQHandler+0x10>)
 800255e:	f004 f92d 	bl	80067bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	2400007c 	.word	0x2400007c

0800256c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002570:	4b32      	ldr	r3, [pc, #200]	; (800263c <SystemInit+0xd0>)
 8002572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002576:	4a31      	ldr	r2, [pc, #196]	; (800263c <SystemInit+0xd0>)
 8002578:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800257c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002580:	4b2f      	ldr	r3, [pc, #188]	; (8002640 <SystemInit+0xd4>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 030f 	and.w	r3, r3, #15
 8002588:	2b02      	cmp	r3, #2
 800258a:	d807      	bhi.n	800259c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800258c:	4b2c      	ldr	r3, [pc, #176]	; (8002640 <SystemInit+0xd4>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f023 030f 	bic.w	r3, r3, #15
 8002594:	4a2a      	ldr	r2, [pc, #168]	; (8002640 <SystemInit+0xd4>)
 8002596:	f043 0303 	orr.w	r3, r3, #3
 800259a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800259c:	4b29      	ldr	r3, [pc, #164]	; (8002644 <SystemInit+0xd8>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a28      	ldr	r2, [pc, #160]	; (8002644 <SystemInit+0xd8>)
 80025a2:	f043 0301 	orr.w	r3, r3, #1
 80025a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80025a8:	4b26      	ldr	r3, [pc, #152]	; (8002644 <SystemInit+0xd8>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80025ae:	4b25      	ldr	r3, [pc, #148]	; (8002644 <SystemInit+0xd8>)
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	4924      	ldr	r1, [pc, #144]	; (8002644 <SystemInit+0xd8>)
 80025b4:	4b24      	ldr	r3, [pc, #144]	; (8002648 <SystemInit+0xdc>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80025ba:	4b21      	ldr	r3, [pc, #132]	; (8002640 <SystemInit+0xd4>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d007      	beq.n	80025d6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80025c6:	4b1e      	ldr	r3, [pc, #120]	; (8002640 <SystemInit+0xd4>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f023 030f 	bic.w	r3, r3, #15
 80025ce:	4a1c      	ldr	r2, [pc, #112]	; (8002640 <SystemInit+0xd4>)
 80025d0:	f043 0303 	orr.w	r3, r3, #3
 80025d4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80025d6:	4b1b      	ldr	r3, [pc, #108]	; (8002644 <SystemInit+0xd8>)
 80025d8:	2200      	movs	r2, #0
 80025da:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80025dc:	4b19      	ldr	r3, [pc, #100]	; (8002644 <SystemInit+0xd8>)
 80025de:	2200      	movs	r2, #0
 80025e0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80025e2:	4b18      	ldr	r3, [pc, #96]	; (8002644 <SystemInit+0xd8>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80025e8:	4b16      	ldr	r3, [pc, #88]	; (8002644 <SystemInit+0xd8>)
 80025ea:	4a18      	ldr	r2, [pc, #96]	; (800264c <SystemInit+0xe0>)
 80025ec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80025ee:	4b15      	ldr	r3, [pc, #84]	; (8002644 <SystemInit+0xd8>)
 80025f0:	4a17      	ldr	r2, [pc, #92]	; (8002650 <SystemInit+0xe4>)
 80025f2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80025f4:	4b13      	ldr	r3, [pc, #76]	; (8002644 <SystemInit+0xd8>)
 80025f6:	4a17      	ldr	r2, [pc, #92]	; (8002654 <SystemInit+0xe8>)
 80025f8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80025fa:	4b12      	ldr	r3, [pc, #72]	; (8002644 <SystemInit+0xd8>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002600:	4b10      	ldr	r3, [pc, #64]	; (8002644 <SystemInit+0xd8>)
 8002602:	4a14      	ldr	r2, [pc, #80]	; (8002654 <SystemInit+0xe8>)
 8002604:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002606:	4b0f      	ldr	r3, [pc, #60]	; (8002644 <SystemInit+0xd8>)
 8002608:	2200      	movs	r2, #0
 800260a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800260c:	4b0d      	ldr	r3, [pc, #52]	; (8002644 <SystemInit+0xd8>)
 800260e:	4a11      	ldr	r2, [pc, #68]	; (8002654 <SystemInit+0xe8>)
 8002610:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002612:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <SystemInit+0xd8>)
 8002614:	2200      	movs	r2, #0
 8002616:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002618:	4b0a      	ldr	r3, [pc, #40]	; (8002644 <SystemInit+0xd8>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a09      	ldr	r2, [pc, #36]	; (8002644 <SystemInit+0xd8>)
 800261e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002622:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002624:	4b07      	ldr	r3, [pc, #28]	; (8002644 <SystemInit+0xd8>)
 8002626:	2200      	movs	r2, #0
 8002628:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800262a:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <SystemInit+0xec>)
 800262c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002630:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002632:	bf00      	nop
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	e000ed00 	.word	0xe000ed00
 8002640:	52002000 	.word	0x52002000
 8002644:	58024400 	.word	0x58024400
 8002648:	eaf6ed7f 	.word	0xeaf6ed7f
 800264c:	02020200 	.word	0x02020200
 8002650:	01ff0000 	.word	0x01ff0000
 8002654:	01010280 	.word	0x01010280
 8002658:	52004000 	.word	0x52004000

0800265c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800265c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002694 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002660:	f7ff ff84 	bl	800256c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002664:	480c      	ldr	r0, [pc, #48]	; (8002698 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002666:	490d      	ldr	r1, [pc, #52]	; (800269c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002668:	4a0d      	ldr	r2, [pc, #52]	; (80026a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800266a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800266c:	e002      	b.n	8002674 <LoopCopyDataInit>

0800266e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800266e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002672:	3304      	adds	r3, #4

08002674 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8002674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002678:	d3f9      	bcc.n	800266e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800267a:	4a0a      	ldr	r2, [pc, #40]	; (80026a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800267c:	4c0a      	ldr	r4, [pc, #40]	; (80026a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800267e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002680:	e001      	b.n	8002686 <LoopFillZerobss>

08002682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002684:	3204      	adds	r2, #4

08002686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002688:	d3fb      	bcc.n	8002682 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800268a:	f005 fe79 	bl	8008380 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800268e:	f7ff f90d 	bl	80018ac <main>
  bx  lr
 8002692:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002694:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8002698:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800269c:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 80026a0:	08008668 	.word	0x08008668
  ldr r2, =_sbss
 80026a4:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 80026a8:	240002e8 	.word	0x240002e8

080026ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026ac:	e7fe      	b.n	80026ac <ADC_IRQHandler>
	...

080026b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026b6:	2003      	movs	r0, #3
 80026b8:	f000 f95c 	bl	8002974 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80026bc:	f001 ff22 	bl	8004504 <HAL_RCC_GetSysClockFreq>
 80026c0:	4602      	mov	r2, r0
 80026c2:	4b15      	ldr	r3, [pc, #84]	; (8002718 <HAL_Init+0x68>)
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	0a1b      	lsrs	r3, r3, #8
 80026c8:	f003 030f 	and.w	r3, r3, #15
 80026cc:	4913      	ldr	r1, [pc, #76]	; (800271c <HAL_Init+0x6c>)
 80026ce:	5ccb      	ldrb	r3, [r1, r3]
 80026d0:	f003 031f 	and.w	r3, r3, #31
 80026d4:	fa22 f303 	lsr.w	r3, r2, r3
 80026d8:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80026da:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <HAL_Init+0x68>)
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	4a0e      	ldr	r2, [pc, #56]	; (800271c <HAL_Init+0x6c>)
 80026e4:	5cd3      	ldrb	r3, [r2, r3]
 80026e6:	f003 031f 	and.w	r3, r3, #31
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	fa22 f303 	lsr.w	r3, r2, r3
 80026f0:	4a0b      	ldr	r2, [pc, #44]	; (8002720 <HAL_Init+0x70>)
 80026f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80026f4:	4a0b      	ldr	r2, [pc, #44]	; (8002724 <HAL_Init+0x74>)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026fa:	2000      	movs	r0, #0
 80026fc:	f000 f814 	bl	8002728 <HAL_InitTick>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e002      	b.n	8002710 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800270a:	f7ff fe6f 	bl	80023ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3708      	adds	r7, #8
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	58024400 	.word	0x58024400
 800271c:	08008618 	.word	0x08008618
 8002720:	24000004 	.word	0x24000004
 8002724:	24000000 	.word	0x24000000

08002728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002730:	4b15      	ldr	r3, [pc, #84]	; (8002788 <HAL_InitTick+0x60>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e021      	b.n	8002780 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800273c:	4b13      	ldr	r3, [pc, #76]	; (800278c <HAL_InitTick+0x64>)
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	4b11      	ldr	r3, [pc, #68]	; (8002788 <HAL_InitTick+0x60>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	4619      	mov	r1, r3
 8002746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800274a:	fbb3 f3f1 	udiv	r3, r3, r1
 800274e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002752:	4618      	mov	r0, r3
 8002754:	f000 f941 	bl	80029da <HAL_SYSTICK_Config>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e00e      	b.n	8002780 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b0f      	cmp	r3, #15
 8002766:	d80a      	bhi.n	800277e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002768:	2200      	movs	r2, #0
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002770:	f000 f90b 	bl	800298a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002774:	4a06      	ldr	r2, [pc, #24]	; (8002790 <HAL_InitTick+0x68>)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800277a:	2300      	movs	r3, #0
 800277c:	e000      	b.n	8002780 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
}
 8002780:	4618      	mov	r0, r3
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	2400000c 	.word	0x2400000c
 800278c:	24000000 	.word	0x24000000
 8002790:	24000008 	.word	0x24000008

08002794 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002798:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <HAL_IncTick+0x20>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	461a      	mov	r2, r3
 800279e:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <HAL_IncTick+0x24>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4413      	add	r3, r2
 80027a4:	4a04      	ldr	r2, [pc, #16]	; (80027b8 <HAL_IncTick+0x24>)
 80027a6:	6013      	str	r3, [r2, #0]
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	2400000c 	.word	0x2400000c
 80027b8:	240001a4 	.word	0x240001a4

080027bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return uwTick;
 80027c0:	4b03      	ldr	r3, [pc, #12]	; (80027d0 <HAL_GetTick+0x14>)
 80027c2:	681b      	ldr	r3, [r3, #0]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	240001a4 	.word	0x240001a4

080027d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027e4:	4b0b      	ldr	r3, [pc, #44]	; (8002814 <__NVIC_SetPriorityGrouping+0x40>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027f0:	4013      	ands	r3, r2
 80027f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <__NVIC_SetPriorityGrouping+0x44>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002802:	4a04      	ldr	r2, [pc, #16]	; (8002814 <__NVIC_SetPriorityGrouping+0x40>)
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	60d3      	str	r3, [r2, #12]
}
 8002808:	bf00      	nop
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	e000ed00 	.word	0xe000ed00
 8002818:	05fa0000 	.word	0x05fa0000

0800281c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002820:	4b04      	ldr	r3, [pc, #16]	; (8002834 <__NVIC_GetPriorityGrouping+0x18>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	0a1b      	lsrs	r3, r3, #8
 8002826:	f003 0307 	and.w	r3, r3, #7
}
 800282a:	4618      	mov	r0, r3
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	e000ed00 	.word	0xe000ed00

08002838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	4603      	mov	r3, r0
 8002840:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002842:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002846:	2b00      	cmp	r3, #0
 8002848:	db0b      	blt.n	8002862 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800284a:	88fb      	ldrh	r3, [r7, #6]
 800284c:	f003 021f 	and.w	r2, r3, #31
 8002850:	4907      	ldr	r1, [pc, #28]	; (8002870 <__NVIC_EnableIRQ+0x38>)
 8002852:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002856:	095b      	lsrs	r3, r3, #5
 8002858:	2001      	movs	r0, #1
 800285a:	fa00 f202 	lsl.w	r2, r0, r2
 800285e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	e000e100 	.word	0xe000e100

08002874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	6039      	str	r1, [r7, #0]
 800287e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002880:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002884:	2b00      	cmp	r3, #0
 8002886:	db0a      	blt.n	800289e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	b2da      	uxtb	r2, r3
 800288c:	490c      	ldr	r1, [pc, #48]	; (80028c0 <__NVIC_SetPriority+0x4c>)
 800288e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002892:	0112      	lsls	r2, r2, #4
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	440b      	add	r3, r1
 8002898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800289c:	e00a      	b.n	80028b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	4908      	ldr	r1, [pc, #32]	; (80028c4 <__NVIC_SetPriority+0x50>)
 80028a4:	88fb      	ldrh	r3, [r7, #6]
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	3b04      	subs	r3, #4
 80028ac:	0112      	lsls	r2, r2, #4
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	440b      	add	r3, r1
 80028b2:	761a      	strb	r2, [r3, #24]
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	e000e100 	.word	0xe000e100
 80028c4:	e000ed00 	.word	0xe000ed00

080028c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b089      	sub	sp, #36	; 0x24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f1c3 0307 	rsb	r3, r3, #7
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	bf28      	it	cs
 80028e6:	2304      	movcs	r3, #4
 80028e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	3304      	adds	r3, #4
 80028ee:	2b06      	cmp	r3, #6
 80028f0:	d902      	bls.n	80028f8 <NVIC_EncodePriority+0x30>
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	3b03      	subs	r3, #3
 80028f6:	e000      	b.n	80028fa <NVIC_EncodePriority+0x32>
 80028f8:	2300      	movs	r3, #0
 80028fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43da      	mvns	r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	401a      	ands	r2, r3
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002910:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	fa01 f303 	lsl.w	r3, r1, r3
 800291a:	43d9      	mvns	r1, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002920:	4313      	orrs	r3, r2
         );
}
 8002922:	4618      	mov	r0, r3
 8002924:	3724      	adds	r7, #36	; 0x24
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
	...

08002930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3b01      	subs	r3, #1
 800293c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002940:	d301      	bcc.n	8002946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002942:	2301      	movs	r3, #1
 8002944:	e00f      	b.n	8002966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002946:	4a0a      	ldr	r2, [pc, #40]	; (8002970 <SysTick_Config+0x40>)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3b01      	subs	r3, #1
 800294c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800294e:	210f      	movs	r1, #15
 8002950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002954:	f7ff ff8e 	bl	8002874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002958:	4b05      	ldr	r3, [pc, #20]	; (8002970 <SysTick_Config+0x40>)
 800295a:	2200      	movs	r2, #0
 800295c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800295e:	4b04      	ldr	r3, [pc, #16]	; (8002970 <SysTick_Config+0x40>)
 8002960:	2207      	movs	r2, #7
 8002962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	e000e010 	.word	0xe000e010

08002974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7ff ff29 	bl	80027d4 <__NVIC_SetPriorityGrouping>
}
 8002982:	bf00      	nop
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b086      	sub	sp, #24
 800298e:	af00      	add	r7, sp, #0
 8002990:	4603      	mov	r3, r0
 8002992:	60b9      	str	r1, [r7, #8]
 8002994:	607a      	str	r2, [r7, #4]
 8002996:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002998:	f7ff ff40 	bl	800281c <__NVIC_GetPriorityGrouping>
 800299c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	68b9      	ldr	r1, [r7, #8]
 80029a2:	6978      	ldr	r0, [r7, #20]
 80029a4:	f7ff ff90 	bl	80028c8 <NVIC_EncodePriority>
 80029a8:	4602      	mov	r2, r0
 80029aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029ae:	4611      	mov	r1, r2
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff ff5f 	bl	8002874 <__NVIC_SetPriority>
}
 80029b6:	bf00      	nop
 80029b8:	3718      	adds	r7, #24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	4603      	mov	r3, r0
 80029c6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff ff33 	bl	8002838 <__NVIC_EnableIRQ>
}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b082      	sub	sp, #8
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7ff ffa4 	bl	8002930 <SysTick_Config>
 80029e8:	4603      	mov	r3, r0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
	...

080029f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80029fc:	f7ff fede 	bl	80027bc <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e2dc      	b.n	8002fc6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d008      	beq.n	8002a2a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2280      	movs	r2, #128	; 0x80
 8002a1c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e2cd      	b.n	8002fc6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a76      	ldr	r2, [pc, #472]	; (8002c08 <HAL_DMA_Abort+0x214>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d04a      	beq.n	8002aca <HAL_DMA_Abort+0xd6>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a74      	ldr	r2, [pc, #464]	; (8002c0c <HAL_DMA_Abort+0x218>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d045      	beq.n	8002aca <HAL_DMA_Abort+0xd6>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a73      	ldr	r2, [pc, #460]	; (8002c10 <HAL_DMA_Abort+0x21c>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d040      	beq.n	8002aca <HAL_DMA_Abort+0xd6>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a71      	ldr	r2, [pc, #452]	; (8002c14 <HAL_DMA_Abort+0x220>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d03b      	beq.n	8002aca <HAL_DMA_Abort+0xd6>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a70      	ldr	r2, [pc, #448]	; (8002c18 <HAL_DMA_Abort+0x224>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d036      	beq.n	8002aca <HAL_DMA_Abort+0xd6>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a6e      	ldr	r2, [pc, #440]	; (8002c1c <HAL_DMA_Abort+0x228>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d031      	beq.n	8002aca <HAL_DMA_Abort+0xd6>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a6d      	ldr	r2, [pc, #436]	; (8002c20 <HAL_DMA_Abort+0x22c>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d02c      	beq.n	8002aca <HAL_DMA_Abort+0xd6>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a6b      	ldr	r2, [pc, #428]	; (8002c24 <HAL_DMA_Abort+0x230>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d027      	beq.n	8002aca <HAL_DMA_Abort+0xd6>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a6a      	ldr	r2, [pc, #424]	; (8002c28 <HAL_DMA_Abort+0x234>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d022      	beq.n	8002aca <HAL_DMA_Abort+0xd6>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a68      	ldr	r2, [pc, #416]	; (8002c2c <HAL_DMA_Abort+0x238>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d01d      	beq.n	8002aca <HAL_DMA_Abort+0xd6>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a67      	ldr	r2, [pc, #412]	; (8002c30 <HAL_DMA_Abort+0x23c>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d018      	beq.n	8002aca <HAL_DMA_Abort+0xd6>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a65      	ldr	r2, [pc, #404]	; (8002c34 <HAL_DMA_Abort+0x240>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d013      	beq.n	8002aca <HAL_DMA_Abort+0xd6>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a64      	ldr	r2, [pc, #400]	; (8002c38 <HAL_DMA_Abort+0x244>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d00e      	beq.n	8002aca <HAL_DMA_Abort+0xd6>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a62      	ldr	r2, [pc, #392]	; (8002c3c <HAL_DMA_Abort+0x248>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d009      	beq.n	8002aca <HAL_DMA_Abort+0xd6>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a61      	ldr	r2, [pc, #388]	; (8002c40 <HAL_DMA_Abort+0x24c>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d004      	beq.n	8002aca <HAL_DMA_Abort+0xd6>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a5f      	ldr	r2, [pc, #380]	; (8002c44 <HAL_DMA_Abort+0x250>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d101      	bne.n	8002ace <HAL_DMA_Abort+0xda>
 8002aca:	2301      	movs	r3, #1
 8002acc:	e000      	b.n	8002ad0 <HAL_DMA_Abort+0xdc>
 8002ace:	2300      	movs	r3, #0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d013      	beq.n	8002afc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 021e 	bic.w	r2, r2, #30
 8002ae2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695a      	ldr	r2, [r3, #20]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002af2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	617b      	str	r3, [r7, #20]
 8002afa:	e00a      	b.n	8002b12 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 020e 	bic.w	r2, r2, #14
 8002b0a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a3c      	ldr	r2, [pc, #240]	; (8002c08 <HAL_DMA_Abort+0x214>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d072      	beq.n	8002c02 <HAL_DMA_Abort+0x20e>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a3a      	ldr	r2, [pc, #232]	; (8002c0c <HAL_DMA_Abort+0x218>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d06d      	beq.n	8002c02 <HAL_DMA_Abort+0x20e>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a39      	ldr	r2, [pc, #228]	; (8002c10 <HAL_DMA_Abort+0x21c>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d068      	beq.n	8002c02 <HAL_DMA_Abort+0x20e>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a37      	ldr	r2, [pc, #220]	; (8002c14 <HAL_DMA_Abort+0x220>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d063      	beq.n	8002c02 <HAL_DMA_Abort+0x20e>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a36      	ldr	r2, [pc, #216]	; (8002c18 <HAL_DMA_Abort+0x224>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d05e      	beq.n	8002c02 <HAL_DMA_Abort+0x20e>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a34      	ldr	r2, [pc, #208]	; (8002c1c <HAL_DMA_Abort+0x228>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d059      	beq.n	8002c02 <HAL_DMA_Abort+0x20e>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a33      	ldr	r2, [pc, #204]	; (8002c20 <HAL_DMA_Abort+0x22c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d054      	beq.n	8002c02 <HAL_DMA_Abort+0x20e>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a31      	ldr	r2, [pc, #196]	; (8002c24 <HAL_DMA_Abort+0x230>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d04f      	beq.n	8002c02 <HAL_DMA_Abort+0x20e>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a30      	ldr	r2, [pc, #192]	; (8002c28 <HAL_DMA_Abort+0x234>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d04a      	beq.n	8002c02 <HAL_DMA_Abort+0x20e>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a2e      	ldr	r2, [pc, #184]	; (8002c2c <HAL_DMA_Abort+0x238>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d045      	beq.n	8002c02 <HAL_DMA_Abort+0x20e>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a2d      	ldr	r2, [pc, #180]	; (8002c30 <HAL_DMA_Abort+0x23c>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d040      	beq.n	8002c02 <HAL_DMA_Abort+0x20e>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a2b      	ldr	r2, [pc, #172]	; (8002c34 <HAL_DMA_Abort+0x240>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d03b      	beq.n	8002c02 <HAL_DMA_Abort+0x20e>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a2a      	ldr	r2, [pc, #168]	; (8002c38 <HAL_DMA_Abort+0x244>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d036      	beq.n	8002c02 <HAL_DMA_Abort+0x20e>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a28      	ldr	r2, [pc, #160]	; (8002c3c <HAL_DMA_Abort+0x248>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d031      	beq.n	8002c02 <HAL_DMA_Abort+0x20e>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a27      	ldr	r2, [pc, #156]	; (8002c40 <HAL_DMA_Abort+0x24c>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d02c      	beq.n	8002c02 <HAL_DMA_Abort+0x20e>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a25      	ldr	r2, [pc, #148]	; (8002c44 <HAL_DMA_Abort+0x250>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d027      	beq.n	8002c02 <HAL_DMA_Abort+0x20e>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a24      	ldr	r2, [pc, #144]	; (8002c48 <HAL_DMA_Abort+0x254>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d022      	beq.n	8002c02 <HAL_DMA_Abort+0x20e>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a22      	ldr	r2, [pc, #136]	; (8002c4c <HAL_DMA_Abort+0x258>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d01d      	beq.n	8002c02 <HAL_DMA_Abort+0x20e>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a21      	ldr	r2, [pc, #132]	; (8002c50 <HAL_DMA_Abort+0x25c>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d018      	beq.n	8002c02 <HAL_DMA_Abort+0x20e>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a1f      	ldr	r2, [pc, #124]	; (8002c54 <HAL_DMA_Abort+0x260>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d013      	beq.n	8002c02 <HAL_DMA_Abort+0x20e>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a1e      	ldr	r2, [pc, #120]	; (8002c58 <HAL_DMA_Abort+0x264>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d00e      	beq.n	8002c02 <HAL_DMA_Abort+0x20e>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a1c      	ldr	r2, [pc, #112]	; (8002c5c <HAL_DMA_Abort+0x268>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d009      	beq.n	8002c02 <HAL_DMA_Abort+0x20e>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a1b      	ldr	r2, [pc, #108]	; (8002c60 <HAL_DMA_Abort+0x26c>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d004      	beq.n	8002c02 <HAL_DMA_Abort+0x20e>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a19      	ldr	r2, [pc, #100]	; (8002c64 <HAL_DMA_Abort+0x270>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d132      	bne.n	8002c68 <HAL_DMA_Abort+0x274>
 8002c02:	2301      	movs	r3, #1
 8002c04:	e031      	b.n	8002c6a <HAL_DMA_Abort+0x276>
 8002c06:	bf00      	nop
 8002c08:	40020010 	.word	0x40020010
 8002c0c:	40020028 	.word	0x40020028
 8002c10:	40020040 	.word	0x40020040
 8002c14:	40020058 	.word	0x40020058
 8002c18:	40020070 	.word	0x40020070
 8002c1c:	40020088 	.word	0x40020088
 8002c20:	400200a0 	.word	0x400200a0
 8002c24:	400200b8 	.word	0x400200b8
 8002c28:	40020410 	.word	0x40020410
 8002c2c:	40020428 	.word	0x40020428
 8002c30:	40020440 	.word	0x40020440
 8002c34:	40020458 	.word	0x40020458
 8002c38:	40020470 	.word	0x40020470
 8002c3c:	40020488 	.word	0x40020488
 8002c40:	400204a0 	.word	0x400204a0
 8002c44:	400204b8 	.word	0x400204b8
 8002c48:	58025408 	.word	0x58025408
 8002c4c:	5802541c 	.word	0x5802541c
 8002c50:	58025430 	.word	0x58025430
 8002c54:	58025444 	.word	0x58025444
 8002c58:	58025458 	.word	0x58025458
 8002c5c:	5802546c 	.word	0x5802546c
 8002c60:	58025480 	.word	0x58025480
 8002c64:	58025494 	.word	0x58025494
 8002c68:	2300      	movs	r3, #0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d007      	beq.n	8002c7e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a6d      	ldr	r2, [pc, #436]	; (8002e38 <HAL_DMA_Abort+0x444>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d04a      	beq.n	8002d1e <HAL_DMA_Abort+0x32a>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a6b      	ldr	r2, [pc, #428]	; (8002e3c <HAL_DMA_Abort+0x448>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d045      	beq.n	8002d1e <HAL_DMA_Abort+0x32a>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a6a      	ldr	r2, [pc, #424]	; (8002e40 <HAL_DMA_Abort+0x44c>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d040      	beq.n	8002d1e <HAL_DMA_Abort+0x32a>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a68      	ldr	r2, [pc, #416]	; (8002e44 <HAL_DMA_Abort+0x450>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d03b      	beq.n	8002d1e <HAL_DMA_Abort+0x32a>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a67      	ldr	r2, [pc, #412]	; (8002e48 <HAL_DMA_Abort+0x454>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d036      	beq.n	8002d1e <HAL_DMA_Abort+0x32a>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a65      	ldr	r2, [pc, #404]	; (8002e4c <HAL_DMA_Abort+0x458>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d031      	beq.n	8002d1e <HAL_DMA_Abort+0x32a>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a64      	ldr	r2, [pc, #400]	; (8002e50 <HAL_DMA_Abort+0x45c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d02c      	beq.n	8002d1e <HAL_DMA_Abort+0x32a>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a62      	ldr	r2, [pc, #392]	; (8002e54 <HAL_DMA_Abort+0x460>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d027      	beq.n	8002d1e <HAL_DMA_Abort+0x32a>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a61      	ldr	r2, [pc, #388]	; (8002e58 <HAL_DMA_Abort+0x464>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d022      	beq.n	8002d1e <HAL_DMA_Abort+0x32a>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a5f      	ldr	r2, [pc, #380]	; (8002e5c <HAL_DMA_Abort+0x468>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d01d      	beq.n	8002d1e <HAL_DMA_Abort+0x32a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a5e      	ldr	r2, [pc, #376]	; (8002e60 <HAL_DMA_Abort+0x46c>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d018      	beq.n	8002d1e <HAL_DMA_Abort+0x32a>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a5c      	ldr	r2, [pc, #368]	; (8002e64 <HAL_DMA_Abort+0x470>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d013      	beq.n	8002d1e <HAL_DMA_Abort+0x32a>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a5b      	ldr	r2, [pc, #364]	; (8002e68 <HAL_DMA_Abort+0x474>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d00e      	beq.n	8002d1e <HAL_DMA_Abort+0x32a>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a59      	ldr	r2, [pc, #356]	; (8002e6c <HAL_DMA_Abort+0x478>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d009      	beq.n	8002d1e <HAL_DMA_Abort+0x32a>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a58      	ldr	r2, [pc, #352]	; (8002e70 <HAL_DMA_Abort+0x47c>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d004      	beq.n	8002d1e <HAL_DMA_Abort+0x32a>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a56      	ldr	r2, [pc, #344]	; (8002e74 <HAL_DMA_Abort+0x480>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d108      	bne.n	8002d30 <HAL_DMA_Abort+0x33c>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 0201 	bic.w	r2, r2, #1
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	e007      	b.n	8002d40 <HAL_DMA_Abort+0x34c>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0201 	bic.w	r2, r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002d40:	e013      	b.n	8002d6a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d42:	f7ff fd3b 	bl	80027bc <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b05      	cmp	r3, #5
 8002d4e:	d90c      	bls.n	8002d6a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2220      	movs	r2, #32
 8002d54:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2203      	movs	r2, #3
 8002d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e12d      	b.n	8002fc6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1e5      	bne.n	8002d42 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a2f      	ldr	r2, [pc, #188]	; (8002e38 <HAL_DMA_Abort+0x444>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d04a      	beq.n	8002e16 <HAL_DMA_Abort+0x422>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a2d      	ldr	r2, [pc, #180]	; (8002e3c <HAL_DMA_Abort+0x448>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d045      	beq.n	8002e16 <HAL_DMA_Abort+0x422>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a2c      	ldr	r2, [pc, #176]	; (8002e40 <HAL_DMA_Abort+0x44c>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d040      	beq.n	8002e16 <HAL_DMA_Abort+0x422>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a2a      	ldr	r2, [pc, #168]	; (8002e44 <HAL_DMA_Abort+0x450>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d03b      	beq.n	8002e16 <HAL_DMA_Abort+0x422>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a29      	ldr	r2, [pc, #164]	; (8002e48 <HAL_DMA_Abort+0x454>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d036      	beq.n	8002e16 <HAL_DMA_Abort+0x422>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a27      	ldr	r2, [pc, #156]	; (8002e4c <HAL_DMA_Abort+0x458>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d031      	beq.n	8002e16 <HAL_DMA_Abort+0x422>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a26      	ldr	r2, [pc, #152]	; (8002e50 <HAL_DMA_Abort+0x45c>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d02c      	beq.n	8002e16 <HAL_DMA_Abort+0x422>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a24      	ldr	r2, [pc, #144]	; (8002e54 <HAL_DMA_Abort+0x460>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d027      	beq.n	8002e16 <HAL_DMA_Abort+0x422>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a23      	ldr	r2, [pc, #140]	; (8002e58 <HAL_DMA_Abort+0x464>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d022      	beq.n	8002e16 <HAL_DMA_Abort+0x422>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a21      	ldr	r2, [pc, #132]	; (8002e5c <HAL_DMA_Abort+0x468>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d01d      	beq.n	8002e16 <HAL_DMA_Abort+0x422>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a20      	ldr	r2, [pc, #128]	; (8002e60 <HAL_DMA_Abort+0x46c>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d018      	beq.n	8002e16 <HAL_DMA_Abort+0x422>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a1e      	ldr	r2, [pc, #120]	; (8002e64 <HAL_DMA_Abort+0x470>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d013      	beq.n	8002e16 <HAL_DMA_Abort+0x422>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a1d      	ldr	r2, [pc, #116]	; (8002e68 <HAL_DMA_Abort+0x474>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d00e      	beq.n	8002e16 <HAL_DMA_Abort+0x422>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a1b      	ldr	r2, [pc, #108]	; (8002e6c <HAL_DMA_Abort+0x478>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d009      	beq.n	8002e16 <HAL_DMA_Abort+0x422>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a1a      	ldr	r2, [pc, #104]	; (8002e70 <HAL_DMA_Abort+0x47c>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d004      	beq.n	8002e16 <HAL_DMA_Abort+0x422>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a18      	ldr	r2, [pc, #96]	; (8002e74 <HAL_DMA_Abort+0x480>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d101      	bne.n	8002e1a <HAL_DMA_Abort+0x426>
 8002e16:	2301      	movs	r3, #1
 8002e18:	e000      	b.n	8002e1c <HAL_DMA_Abort+0x428>
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d02b      	beq.n	8002e78 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e24:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2a:	f003 031f 	and.w	r3, r3, #31
 8002e2e:	223f      	movs	r2, #63	; 0x3f
 8002e30:	409a      	lsls	r2, r3
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	609a      	str	r2, [r3, #8]
 8002e36:	e02a      	b.n	8002e8e <HAL_DMA_Abort+0x49a>
 8002e38:	40020010 	.word	0x40020010
 8002e3c:	40020028 	.word	0x40020028
 8002e40:	40020040 	.word	0x40020040
 8002e44:	40020058 	.word	0x40020058
 8002e48:	40020070 	.word	0x40020070
 8002e4c:	40020088 	.word	0x40020088
 8002e50:	400200a0 	.word	0x400200a0
 8002e54:	400200b8 	.word	0x400200b8
 8002e58:	40020410 	.word	0x40020410
 8002e5c:	40020428 	.word	0x40020428
 8002e60:	40020440 	.word	0x40020440
 8002e64:	40020458 	.word	0x40020458
 8002e68:	40020470 	.word	0x40020470
 8002e6c:	40020488 	.word	0x40020488
 8002e70:	400204a0 	.word	0x400204a0
 8002e74:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e82:	f003 031f 	and.w	r3, r3, #31
 8002e86:	2201      	movs	r2, #1
 8002e88:	409a      	lsls	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a4f      	ldr	r2, [pc, #316]	; (8002fd0 <HAL_DMA_Abort+0x5dc>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d072      	beq.n	8002f7e <HAL_DMA_Abort+0x58a>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a4d      	ldr	r2, [pc, #308]	; (8002fd4 <HAL_DMA_Abort+0x5e0>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d06d      	beq.n	8002f7e <HAL_DMA_Abort+0x58a>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a4c      	ldr	r2, [pc, #304]	; (8002fd8 <HAL_DMA_Abort+0x5e4>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d068      	beq.n	8002f7e <HAL_DMA_Abort+0x58a>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a4a      	ldr	r2, [pc, #296]	; (8002fdc <HAL_DMA_Abort+0x5e8>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d063      	beq.n	8002f7e <HAL_DMA_Abort+0x58a>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a49      	ldr	r2, [pc, #292]	; (8002fe0 <HAL_DMA_Abort+0x5ec>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d05e      	beq.n	8002f7e <HAL_DMA_Abort+0x58a>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a47      	ldr	r2, [pc, #284]	; (8002fe4 <HAL_DMA_Abort+0x5f0>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d059      	beq.n	8002f7e <HAL_DMA_Abort+0x58a>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a46      	ldr	r2, [pc, #280]	; (8002fe8 <HAL_DMA_Abort+0x5f4>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d054      	beq.n	8002f7e <HAL_DMA_Abort+0x58a>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a44      	ldr	r2, [pc, #272]	; (8002fec <HAL_DMA_Abort+0x5f8>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d04f      	beq.n	8002f7e <HAL_DMA_Abort+0x58a>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a43      	ldr	r2, [pc, #268]	; (8002ff0 <HAL_DMA_Abort+0x5fc>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d04a      	beq.n	8002f7e <HAL_DMA_Abort+0x58a>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a41      	ldr	r2, [pc, #260]	; (8002ff4 <HAL_DMA_Abort+0x600>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d045      	beq.n	8002f7e <HAL_DMA_Abort+0x58a>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a40      	ldr	r2, [pc, #256]	; (8002ff8 <HAL_DMA_Abort+0x604>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d040      	beq.n	8002f7e <HAL_DMA_Abort+0x58a>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a3e      	ldr	r2, [pc, #248]	; (8002ffc <HAL_DMA_Abort+0x608>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d03b      	beq.n	8002f7e <HAL_DMA_Abort+0x58a>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a3d      	ldr	r2, [pc, #244]	; (8003000 <HAL_DMA_Abort+0x60c>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d036      	beq.n	8002f7e <HAL_DMA_Abort+0x58a>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a3b      	ldr	r2, [pc, #236]	; (8003004 <HAL_DMA_Abort+0x610>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d031      	beq.n	8002f7e <HAL_DMA_Abort+0x58a>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a3a      	ldr	r2, [pc, #232]	; (8003008 <HAL_DMA_Abort+0x614>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d02c      	beq.n	8002f7e <HAL_DMA_Abort+0x58a>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a38      	ldr	r2, [pc, #224]	; (800300c <HAL_DMA_Abort+0x618>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d027      	beq.n	8002f7e <HAL_DMA_Abort+0x58a>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a37      	ldr	r2, [pc, #220]	; (8003010 <HAL_DMA_Abort+0x61c>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d022      	beq.n	8002f7e <HAL_DMA_Abort+0x58a>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a35      	ldr	r2, [pc, #212]	; (8003014 <HAL_DMA_Abort+0x620>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d01d      	beq.n	8002f7e <HAL_DMA_Abort+0x58a>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a34      	ldr	r2, [pc, #208]	; (8003018 <HAL_DMA_Abort+0x624>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d018      	beq.n	8002f7e <HAL_DMA_Abort+0x58a>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a32      	ldr	r2, [pc, #200]	; (800301c <HAL_DMA_Abort+0x628>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d013      	beq.n	8002f7e <HAL_DMA_Abort+0x58a>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a31      	ldr	r2, [pc, #196]	; (8003020 <HAL_DMA_Abort+0x62c>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d00e      	beq.n	8002f7e <HAL_DMA_Abort+0x58a>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a2f      	ldr	r2, [pc, #188]	; (8003024 <HAL_DMA_Abort+0x630>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d009      	beq.n	8002f7e <HAL_DMA_Abort+0x58a>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a2e      	ldr	r2, [pc, #184]	; (8003028 <HAL_DMA_Abort+0x634>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d004      	beq.n	8002f7e <HAL_DMA_Abort+0x58a>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a2c      	ldr	r2, [pc, #176]	; (800302c <HAL_DMA_Abort+0x638>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d101      	bne.n	8002f82 <HAL_DMA_Abort+0x58e>
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e000      	b.n	8002f84 <HAL_DMA_Abort+0x590>
 8002f82:	2300      	movs	r3, #0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d015      	beq.n	8002fb4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002f90:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00c      	beq.n	8002fb4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fa4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fa8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002fb2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3718      	adds	r7, #24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40020010 	.word	0x40020010
 8002fd4:	40020028 	.word	0x40020028
 8002fd8:	40020040 	.word	0x40020040
 8002fdc:	40020058 	.word	0x40020058
 8002fe0:	40020070 	.word	0x40020070
 8002fe4:	40020088 	.word	0x40020088
 8002fe8:	400200a0 	.word	0x400200a0
 8002fec:	400200b8 	.word	0x400200b8
 8002ff0:	40020410 	.word	0x40020410
 8002ff4:	40020428 	.word	0x40020428
 8002ff8:	40020440 	.word	0x40020440
 8002ffc:	40020458 	.word	0x40020458
 8003000:	40020470 	.word	0x40020470
 8003004:	40020488 	.word	0x40020488
 8003008:	400204a0 	.word	0x400204a0
 800300c:	400204b8 	.word	0x400204b8
 8003010:	58025408 	.word	0x58025408
 8003014:	5802541c 	.word	0x5802541c
 8003018:	58025430 	.word	0x58025430
 800301c:	58025444 	.word	0x58025444
 8003020:	58025458 	.word	0x58025458
 8003024:	5802546c 	.word	0x5802546c
 8003028:	58025480 	.word	0x58025480
 800302c:	58025494 	.word	0x58025494

08003030 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e237      	b.n	80034b2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d004      	beq.n	8003058 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2280      	movs	r2, #128	; 0x80
 8003052:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e22c      	b.n	80034b2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a5c      	ldr	r2, [pc, #368]	; (80031d0 <HAL_DMA_Abort_IT+0x1a0>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d04a      	beq.n	80030f8 <HAL_DMA_Abort_IT+0xc8>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a5b      	ldr	r2, [pc, #364]	; (80031d4 <HAL_DMA_Abort_IT+0x1a4>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d045      	beq.n	80030f8 <HAL_DMA_Abort_IT+0xc8>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a59      	ldr	r2, [pc, #356]	; (80031d8 <HAL_DMA_Abort_IT+0x1a8>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d040      	beq.n	80030f8 <HAL_DMA_Abort_IT+0xc8>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a58      	ldr	r2, [pc, #352]	; (80031dc <HAL_DMA_Abort_IT+0x1ac>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d03b      	beq.n	80030f8 <HAL_DMA_Abort_IT+0xc8>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a56      	ldr	r2, [pc, #344]	; (80031e0 <HAL_DMA_Abort_IT+0x1b0>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d036      	beq.n	80030f8 <HAL_DMA_Abort_IT+0xc8>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a55      	ldr	r2, [pc, #340]	; (80031e4 <HAL_DMA_Abort_IT+0x1b4>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d031      	beq.n	80030f8 <HAL_DMA_Abort_IT+0xc8>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a53      	ldr	r2, [pc, #332]	; (80031e8 <HAL_DMA_Abort_IT+0x1b8>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d02c      	beq.n	80030f8 <HAL_DMA_Abort_IT+0xc8>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a52      	ldr	r2, [pc, #328]	; (80031ec <HAL_DMA_Abort_IT+0x1bc>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d027      	beq.n	80030f8 <HAL_DMA_Abort_IT+0xc8>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a50      	ldr	r2, [pc, #320]	; (80031f0 <HAL_DMA_Abort_IT+0x1c0>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d022      	beq.n	80030f8 <HAL_DMA_Abort_IT+0xc8>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a4f      	ldr	r2, [pc, #316]	; (80031f4 <HAL_DMA_Abort_IT+0x1c4>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d01d      	beq.n	80030f8 <HAL_DMA_Abort_IT+0xc8>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a4d      	ldr	r2, [pc, #308]	; (80031f8 <HAL_DMA_Abort_IT+0x1c8>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d018      	beq.n	80030f8 <HAL_DMA_Abort_IT+0xc8>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a4c      	ldr	r2, [pc, #304]	; (80031fc <HAL_DMA_Abort_IT+0x1cc>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d013      	beq.n	80030f8 <HAL_DMA_Abort_IT+0xc8>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a4a      	ldr	r2, [pc, #296]	; (8003200 <HAL_DMA_Abort_IT+0x1d0>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d00e      	beq.n	80030f8 <HAL_DMA_Abort_IT+0xc8>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a49      	ldr	r2, [pc, #292]	; (8003204 <HAL_DMA_Abort_IT+0x1d4>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d009      	beq.n	80030f8 <HAL_DMA_Abort_IT+0xc8>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a47      	ldr	r2, [pc, #284]	; (8003208 <HAL_DMA_Abort_IT+0x1d8>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d004      	beq.n	80030f8 <HAL_DMA_Abort_IT+0xc8>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a46      	ldr	r2, [pc, #280]	; (800320c <HAL_DMA_Abort_IT+0x1dc>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d101      	bne.n	80030fc <HAL_DMA_Abort_IT+0xcc>
 80030f8:	2301      	movs	r3, #1
 80030fa:	e000      	b.n	80030fe <HAL_DMA_Abort_IT+0xce>
 80030fc:	2300      	movs	r3, #0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 8086 	beq.w	8003210 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2204      	movs	r2, #4
 8003108:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a2f      	ldr	r2, [pc, #188]	; (80031d0 <HAL_DMA_Abort_IT+0x1a0>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d04a      	beq.n	80031ac <HAL_DMA_Abort_IT+0x17c>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a2e      	ldr	r2, [pc, #184]	; (80031d4 <HAL_DMA_Abort_IT+0x1a4>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d045      	beq.n	80031ac <HAL_DMA_Abort_IT+0x17c>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a2c      	ldr	r2, [pc, #176]	; (80031d8 <HAL_DMA_Abort_IT+0x1a8>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d040      	beq.n	80031ac <HAL_DMA_Abort_IT+0x17c>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a2b      	ldr	r2, [pc, #172]	; (80031dc <HAL_DMA_Abort_IT+0x1ac>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d03b      	beq.n	80031ac <HAL_DMA_Abort_IT+0x17c>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a29      	ldr	r2, [pc, #164]	; (80031e0 <HAL_DMA_Abort_IT+0x1b0>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d036      	beq.n	80031ac <HAL_DMA_Abort_IT+0x17c>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a28      	ldr	r2, [pc, #160]	; (80031e4 <HAL_DMA_Abort_IT+0x1b4>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d031      	beq.n	80031ac <HAL_DMA_Abort_IT+0x17c>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a26      	ldr	r2, [pc, #152]	; (80031e8 <HAL_DMA_Abort_IT+0x1b8>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d02c      	beq.n	80031ac <HAL_DMA_Abort_IT+0x17c>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a25      	ldr	r2, [pc, #148]	; (80031ec <HAL_DMA_Abort_IT+0x1bc>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d027      	beq.n	80031ac <HAL_DMA_Abort_IT+0x17c>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a23      	ldr	r2, [pc, #140]	; (80031f0 <HAL_DMA_Abort_IT+0x1c0>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d022      	beq.n	80031ac <HAL_DMA_Abort_IT+0x17c>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a22      	ldr	r2, [pc, #136]	; (80031f4 <HAL_DMA_Abort_IT+0x1c4>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d01d      	beq.n	80031ac <HAL_DMA_Abort_IT+0x17c>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a20      	ldr	r2, [pc, #128]	; (80031f8 <HAL_DMA_Abort_IT+0x1c8>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d018      	beq.n	80031ac <HAL_DMA_Abort_IT+0x17c>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a1f      	ldr	r2, [pc, #124]	; (80031fc <HAL_DMA_Abort_IT+0x1cc>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d013      	beq.n	80031ac <HAL_DMA_Abort_IT+0x17c>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a1d      	ldr	r2, [pc, #116]	; (8003200 <HAL_DMA_Abort_IT+0x1d0>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d00e      	beq.n	80031ac <HAL_DMA_Abort_IT+0x17c>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a1c      	ldr	r2, [pc, #112]	; (8003204 <HAL_DMA_Abort_IT+0x1d4>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d009      	beq.n	80031ac <HAL_DMA_Abort_IT+0x17c>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a1a      	ldr	r2, [pc, #104]	; (8003208 <HAL_DMA_Abort_IT+0x1d8>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d004      	beq.n	80031ac <HAL_DMA_Abort_IT+0x17c>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a19      	ldr	r2, [pc, #100]	; (800320c <HAL_DMA_Abort_IT+0x1dc>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d108      	bne.n	80031be <HAL_DMA_Abort_IT+0x18e>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0201 	bic.w	r2, r2, #1
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	e178      	b.n	80034b0 <HAL_DMA_Abort_IT+0x480>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 0201 	bic.w	r2, r2, #1
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	e16f      	b.n	80034b0 <HAL_DMA_Abort_IT+0x480>
 80031d0:	40020010 	.word	0x40020010
 80031d4:	40020028 	.word	0x40020028
 80031d8:	40020040 	.word	0x40020040
 80031dc:	40020058 	.word	0x40020058
 80031e0:	40020070 	.word	0x40020070
 80031e4:	40020088 	.word	0x40020088
 80031e8:	400200a0 	.word	0x400200a0
 80031ec:	400200b8 	.word	0x400200b8
 80031f0:	40020410 	.word	0x40020410
 80031f4:	40020428 	.word	0x40020428
 80031f8:	40020440 	.word	0x40020440
 80031fc:	40020458 	.word	0x40020458
 8003200:	40020470 	.word	0x40020470
 8003204:	40020488 	.word	0x40020488
 8003208:	400204a0 	.word	0x400204a0
 800320c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 020e 	bic.w	r2, r2, #14
 800321e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a6c      	ldr	r2, [pc, #432]	; (80033d8 <HAL_DMA_Abort_IT+0x3a8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d04a      	beq.n	80032c0 <HAL_DMA_Abort_IT+0x290>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a6b      	ldr	r2, [pc, #428]	; (80033dc <HAL_DMA_Abort_IT+0x3ac>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d045      	beq.n	80032c0 <HAL_DMA_Abort_IT+0x290>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a69      	ldr	r2, [pc, #420]	; (80033e0 <HAL_DMA_Abort_IT+0x3b0>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d040      	beq.n	80032c0 <HAL_DMA_Abort_IT+0x290>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a68      	ldr	r2, [pc, #416]	; (80033e4 <HAL_DMA_Abort_IT+0x3b4>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d03b      	beq.n	80032c0 <HAL_DMA_Abort_IT+0x290>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a66      	ldr	r2, [pc, #408]	; (80033e8 <HAL_DMA_Abort_IT+0x3b8>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d036      	beq.n	80032c0 <HAL_DMA_Abort_IT+0x290>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a65      	ldr	r2, [pc, #404]	; (80033ec <HAL_DMA_Abort_IT+0x3bc>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d031      	beq.n	80032c0 <HAL_DMA_Abort_IT+0x290>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a63      	ldr	r2, [pc, #396]	; (80033f0 <HAL_DMA_Abort_IT+0x3c0>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d02c      	beq.n	80032c0 <HAL_DMA_Abort_IT+0x290>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a62      	ldr	r2, [pc, #392]	; (80033f4 <HAL_DMA_Abort_IT+0x3c4>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d027      	beq.n	80032c0 <HAL_DMA_Abort_IT+0x290>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a60      	ldr	r2, [pc, #384]	; (80033f8 <HAL_DMA_Abort_IT+0x3c8>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d022      	beq.n	80032c0 <HAL_DMA_Abort_IT+0x290>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a5f      	ldr	r2, [pc, #380]	; (80033fc <HAL_DMA_Abort_IT+0x3cc>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d01d      	beq.n	80032c0 <HAL_DMA_Abort_IT+0x290>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a5d      	ldr	r2, [pc, #372]	; (8003400 <HAL_DMA_Abort_IT+0x3d0>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d018      	beq.n	80032c0 <HAL_DMA_Abort_IT+0x290>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a5c      	ldr	r2, [pc, #368]	; (8003404 <HAL_DMA_Abort_IT+0x3d4>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d013      	beq.n	80032c0 <HAL_DMA_Abort_IT+0x290>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a5a      	ldr	r2, [pc, #360]	; (8003408 <HAL_DMA_Abort_IT+0x3d8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d00e      	beq.n	80032c0 <HAL_DMA_Abort_IT+0x290>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a59      	ldr	r2, [pc, #356]	; (800340c <HAL_DMA_Abort_IT+0x3dc>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d009      	beq.n	80032c0 <HAL_DMA_Abort_IT+0x290>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a57      	ldr	r2, [pc, #348]	; (8003410 <HAL_DMA_Abort_IT+0x3e0>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d004      	beq.n	80032c0 <HAL_DMA_Abort_IT+0x290>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a56      	ldr	r2, [pc, #344]	; (8003414 <HAL_DMA_Abort_IT+0x3e4>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d108      	bne.n	80032d2 <HAL_DMA_Abort_IT+0x2a2>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0201 	bic.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	e007      	b.n	80032e2 <HAL_DMA_Abort_IT+0x2b2>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0201 	bic.w	r2, r2, #1
 80032e0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a3c      	ldr	r2, [pc, #240]	; (80033d8 <HAL_DMA_Abort_IT+0x3a8>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d072      	beq.n	80033d2 <HAL_DMA_Abort_IT+0x3a2>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a3a      	ldr	r2, [pc, #232]	; (80033dc <HAL_DMA_Abort_IT+0x3ac>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d06d      	beq.n	80033d2 <HAL_DMA_Abort_IT+0x3a2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a39      	ldr	r2, [pc, #228]	; (80033e0 <HAL_DMA_Abort_IT+0x3b0>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d068      	beq.n	80033d2 <HAL_DMA_Abort_IT+0x3a2>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a37      	ldr	r2, [pc, #220]	; (80033e4 <HAL_DMA_Abort_IT+0x3b4>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d063      	beq.n	80033d2 <HAL_DMA_Abort_IT+0x3a2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a36      	ldr	r2, [pc, #216]	; (80033e8 <HAL_DMA_Abort_IT+0x3b8>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d05e      	beq.n	80033d2 <HAL_DMA_Abort_IT+0x3a2>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a34      	ldr	r2, [pc, #208]	; (80033ec <HAL_DMA_Abort_IT+0x3bc>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d059      	beq.n	80033d2 <HAL_DMA_Abort_IT+0x3a2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a33      	ldr	r2, [pc, #204]	; (80033f0 <HAL_DMA_Abort_IT+0x3c0>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d054      	beq.n	80033d2 <HAL_DMA_Abort_IT+0x3a2>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a31      	ldr	r2, [pc, #196]	; (80033f4 <HAL_DMA_Abort_IT+0x3c4>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d04f      	beq.n	80033d2 <HAL_DMA_Abort_IT+0x3a2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a30      	ldr	r2, [pc, #192]	; (80033f8 <HAL_DMA_Abort_IT+0x3c8>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d04a      	beq.n	80033d2 <HAL_DMA_Abort_IT+0x3a2>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a2e      	ldr	r2, [pc, #184]	; (80033fc <HAL_DMA_Abort_IT+0x3cc>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d045      	beq.n	80033d2 <HAL_DMA_Abort_IT+0x3a2>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a2d      	ldr	r2, [pc, #180]	; (8003400 <HAL_DMA_Abort_IT+0x3d0>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d040      	beq.n	80033d2 <HAL_DMA_Abort_IT+0x3a2>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a2b      	ldr	r2, [pc, #172]	; (8003404 <HAL_DMA_Abort_IT+0x3d4>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d03b      	beq.n	80033d2 <HAL_DMA_Abort_IT+0x3a2>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a2a      	ldr	r2, [pc, #168]	; (8003408 <HAL_DMA_Abort_IT+0x3d8>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d036      	beq.n	80033d2 <HAL_DMA_Abort_IT+0x3a2>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a28      	ldr	r2, [pc, #160]	; (800340c <HAL_DMA_Abort_IT+0x3dc>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d031      	beq.n	80033d2 <HAL_DMA_Abort_IT+0x3a2>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a27      	ldr	r2, [pc, #156]	; (8003410 <HAL_DMA_Abort_IT+0x3e0>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d02c      	beq.n	80033d2 <HAL_DMA_Abort_IT+0x3a2>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a25      	ldr	r2, [pc, #148]	; (8003414 <HAL_DMA_Abort_IT+0x3e4>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d027      	beq.n	80033d2 <HAL_DMA_Abort_IT+0x3a2>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a24      	ldr	r2, [pc, #144]	; (8003418 <HAL_DMA_Abort_IT+0x3e8>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d022      	beq.n	80033d2 <HAL_DMA_Abort_IT+0x3a2>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a22      	ldr	r2, [pc, #136]	; (800341c <HAL_DMA_Abort_IT+0x3ec>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d01d      	beq.n	80033d2 <HAL_DMA_Abort_IT+0x3a2>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a21      	ldr	r2, [pc, #132]	; (8003420 <HAL_DMA_Abort_IT+0x3f0>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d018      	beq.n	80033d2 <HAL_DMA_Abort_IT+0x3a2>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a1f      	ldr	r2, [pc, #124]	; (8003424 <HAL_DMA_Abort_IT+0x3f4>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d013      	beq.n	80033d2 <HAL_DMA_Abort_IT+0x3a2>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a1e      	ldr	r2, [pc, #120]	; (8003428 <HAL_DMA_Abort_IT+0x3f8>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d00e      	beq.n	80033d2 <HAL_DMA_Abort_IT+0x3a2>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a1c      	ldr	r2, [pc, #112]	; (800342c <HAL_DMA_Abort_IT+0x3fc>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d009      	beq.n	80033d2 <HAL_DMA_Abort_IT+0x3a2>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a1b      	ldr	r2, [pc, #108]	; (8003430 <HAL_DMA_Abort_IT+0x400>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d004      	beq.n	80033d2 <HAL_DMA_Abort_IT+0x3a2>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a19      	ldr	r2, [pc, #100]	; (8003434 <HAL_DMA_Abort_IT+0x404>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d132      	bne.n	8003438 <HAL_DMA_Abort_IT+0x408>
 80033d2:	2301      	movs	r3, #1
 80033d4:	e031      	b.n	800343a <HAL_DMA_Abort_IT+0x40a>
 80033d6:	bf00      	nop
 80033d8:	40020010 	.word	0x40020010
 80033dc:	40020028 	.word	0x40020028
 80033e0:	40020040 	.word	0x40020040
 80033e4:	40020058 	.word	0x40020058
 80033e8:	40020070 	.word	0x40020070
 80033ec:	40020088 	.word	0x40020088
 80033f0:	400200a0 	.word	0x400200a0
 80033f4:	400200b8 	.word	0x400200b8
 80033f8:	40020410 	.word	0x40020410
 80033fc:	40020428 	.word	0x40020428
 8003400:	40020440 	.word	0x40020440
 8003404:	40020458 	.word	0x40020458
 8003408:	40020470 	.word	0x40020470
 800340c:	40020488 	.word	0x40020488
 8003410:	400204a0 	.word	0x400204a0
 8003414:	400204b8 	.word	0x400204b8
 8003418:	58025408 	.word	0x58025408
 800341c:	5802541c 	.word	0x5802541c
 8003420:	58025430 	.word	0x58025430
 8003424:	58025444 	.word	0x58025444
 8003428:	58025458 	.word	0x58025458
 800342c:	5802546c 	.word	0x5802546c
 8003430:	58025480 	.word	0x58025480
 8003434:	58025494 	.word	0x58025494
 8003438:	2300      	movs	r3, #0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d028      	beq.n	8003490 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003448:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800344c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003452:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003458:	f003 031f 	and.w	r3, r3, #31
 800345c:	2201      	movs	r2, #1
 800345e:	409a      	lsls	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800346c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00c      	beq.n	8003490 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003480:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003484:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800348e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop

080034bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034bc:	b480      	push	{r7}
 80034be:	b089      	sub	sp, #36	; 0x24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80034c6:	2300      	movs	r3, #0
 80034c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80034ca:	4b89      	ldr	r3, [pc, #548]	; (80036f0 <HAL_GPIO_Init+0x234>)
 80034cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80034ce:	e194      	b.n	80037fa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	2101      	movs	r1, #1
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	fa01 f303 	lsl.w	r3, r1, r3
 80034dc:	4013      	ands	r3, r2
 80034de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 8186 	beq.w	80037f4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f003 0303 	and.w	r3, r3, #3
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d005      	beq.n	8003500 <HAL_GPIO_Init+0x44>
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 0303 	and.w	r3, r3, #3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d130      	bne.n	8003562 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	2203      	movs	r2, #3
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	43db      	mvns	r3, r3
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	4013      	ands	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	68da      	ldr	r2, [r3, #12]
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	fa02 f303 	lsl.w	r3, r2, r3
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	4313      	orrs	r3, r2
 8003528:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003536:	2201      	movs	r2, #1
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	fa02 f303 	lsl.w	r3, r2, r3
 800353e:	43db      	mvns	r3, r3
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	4013      	ands	r3, r2
 8003544:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	091b      	lsrs	r3, r3, #4
 800354c:	f003 0201 	and.w	r2, r3, #1
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	4313      	orrs	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f003 0303 	and.w	r3, r3, #3
 800356a:	2b03      	cmp	r3, #3
 800356c:	d017      	beq.n	800359e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	2203      	movs	r2, #3
 800357a:	fa02 f303 	lsl.w	r3, r2, r3
 800357e:	43db      	mvns	r3, r3
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	4013      	ands	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	689a      	ldr	r2, [r3, #8]
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	4313      	orrs	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f003 0303 	and.w	r3, r3, #3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d123      	bne.n	80035f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	08da      	lsrs	r2, r3, #3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3208      	adds	r2, #8
 80035b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	f003 0307 	and.w	r3, r3, #7
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	220f      	movs	r2, #15
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	43db      	mvns	r3, r3
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	4013      	ands	r3, r2
 80035cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	691a      	ldr	r2, [r3, #16]
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	fa02 f303 	lsl.w	r3, r2, r3
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	08da      	lsrs	r2, r3, #3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3208      	adds	r2, #8
 80035ec:	69b9      	ldr	r1, [r7, #24]
 80035ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	2203      	movs	r2, #3
 80035fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003602:	43db      	mvns	r3, r3
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	4013      	ands	r3, r2
 8003608:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f003 0203 	and.w	r2, r3, #3
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	4313      	orrs	r3, r2
 800361e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 80e0 	beq.w	80037f4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003634:	4b2f      	ldr	r3, [pc, #188]	; (80036f4 <HAL_GPIO_Init+0x238>)
 8003636:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800363a:	4a2e      	ldr	r2, [pc, #184]	; (80036f4 <HAL_GPIO_Init+0x238>)
 800363c:	f043 0302 	orr.w	r3, r3, #2
 8003640:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8003644:	4b2b      	ldr	r3, [pc, #172]	; (80036f4 <HAL_GPIO_Init+0x238>)
 8003646:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003652:	4a29      	ldr	r2, [pc, #164]	; (80036f8 <HAL_GPIO_Init+0x23c>)
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	089b      	lsrs	r3, r3, #2
 8003658:	3302      	adds	r3, #2
 800365a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800365e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	f003 0303 	and.w	r3, r3, #3
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	220f      	movs	r2, #15
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	43db      	mvns	r3, r3
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	4013      	ands	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a20      	ldr	r2, [pc, #128]	; (80036fc <HAL_GPIO_Init+0x240>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d052      	beq.n	8003724 <HAL_GPIO_Init+0x268>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a1f      	ldr	r2, [pc, #124]	; (8003700 <HAL_GPIO_Init+0x244>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d031      	beq.n	80036ea <HAL_GPIO_Init+0x22e>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a1e      	ldr	r2, [pc, #120]	; (8003704 <HAL_GPIO_Init+0x248>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d02b      	beq.n	80036e6 <HAL_GPIO_Init+0x22a>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a1d      	ldr	r2, [pc, #116]	; (8003708 <HAL_GPIO_Init+0x24c>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d025      	beq.n	80036e2 <HAL_GPIO_Init+0x226>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a1c      	ldr	r2, [pc, #112]	; (800370c <HAL_GPIO_Init+0x250>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d01f      	beq.n	80036de <HAL_GPIO_Init+0x222>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a1b      	ldr	r2, [pc, #108]	; (8003710 <HAL_GPIO_Init+0x254>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d019      	beq.n	80036da <HAL_GPIO_Init+0x21e>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a1a      	ldr	r2, [pc, #104]	; (8003714 <HAL_GPIO_Init+0x258>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d013      	beq.n	80036d6 <HAL_GPIO_Init+0x21a>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a19      	ldr	r2, [pc, #100]	; (8003718 <HAL_GPIO_Init+0x25c>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d00d      	beq.n	80036d2 <HAL_GPIO_Init+0x216>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a18      	ldr	r2, [pc, #96]	; (800371c <HAL_GPIO_Init+0x260>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d007      	beq.n	80036ce <HAL_GPIO_Init+0x212>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a17      	ldr	r2, [pc, #92]	; (8003720 <HAL_GPIO_Init+0x264>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d101      	bne.n	80036ca <HAL_GPIO_Init+0x20e>
 80036c6:	2309      	movs	r3, #9
 80036c8:	e02d      	b.n	8003726 <HAL_GPIO_Init+0x26a>
 80036ca:	230a      	movs	r3, #10
 80036cc:	e02b      	b.n	8003726 <HAL_GPIO_Init+0x26a>
 80036ce:	2308      	movs	r3, #8
 80036d0:	e029      	b.n	8003726 <HAL_GPIO_Init+0x26a>
 80036d2:	2307      	movs	r3, #7
 80036d4:	e027      	b.n	8003726 <HAL_GPIO_Init+0x26a>
 80036d6:	2306      	movs	r3, #6
 80036d8:	e025      	b.n	8003726 <HAL_GPIO_Init+0x26a>
 80036da:	2305      	movs	r3, #5
 80036dc:	e023      	b.n	8003726 <HAL_GPIO_Init+0x26a>
 80036de:	2304      	movs	r3, #4
 80036e0:	e021      	b.n	8003726 <HAL_GPIO_Init+0x26a>
 80036e2:	2303      	movs	r3, #3
 80036e4:	e01f      	b.n	8003726 <HAL_GPIO_Init+0x26a>
 80036e6:	2302      	movs	r3, #2
 80036e8:	e01d      	b.n	8003726 <HAL_GPIO_Init+0x26a>
 80036ea:	2301      	movs	r3, #1
 80036ec:	e01b      	b.n	8003726 <HAL_GPIO_Init+0x26a>
 80036ee:	bf00      	nop
 80036f0:	58000080 	.word	0x58000080
 80036f4:	58024400 	.word	0x58024400
 80036f8:	58000400 	.word	0x58000400
 80036fc:	58020000 	.word	0x58020000
 8003700:	58020400 	.word	0x58020400
 8003704:	58020800 	.word	0x58020800
 8003708:	58020c00 	.word	0x58020c00
 800370c:	58021000 	.word	0x58021000
 8003710:	58021400 	.word	0x58021400
 8003714:	58021800 	.word	0x58021800
 8003718:	58021c00 	.word	0x58021c00
 800371c:	58022000 	.word	0x58022000
 8003720:	58022400 	.word	0x58022400
 8003724:	2300      	movs	r3, #0
 8003726:	69fa      	ldr	r2, [r7, #28]
 8003728:	f002 0203 	and.w	r2, r2, #3
 800372c:	0092      	lsls	r2, r2, #2
 800372e:	4093      	lsls	r3, r2
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	4313      	orrs	r3, r2
 8003734:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003736:	4938      	ldr	r1, [pc, #224]	; (8003818 <HAL_GPIO_Init+0x35c>)
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	089b      	lsrs	r3, r3, #2
 800373c:	3302      	adds	r3, #2
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	43db      	mvns	r3, r3
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	4013      	ands	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	4313      	orrs	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800376a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	43db      	mvns	r3, r3
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	4013      	ands	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	4313      	orrs	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003798:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	43db      	mvns	r3, r3
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	4013      	ands	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	43db      	mvns	r3, r3
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	4013      	ands	r3, r2
 80037d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	3301      	adds	r3, #1
 80037f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	fa22 f303 	lsr.w	r3, r2, r3
 8003804:	2b00      	cmp	r3, #0
 8003806:	f47f ae63 	bne.w	80034d0 <HAL_GPIO_Init+0x14>
  }
}
 800380a:	bf00      	nop
 800380c:	bf00      	nop
 800380e:	3724      	adds	r7, #36	; 0x24
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	58000400 	.word	0x58000400

0800381c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	460b      	mov	r3, r1
 8003826:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	691a      	ldr	r2, [r3, #16]
 800382c:	887b      	ldrh	r3, [r7, #2]
 800382e:	4013      	ands	r3, r2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d002      	beq.n	800383a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003834:	2301      	movs	r3, #1
 8003836:	73fb      	strb	r3, [r7, #15]
 8003838:	e001      	b.n	800383e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800383a:	2300      	movs	r3, #0
 800383c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800383e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3714      	adds	r7, #20
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	460b      	mov	r3, r1
 8003856:	807b      	strh	r3, [r7, #2]
 8003858:	4613      	mov	r3, r2
 800385a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800385c:	787b      	ldrb	r3, [r7, #1]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003862:	887a      	ldrh	r2, [r7, #2]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003868:	e003      	b.n	8003872 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800386a:	887b      	ldrh	r3, [r7, #2]
 800386c:	041a      	lsls	r2, r3, #16
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	619a      	str	r2, [r3, #24]
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
	...

08003880 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003888:	4b29      	ldr	r3, [pc, #164]	; (8003930 <HAL_PWREx_ConfigSupply+0xb0>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	2b06      	cmp	r3, #6
 8003892:	d00a      	beq.n	80038aa <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003894:	4b26      	ldr	r3, [pc, #152]	; (8003930 <HAL_PWREx_ConfigSupply+0xb0>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d001      	beq.n	80038a6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e040      	b.n	8003928 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80038a6:	2300      	movs	r3, #0
 80038a8:	e03e      	b.n	8003928 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80038aa:	4b21      	ldr	r3, [pc, #132]	; (8003930 <HAL_PWREx_ConfigSupply+0xb0>)
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80038b2:	491f      	ldr	r1, [pc, #124]	; (8003930 <HAL_PWREx_ConfigSupply+0xb0>)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80038ba:	f7fe ff7f 	bl	80027bc <HAL_GetTick>
 80038be:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80038c0:	e009      	b.n	80038d6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80038c2:	f7fe ff7b 	bl	80027bc <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038d0:	d901      	bls.n	80038d6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e028      	b.n	8003928 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80038d6:	4b16      	ldr	r3, [pc, #88]	; (8003930 <HAL_PWREx_ConfigSupply+0xb0>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038e2:	d1ee      	bne.n	80038c2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b1e      	cmp	r3, #30
 80038e8:	d008      	beq.n	80038fc <HAL_PWREx_ConfigSupply+0x7c>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b2e      	cmp	r3, #46	; 0x2e
 80038ee:	d005      	beq.n	80038fc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b1d      	cmp	r3, #29
 80038f4:	d002      	beq.n	80038fc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b2d      	cmp	r3, #45	; 0x2d
 80038fa:	d114      	bne.n	8003926 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80038fc:	f7fe ff5e 	bl	80027bc <HAL_GetTick>
 8003900:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003902:	e009      	b.n	8003918 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003904:	f7fe ff5a 	bl	80027bc <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003912:	d901      	bls.n	8003918 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e007      	b.n	8003928 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003918:	4b05      	ldr	r3, [pc, #20]	; (8003930 <HAL_PWREx_ConfigSupply+0xb0>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003924:	d1ee      	bne.n	8003904 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	58024800 	.word	0x58024800

08003934 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b08c      	sub	sp, #48	; 0x30
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d102      	bne.n	8003948 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	f000 bc1f 	b.w	8004186 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	2b00      	cmp	r3, #0
 8003952:	f000 80b3 	beq.w	8003abc <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003956:	4b95      	ldr	r3, [pc, #596]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800395e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003960:	4b92      	ldr	r3, [pc, #584]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 8003962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003964:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003968:	2b10      	cmp	r3, #16
 800396a:	d007      	beq.n	800397c <HAL_RCC_OscConfig+0x48>
 800396c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396e:	2b18      	cmp	r3, #24
 8003970:	d112      	bne.n	8003998 <HAL_RCC_OscConfig+0x64>
 8003972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003974:	f003 0303 	and.w	r3, r3, #3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d10d      	bne.n	8003998 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800397c:	4b8b      	ldr	r3, [pc, #556]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 8098 	beq.w	8003aba <HAL_RCC_OscConfig+0x186>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	f040 8093 	bne.w	8003aba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e3f6      	b.n	8004186 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a0:	d106      	bne.n	80039b0 <HAL_RCC_OscConfig+0x7c>
 80039a2:	4b82      	ldr	r3, [pc, #520]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a81      	ldr	r2, [pc, #516]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 80039a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ac:	6013      	str	r3, [r2, #0]
 80039ae:	e058      	b.n	8003a62 <HAL_RCC_OscConfig+0x12e>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d112      	bne.n	80039de <HAL_RCC_OscConfig+0xaa>
 80039b8:	4b7c      	ldr	r3, [pc, #496]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a7b      	ldr	r2, [pc, #492]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 80039be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	4b79      	ldr	r3, [pc, #484]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a78      	ldr	r2, [pc, #480]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 80039ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80039ce:	6013      	str	r3, [r2, #0]
 80039d0:	4b76      	ldr	r3, [pc, #472]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a75      	ldr	r2, [pc, #468]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 80039d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039da:	6013      	str	r3, [r2, #0]
 80039dc:	e041      	b.n	8003a62 <HAL_RCC_OscConfig+0x12e>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039e6:	d112      	bne.n	8003a0e <HAL_RCC_OscConfig+0xda>
 80039e8:	4b70      	ldr	r3, [pc, #448]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a6f      	ldr	r2, [pc, #444]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 80039ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039f2:	6013      	str	r3, [r2, #0]
 80039f4:	4b6d      	ldr	r3, [pc, #436]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a6c      	ldr	r2, [pc, #432]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 80039fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80039fe:	6013      	str	r3, [r2, #0]
 8003a00:	4b6a      	ldr	r3, [pc, #424]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a69      	ldr	r2, [pc, #420]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 8003a06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a0a:	6013      	str	r3, [r2, #0]
 8003a0c:	e029      	b.n	8003a62 <HAL_RCC_OscConfig+0x12e>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003a16:	d112      	bne.n	8003a3e <HAL_RCC_OscConfig+0x10a>
 8003a18:	4b64      	ldr	r3, [pc, #400]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a63      	ldr	r2, [pc, #396]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 8003a1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a22:	6013      	str	r3, [r2, #0]
 8003a24:	4b61      	ldr	r3, [pc, #388]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a60      	ldr	r2, [pc, #384]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 8003a2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a2e:	6013      	str	r3, [r2, #0]
 8003a30:	4b5e      	ldr	r3, [pc, #376]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a5d      	ldr	r2, [pc, #372]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 8003a36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a3a:	6013      	str	r3, [r2, #0]
 8003a3c:	e011      	b.n	8003a62 <HAL_RCC_OscConfig+0x12e>
 8003a3e:	4b5b      	ldr	r3, [pc, #364]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a5a      	ldr	r2, [pc, #360]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 8003a44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	4b58      	ldr	r3, [pc, #352]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a57      	ldr	r2, [pc, #348]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 8003a50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a54:	6013      	str	r3, [r2, #0]
 8003a56:	4b55      	ldr	r3, [pc, #340]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a54      	ldr	r2, [pc, #336]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 8003a5c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003a60:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d013      	beq.n	8003a92 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6a:	f7fe fea7 	bl	80027bc <HAL_GetTick>
 8003a6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a70:	e008      	b.n	8003a84 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a72:	f7fe fea3 	bl	80027bc <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b64      	cmp	r3, #100	; 0x64
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e380      	b.n	8004186 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a84:	4b49      	ldr	r3, [pc, #292]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0f0      	beq.n	8003a72 <HAL_RCC_OscConfig+0x13e>
 8003a90:	e014      	b.n	8003abc <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a92:	f7fe fe93 	bl	80027bc <HAL_GetTick>
 8003a96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a98:	e008      	b.n	8003aac <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a9a:	f7fe fe8f 	bl	80027bc <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b64      	cmp	r3, #100	; 0x64
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e36c      	b.n	8004186 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003aac:	4b3f      	ldr	r3, [pc, #252]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1f0      	bne.n	8003a9a <HAL_RCC_OscConfig+0x166>
 8003ab8:	e000      	b.n	8003abc <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aba:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 808c 	beq.w	8003be2 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003aca:	4b38      	ldr	r3, [pc, #224]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ad2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ad4:	4b35      	ldr	r3, [pc, #212]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 8003ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad8:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d007      	beq.n	8003af0 <HAL_RCC_OscConfig+0x1bc>
 8003ae0:	6a3b      	ldr	r3, [r7, #32]
 8003ae2:	2b18      	cmp	r3, #24
 8003ae4:	d137      	bne.n	8003b56 <HAL_RCC_OscConfig+0x222>
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	f003 0303 	and.w	r3, r3, #3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d132      	bne.n	8003b56 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003af0:	4b2e      	ldr	r3, [pc, #184]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d005      	beq.n	8003b08 <HAL_RCC_OscConfig+0x1d4>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d101      	bne.n	8003b08 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e33e      	b.n	8004186 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b08:	4b28      	ldr	r3, [pc, #160]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f023 0219 	bic.w	r2, r3, #25
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	4925      	ldr	r1, [pc, #148]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b1a:	f7fe fe4f 	bl	80027bc <HAL_GetTick>
 8003b1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b20:	e008      	b.n	8003b34 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b22:	f7fe fe4b 	bl	80027bc <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e328      	b.n	8004186 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b34:	4b1d      	ldr	r3, [pc, #116]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0304 	and.w	r3, r3, #4
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d0f0      	beq.n	8003b22 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b40:	4b1a      	ldr	r3, [pc, #104]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	061b      	lsls	r3, r3, #24
 8003b4e:	4917      	ldr	r1, [pc, #92]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b54:	e045      	b.n	8003be2 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d028      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b5e:	4b13      	ldr	r3, [pc, #76]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f023 0219 	bic.w	r2, r3, #25
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	4910      	ldr	r1, [pc, #64]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b70:	f7fe fe24 	bl	80027bc <HAL_GetTick>
 8003b74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b78:	f7fe fe20 	bl	80027bc <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e2fd      	b.n	8004186 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b8a:	4b08      	ldr	r3, [pc, #32]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0304 	and.w	r3, r3, #4
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0f0      	beq.n	8003b78 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b96:	4b05      	ldr	r3, [pc, #20]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	061b      	lsls	r3, r3, #24
 8003ba4:	4901      	ldr	r1, [pc, #4]	; (8003bac <HAL_RCC_OscConfig+0x278>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	604b      	str	r3, [r1, #4]
 8003baa:	e01a      	b.n	8003be2 <HAL_RCC_OscConfig+0x2ae>
 8003bac:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bb0:	4b97      	ldr	r3, [pc, #604]	; (8003e10 <HAL_RCC_OscConfig+0x4dc>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a96      	ldr	r2, [pc, #600]	; (8003e10 <HAL_RCC_OscConfig+0x4dc>)
 8003bb6:	f023 0301 	bic.w	r3, r3, #1
 8003bba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbc:	f7fe fdfe 	bl	80027bc <HAL_GetTick>
 8003bc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bc4:	f7fe fdfa 	bl	80027bc <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e2d7      	b.n	8004186 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bd6:	4b8e      	ldr	r3, [pc, #568]	; (8003e10 <HAL_RCC_OscConfig+0x4dc>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0304 	and.w	r3, r3, #4
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1f0      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0310 	and.w	r3, r3, #16
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d06a      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bee:	4b88      	ldr	r3, [pc, #544]	; (8003e10 <HAL_RCC_OscConfig+0x4dc>)
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bf6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003bf8:	4b85      	ldr	r3, [pc, #532]	; (8003e10 <HAL_RCC_OscConfig+0x4dc>)
 8003bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	2b08      	cmp	r3, #8
 8003c02:	d007      	beq.n	8003c14 <HAL_RCC_OscConfig+0x2e0>
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	2b18      	cmp	r3, #24
 8003c08:	d11b      	bne.n	8003c42 <HAL_RCC_OscConfig+0x30e>
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f003 0303 	and.w	r3, r3, #3
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d116      	bne.n	8003c42 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c14:	4b7e      	ldr	r3, [pc, #504]	; (8003e10 <HAL_RCC_OscConfig+0x4dc>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d005      	beq.n	8003c2c <HAL_RCC_OscConfig+0x2f8>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	69db      	ldr	r3, [r3, #28]
 8003c24:	2b80      	cmp	r3, #128	; 0x80
 8003c26:	d001      	beq.n	8003c2c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e2ac      	b.n	8004186 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c2c:	4b78      	ldr	r3, [pc, #480]	; (8003e10 <HAL_RCC_OscConfig+0x4dc>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	061b      	lsls	r3, r3, #24
 8003c3a:	4975      	ldr	r1, [pc, #468]	; (8003e10 <HAL_RCC_OscConfig+0x4dc>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c40:	e040      	b.n	8003cc4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d023      	beq.n	8003c92 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003c4a:	4b71      	ldr	r3, [pc, #452]	; (8003e10 <HAL_RCC_OscConfig+0x4dc>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a70      	ldr	r2, [pc, #448]	; (8003e10 <HAL_RCC_OscConfig+0x4dc>)
 8003c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c56:	f7fe fdb1 	bl	80027bc <HAL_GetTick>
 8003c5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c5c:	e008      	b.n	8003c70 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c5e:	f7fe fdad 	bl	80027bc <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e28a      	b.n	8004186 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c70:	4b67      	ldr	r3, [pc, #412]	; (8003e10 <HAL_RCC_OscConfig+0x4dc>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0f0      	beq.n	8003c5e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c7c:	4b64      	ldr	r3, [pc, #400]	; (8003e10 <HAL_RCC_OscConfig+0x4dc>)
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a1b      	ldr	r3, [r3, #32]
 8003c88:	061b      	lsls	r3, r3, #24
 8003c8a:	4961      	ldr	r1, [pc, #388]	; (8003e10 <HAL_RCC_OscConfig+0x4dc>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	60cb      	str	r3, [r1, #12]
 8003c90:	e018      	b.n	8003cc4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003c92:	4b5f      	ldr	r3, [pc, #380]	; (8003e10 <HAL_RCC_OscConfig+0x4dc>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a5e      	ldr	r2, [pc, #376]	; (8003e10 <HAL_RCC_OscConfig+0x4dc>)
 8003c98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c9e:	f7fe fd8d 	bl	80027bc <HAL_GetTick>
 8003ca2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ca4:	e008      	b.n	8003cb8 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003ca6:	f7fe fd89 	bl	80027bc <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e266      	b.n	8004186 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003cb8:	4b55      	ldr	r3, [pc, #340]	; (8003e10 <HAL_RCC_OscConfig+0x4dc>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1f0      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0308 	and.w	r3, r3, #8
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d036      	beq.n	8003d3e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d019      	beq.n	8003d0c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cd8:	4b4d      	ldr	r3, [pc, #308]	; (8003e10 <HAL_RCC_OscConfig+0x4dc>)
 8003cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cdc:	4a4c      	ldr	r2, [pc, #304]	; (8003e10 <HAL_RCC_OscConfig+0x4dc>)
 8003cde:	f043 0301 	orr.w	r3, r3, #1
 8003ce2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce4:	f7fe fd6a 	bl	80027bc <HAL_GetTick>
 8003ce8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cec:	f7fe fd66 	bl	80027bc <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e243      	b.n	8004186 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cfe:	4b44      	ldr	r3, [pc, #272]	; (8003e10 <HAL_RCC_OscConfig+0x4dc>)
 8003d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0f0      	beq.n	8003cec <HAL_RCC_OscConfig+0x3b8>
 8003d0a:	e018      	b.n	8003d3e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d0c:	4b40      	ldr	r3, [pc, #256]	; (8003e10 <HAL_RCC_OscConfig+0x4dc>)
 8003d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d10:	4a3f      	ldr	r2, [pc, #252]	; (8003e10 <HAL_RCC_OscConfig+0x4dc>)
 8003d12:	f023 0301 	bic.w	r3, r3, #1
 8003d16:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d18:	f7fe fd50 	bl	80027bc <HAL_GetTick>
 8003d1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d20:	f7fe fd4c 	bl	80027bc <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e229      	b.n	8004186 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d32:	4b37      	ldr	r3, [pc, #220]	; (8003e10 <HAL_RCC_OscConfig+0x4dc>)
 8003d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1f0      	bne.n	8003d20 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0320 	and.w	r3, r3, #32
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d036      	beq.n	8003db8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d019      	beq.n	8003d86 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d52:	4b2f      	ldr	r3, [pc, #188]	; (8003e10 <HAL_RCC_OscConfig+0x4dc>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a2e      	ldr	r2, [pc, #184]	; (8003e10 <HAL_RCC_OscConfig+0x4dc>)
 8003d58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d5c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d5e:	f7fe fd2d 	bl	80027bc <HAL_GetTick>
 8003d62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d64:	e008      	b.n	8003d78 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d66:	f7fe fd29 	bl	80027bc <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d901      	bls.n	8003d78 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e206      	b.n	8004186 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d78:	4b25      	ldr	r3, [pc, #148]	; (8003e10 <HAL_RCC_OscConfig+0x4dc>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d0f0      	beq.n	8003d66 <HAL_RCC_OscConfig+0x432>
 8003d84:	e018      	b.n	8003db8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d86:	4b22      	ldr	r3, [pc, #136]	; (8003e10 <HAL_RCC_OscConfig+0x4dc>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a21      	ldr	r2, [pc, #132]	; (8003e10 <HAL_RCC_OscConfig+0x4dc>)
 8003d8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d90:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d92:	f7fe fd13 	bl	80027bc <HAL_GetTick>
 8003d96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d98:	e008      	b.n	8003dac <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d9a:	f7fe fd0f 	bl	80027bc <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d901      	bls.n	8003dac <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e1ec      	b.n	8004186 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003dac:	4b18      	ldr	r3, [pc, #96]	; (8003e10 <HAL_RCC_OscConfig+0x4dc>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1f0      	bne.n	8003d9a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 80af 	beq.w	8003f24 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003dc6:	4b13      	ldr	r3, [pc, #76]	; (8003e14 <HAL_RCC_OscConfig+0x4e0>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a12      	ldr	r2, [pc, #72]	; (8003e14 <HAL_RCC_OscConfig+0x4e0>)
 8003dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dd2:	f7fe fcf3 	bl	80027bc <HAL_GetTick>
 8003dd6:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dd8:	e008      	b.n	8003dec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dda:	f7fe fcef 	bl	80027bc <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b64      	cmp	r3, #100	; 0x64
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e1cc      	b.n	8004186 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dec:	4b09      	ldr	r3, [pc, #36]	; (8003e14 <HAL_RCC_OscConfig+0x4e0>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0f0      	beq.n	8003dda <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d10b      	bne.n	8003e18 <HAL_RCC_OscConfig+0x4e4>
 8003e00:	4b03      	ldr	r3, [pc, #12]	; (8003e10 <HAL_RCC_OscConfig+0x4dc>)
 8003e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e04:	4a02      	ldr	r2, [pc, #8]	; (8003e10 <HAL_RCC_OscConfig+0x4dc>)
 8003e06:	f043 0301 	orr.w	r3, r3, #1
 8003e0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e0c:	e05b      	b.n	8003ec6 <HAL_RCC_OscConfig+0x592>
 8003e0e:	bf00      	nop
 8003e10:	58024400 	.word	0x58024400
 8003e14:	58024800 	.word	0x58024800
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d112      	bne.n	8003e46 <HAL_RCC_OscConfig+0x512>
 8003e20:	4b9d      	ldr	r3, [pc, #628]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8003e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e24:	4a9c      	ldr	r2, [pc, #624]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8003e26:	f023 0301 	bic.w	r3, r3, #1
 8003e2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e2c:	4b9a      	ldr	r3, [pc, #616]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8003e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e30:	4a99      	ldr	r2, [pc, #612]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8003e32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e36:	6713      	str	r3, [r2, #112]	; 0x70
 8003e38:	4b97      	ldr	r3, [pc, #604]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8003e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3c:	4a96      	ldr	r2, [pc, #600]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8003e3e:	f023 0304 	bic.w	r3, r3, #4
 8003e42:	6713      	str	r3, [r2, #112]	; 0x70
 8003e44:	e03f      	b.n	8003ec6 <HAL_RCC_OscConfig+0x592>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	2b05      	cmp	r3, #5
 8003e4c:	d112      	bne.n	8003e74 <HAL_RCC_OscConfig+0x540>
 8003e4e:	4b92      	ldr	r3, [pc, #584]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8003e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e52:	4a91      	ldr	r2, [pc, #580]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8003e54:	f043 0304 	orr.w	r3, r3, #4
 8003e58:	6713      	str	r3, [r2, #112]	; 0x70
 8003e5a:	4b8f      	ldr	r3, [pc, #572]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8003e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5e:	4a8e      	ldr	r2, [pc, #568]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8003e60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e64:	6713      	str	r3, [r2, #112]	; 0x70
 8003e66:	4b8c      	ldr	r3, [pc, #560]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8003e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6a:	4a8b      	ldr	r2, [pc, #556]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8003e6c:	f043 0301 	orr.w	r3, r3, #1
 8003e70:	6713      	str	r3, [r2, #112]	; 0x70
 8003e72:	e028      	b.n	8003ec6 <HAL_RCC_OscConfig+0x592>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	2b85      	cmp	r3, #133	; 0x85
 8003e7a:	d112      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x56e>
 8003e7c:	4b86      	ldr	r3, [pc, #536]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8003e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e80:	4a85      	ldr	r2, [pc, #532]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8003e82:	f043 0304 	orr.w	r3, r3, #4
 8003e86:	6713      	str	r3, [r2, #112]	; 0x70
 8003e88:	4b83      	ldr	r3, [pc, #524]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8003e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8c:	4a82      	ldr	r2, [pc, #520]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8003e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e92:	6713      	str	r3, [r2, #112]	; 0x70
 8003e94:	4b80      	ldr	r3, [pc, #512]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8003e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e98:	4a7f      	ldr	r2, [pc, #508]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8003e9a:	f043 0301 	orr.w	r3, r3, #1
 8003e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea0:	e011      	b.n	8003ec6 <HAL_RCC_OscConfig+0x592>
 8003ea2:	4b7d      	ldr	r3, [pc, #500]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8003ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea6:	4a7c      	ldr	r2, [pc, #496]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8003ea8:	f023 0301 	bic.w	r3, r3, #1
 8003eac:	6713      	str	r3, [r2, #112]	; 0x70
 8003eae:	4b7a      	ldr	r3, [pc, #488]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8003eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb2:	4a79      	ldr	r2, [pc, #484]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8003eb4:	f023 0304 	bic.w	r3, r3, #4
 8003eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eba:	4b77      	ldr	r3, [pc, #476]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8003ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebe:	4a76      	ldr	r2, [pc, #472]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8003ec0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ec4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d015      	beq.n	8003efa <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ece:	f7fe fc75 	bl	80027bc <HAL_GetTick>
 8003ed2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ed4:	e00a      	b.n	8003eec <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ed6:	f7fe fc71 	bl	80027bc <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e14c      	b.n	8004186 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003eec:	4b6a      	ldr	r3, [pc, #424]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8003eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d0ee      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x5a2>
 8003ef8:	e014      	b.n	8003f24 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003efa:	f7fe fc5f 	bl	80027bc <HAL_GetTick>
 8003efe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f00:	e00a      	b.n	8003f18 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f02:	f7fe fc5b 	bl	80027bc <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e136      	b.n	8004186 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f18:	4b5f      	ldr	r3, [pc, #380]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8003f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1ee      	bne.n	8003f02 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f000 812b 	beq.w	8004184 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003f2e:	4b5a      	ldr	r3, [pc, #360]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f36:	2b18      	cmp	r3, #24
 8003f38:	f000 80bb 	beq.w	80040b2 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	f040 8095 	bne.w	8004070 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f46:	4b54      	ldr	r3, [pc, #336]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a53      	ldr	r2, [pc, #332]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8003f4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f52:	f7fe fc33 	bl	80027bc <HAL_GetTick>
 8003f56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f5a:	f7fe fc2f 	bl	80027bc <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e10c      	b.n	8004186 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f6c:	4b4a      	ldr	r3, [pc, #296]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1f0      	bne.n	8003f5a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f78:	4b47      	ldr	r3, [pc, #284]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8003f7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f7c:	4b47      	ldr	r3, [pc, #284]	; (800409c <HAL_RCC_OscConfig+0x768>)
 8003f7e:	4013      	ands	r3, r2
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003f88:	0112      	lsls	r2, r2, #4
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	4942      	ldr	r1, [pc, #264]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	628b      	str	r3, [r1, #40]	; 0x28
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f96:	3b01      	subs	r3, #1
 8003f98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	025b      	lsls	r3, r3, #9
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fac:	3b01      	subs	r3, #1
 8003fae:	041b      	lsls	r3, r3, #16
 8003fb0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003fb4:	431a      	orrs	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	061b      	lsls	r3, r3, #24
 8003fbe:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003fc2:	4935      	ldr	r1, [pc, #212]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003fc8:	4b33      	ldr	r3, [pc, #204]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8003fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fcc:	4a32      	ldr	r2, [pc, #200]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8003fce:	f023 0301 	bic.w	r3, r3, #1
 8003fd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003fd4:	4b30      	ldr	r3, [pc, #192]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8003fd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fd8:	4b31      	ldr	r3, [pc, #196]	; (80040a0 <HAL_RCC_OscConfig+0x76c>)
 8003fda:	4013      	ands	r3, r2
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003fe0:	00d2      	lsls	r2, r2, #3
 8003fe2:	492d      	ldr	r1, [pc, #180]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003fe8:	4b2b      	ldr	r3, [pc, #172]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8003fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fec:	f023 020c 	bic.w	r2, r3, #12
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff4:	4928      	ldr	r1, [pc, #160]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003ffa:	4b27      	ldr	r3, [pc, #156]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8003ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffe:	f023 0202 	bic.w	r2, r3, #2
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004006:	4924      	ldr	r1, [pc, #144]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8004008:	4313      	orrs	r3, r2
 800400a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800400c:	4b22      	ldr	r3, [pc, #136]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 800400e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004010:	4a21      	ldr	r2, [pc, #132]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8004012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004016:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004018:	4b1f      	ldr	r3, [pc, #124]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 800401a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401c:	4a1e      	ldr	r2, [pc, #120]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 800401e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004022:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004024:	4b1c      	ldr	r3, [pc, #112]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8004026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004028:	4a1b      	ldr	r2, [pc, #108]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 800402a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800402e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004030:	4b19      	ldr	r3, [pc, #100]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8004032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004034:	4a18      	ldr	r2, [pc, #96]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8004036:	f043 0301 	orr.w	r3, r3, #1
 800403a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800403c:	4b16      	ldr	r3, [pc, #88]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a15      	ldr	r2, [pc, #84]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8004042:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004046:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004048:	f7fe fbb8 	bl	80027bc <HAL_GetTick>
 800404c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004050:	f7fe fbb4 	bl	80027bc <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e091      	b.n	8004186 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004062:	4b0d      	ldr	r3, [pc, #52]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d0f0      	beq.n	8004050 <HAL_RCC_OscConfig+0x71c>
 800406e:	e089      	b.n	8004184 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004070:	4b09      	ldr	r3, [pc, #36]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a08      	ldr	r2, [pc, #32]	; (8004098 <HAL_RCC_OscConfig+0x764>)
 8004076:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800407a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800407c:	f7fe fb9e 	bl	80027bc <HAL_GetTick>
 8004080:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004082:	e00f      	b.n	80040a4 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004084:	f7fe fb9a 	bl	80027bc <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d908      	bls.n	80040a4 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e077      	b.n	8004186 <HAL_RCC_OscConfig+0x852>
 8004096:	bf00      	nop
 8004098:	58024400 	.word	0x58024400
 800409c:	fffffc0c 	.word	0xfffffc0c
 80040a0:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040a4:	4b3a      	ldr	r3, [pc, #232]	; (8004190 <HAL_RCC_OscConfig+0x85c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1e9      	bne.n	8004084 <HAL_RCC_OscConfig+0x750>
 80040b0:	e068      	b.n	8004184 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80040b2:	4b37      	ldr	r3, [pc, #220]	; (8004190 <HAL_RCC_OscConfig+0x85c>)
 80040b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80040b8:	4b35      	ldr	r3, [pc, #212]	; (8004190 <HAL_RCC_OscConfig+0x85c>)
 80040ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040bc:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d031      	beq.n	800412a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	f003 0203 	and.w	r2, r3, #3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d12a      	bne.n	800412a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	091b      	lsrs	r3, r3, #4
 80040d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d122      	bne.n	800412a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ee:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d11a      	bne.n	800412a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	0a5b      	lsrs	r3, r3, #9
 80040f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004100:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004102:	429a      	cmp	r2, r3
 8004104:	d111      	bne.n	800412a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	0c1b      	lsrs	r3, r3, #16
 800410a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004112:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004114:	429a      	cmp	r2, r3
 8004116:	d108      	bne.n	800412a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	0e1b      	lsrs	r3, r3, #24
 800411c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004124:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004126:	429a      	cmp	r2, r3
 8004128:	d001      	beq.n	800412e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e02b      	b.n	8004186 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800412e:	4b18      	ldr	r3, [pc, #96]	; (8004190 <HAL_RCC_OscConfig+0x85c>)
 8004130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004132:	08db      	lsrs	r3, r3, #3
 8004134:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004138:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	429a      	cmp	r2, r3
 8004142:	d01f      	beq.n	8004184 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004144:	4b12      	ldr	r3, [pc, #72]	; (8004190 <HAL_RCC_OscConfig+0x85c>)
 8004146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004148:	4a11      	ldr	r2, [pc, #68]	; (8004190 <HAL_RCC_OscConfig+0x85c>)
 800414a:	f023 0301 	bic.w	r3, r3, #1
 800414e:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004150:	f7fe fb34 	bl	80027bc <HAL_GetTick>
 8004154:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004156:	bf00      	nop
 8004158:	f7fe fb30 	bl	80027bc <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004160:	4293      	cmp	r3, r2
 8004162:	d0f9      	beq.n	8004158 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004164:	4b0a      	ldr	r3, [pc, #40]	; (8004190 <HAL_RCC_OscConfig+0x85c>)
 8004166:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004168:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <HAL_RCC_OscConfig+0x860>)
 800416a:	4013      	ands	r3, r2
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004170:	00d2      	lsls	r2, r2, #3
 8004172:	4907      	ldr	r1, [pc, #28]	; (8004190 <HAL_RCC_OscConfig+0x85c>)
 8004174:	4313      	orrs	r3, r2
 8004176:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004178:	4b05      	ldr	r3, [pc, #20]	; (8004190 <HAL_RCC_OscConfig+0x85c>)
 800417a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417c:	4a04      	ldr	r2, [pc, #16]	; (8004190 <HAL_RCC_OscConfig+0x85c>)
 800417e:	f043 0301 	orr.w	r3, r3, #1
 8004182:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3730      	adds	r7, #48	; 0x30
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	58024400 	.word	0x58024400
 8004194:	ffff0007 	.word	0xffff0007

08004198 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d101      	bne.n	80041ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e19c      	b.n	80044e6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041ac:	4b8a      	ldr	r3, [pc, #552]	; (80043d8 <HAL_RCC_ClockConfig+0x240>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 030f 	and.w	r3, r3, #15
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d910      	bls.n	80041dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ba:	4b87      	ldr	r3, [pc, #540]	; (80043d8 <HAL_RCC_ClockConfig+0x240>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f023 020f 	bic.w	r2, r3, #15
 80041c2:	4985      	ldr	r1, [pc, #532]	; (80043d8 <HAL_RCC_ClockConfig+0x240>)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ca:	4b83      	ldr	r3, [pc, #524]	; (80043d8 <HAL_RCC_ClockConfig+0x240>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 030f 	and.w	r3, r3, #15
 80041d2:	683a      	ldr	r2, [r7, #0]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d001      	beq.n	80041dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e184      	b.n	80044e6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d010      	beq.n	800420a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	691a      	ldr	r2, [r3, #16]
 80041ec:	4b7b      	ldr	r3, [pc, #492]	; (80043dc <HAL_RCC_ClockConfig+0x244>)
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d908      	bls.n	800420a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80041f8:	4b78      	ldr	r3, [pc, #480]	; (80043dc <HAL_RCC_ClockConfig+0x244>)
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	4975      	ldr	r1, [pc, #468]	; (80043dc <HAL_RCC_ClockConfig+0x244>)
 8004206:	4313      	orrs	r3, r2
 8004208:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0308 	and.w	r3, r3, #8
 8004212:	2b00      	cmp	r3, #0
 8004214:	d010      	beq.n	8004238 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	695a      	ldr	r2, [r3, #20]
 800421a:	4b70      	ldr	r3, [pc, #448]	; (80043dc <HAL_RCC_ClockConfig+0x244>)
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004222:	429a      	cmp	r2, r3
 8004224:	d908      	bls.n	8004238 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004226:	4b6d      	ldr	r3, [pc, #436]	; (80043dc <HAL_RCC_ClockConfig+0x244>)
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	496a      	ldr	r1, [pc, #424]	; (80043dc <HAL_RCC_ClockConfig+0x244>)
 8004234:	4313      	orrs	r3, r2
 8004236:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0310 	and.w	r3, r3, #16
 8004240:	2b00      	cmp	r3, #0
 8004242:	d010      	beq.n	8004266 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	699a      	ldr	r2, [r3, #24]
 8004248:	4b64      	ldr	r3, [pc, #400]	; (80043dc <HAL_RCC_ClockConfig+0x244>)
 800424a:	69db      	ldr	r3, [r3, #28]
 800424c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004250:	429a      	cmp	r2, r3
 8004252:	d908      	bls.n	8004266 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004254:	4b61      	ldr	r3, [pc, #388]	; (80043dc <HAL_RCC_ClockConfig+0x244>)
 8004256:	69db      	ldr	r3, [r3, #28]
 8004258:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	495e      	ldr	r1, [pc, #376]	; (80043dc <HAL_RCC_ClockConfig+0x244>)
 8004262:	4313      	orrs	r3, r2
 8004264:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0320 	and.w	r3, r3, #32
 800426e:	2b00      	cmp	r3, #0
 8004270:	d010      	beq.n	8004294 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	69da      	ldr	r2, [r3, #28]
 8004276:	4b59      	ldr	r3, [pc, #356]	; (80043dc <HAL_RCC_ClockConfig+0x244>)
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800427e:	429a      	cmp	r2, r3
 8004280:	d908      	bls.n	8004294 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004282:	4b56      	ldr	r3, [pc, #344]	; (80043dc <HAL_RCC_ClockConfig+0x244>)
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	4953      	ldr	r1, [pc, #332]	; (80043dc <HAL_RCC_ClockConfig+0x244>)
 8004290:	4313      	orrs	r3, r2
 8004292:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b00      	cmp	r3, #0
 800429e:	d010      	beq.n	80042c2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68da      	ldr	r2, [r3, #12]
 80042a4:	4b4d      	ldr	r3, [pc, #308]	; (80043dc <HAL_RCC_ClockConfig+0x244>)
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	f003 030f 	and.w	r3, r3, #15
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d908      	bls.n	80042c2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042b0:	4b4a      	ldr	r3, [pc, #296]	; (80043dc <HAL_RCC_ClockConfig+0x244>)
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	f023 020f 	bic.w	r2, r3, #15
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	4947      	ldr	r1, [pc, #284]	; (80043dc <HAL_RCC_ClockConfig+0x244>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d055      	beq.n	800437a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80042ce:	4b43      	ldr	r3, [pc, #268]	; (80043dc <HAL_RCC_ClockConfig+0x244>)
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	4940      	ldr	r1, [pc, #256]	; (80043dc <HAL_RCC_ClockConfig+0x244>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d107      	bne.n	80042f8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042e8:	4b3c      	ldr	r3, [pc, #240]	; (80043dc <HAL_RCC_ClockConfig+0x244>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d121      	bne.n	8004338 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e0f6      	b.n	80044e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	2b03      	cmp	r3, #3
 80042fe:	d107      	bne.n	8004310 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004300:	4b36      	ldr	r3, [pc, #216]	; (80043dc <HAL_RCC_ClockConfig+0x244>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d115      	bne.n	8004338 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e0ea      	b.n	80044e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d107      	bne.n	8004328 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004318:	4b30      	ldr	r3, [pc, #192]	; (80043dc <HAL_RCC_ClockConfig+0x244>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004320:	2b00      	cmp	r3, #0
 8004322:	d109      	bne.n	8004338 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e0de      	b.n	80044e6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004328:	4b2c      	ldr	r3, [pc, #176]	; (80043dc <HAL_RCC_ClockConfig+0x244>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b00      	cmp	r3, #0
 8004332:	d101      	bne.n	8004338 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e0d6      	b.n	80044e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004338:	4b28      	ldr	r3, [pc, #160]	; (80043dc <HAL_RCC_ClockConfig+0x244>)
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	f023 0207 	bic.w	r2, r3, #7
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	4925      	ldr	r1, [pc, #148]	; (80043dc <HAL_RCC_ClockConfig+0x244>)
 8004346:	4313      	orrs	r3, r2
 8004348:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800434a:	f7fe fa37 	bl	80027bc <HAL_GetTick>
 800434e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004350:	e00a      	b.n	8004368 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004352:	f7fe fa33 	bl	80027bc <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004360:	4293      	cmp	r3, r2
 8004362:	d901      	bls.n	8004368 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e0be      	b.n	80044e6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004368:	4b1c      	ldr	r3, [pc, #112]	; (80043dc <HAL_RCC_ClockConfig+0x244>)
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	429a      	cmp	r2, r3
 8004378:	d1eb      	bne.n	8004352 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d010      	beq.n	80043a8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	68da      	ldr	r2, [r3, #12]
 800438a:	4b14      	ldr	r3, [pc, #80]	; (80043dc <HAL_RCC_ClockConfig+0x244>)
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	429a      	cmp	r2, r3
 8004394:	d208      	bcs.n	80043a8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004396:	4b11      	ldr	r3, [pc, #68]	; (80043dc <HAL_RCC_ClockConfig+0x244>)
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	f023 020f 	bic.w	r2, r3, #15
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	490e      	ldr	r1, [pc, #56]	; (80043dc <HAL_RCC_ClockConfig+0x244>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043a8:	4b0b      	ldr	r3, [pc, #44]	; (80043d8 <HAL_RCC_ClockConfig+0x240>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 030f 	and.w	r3, r3, #15
 80043b0:	683a      	ldr	r2, [r7, #0]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d214      	bcs.n	80043e0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043b6:	4b08      	ldr	r3, [pc, #32]	; (80043d8 <HAL_RCC_ClockConfig+0x240>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f023 020f 	bic.w	r2, r3, #15
 80043be:	4906      	ldr	r1, [pc, #24]	; (80043d8 <HAL_RCC_ClockConfig+0x240>)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043c6:	4b04      	ldr	r3, [pc, #16]	; (80043d8 <HAL_RCC_ClockConfig+0x240>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 030f 	and.w	r3, r3, #15
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d005      	beq.n	80043e0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e086      	b.n	80044e6 <HAL_RCC_ClockConfig+0x34e>
 80043d8:	52002000 	.word	0x52002000
 80043dc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0304 	and.w	r3, r3, #4
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d010      	beq.n	800440e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	691a      	ldr	r2, [r3, #16]
 80043f0:	4b3f      	ldr	r3, [pc, #252]	; (80044f0 <HAL_RCC_ClockConfig+0x358>)
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d208      	bcs.n	800440e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80043fc:	4b3c      	ldr	r3, [pc, #240]	; (80044f0 <HAL_RCC_ClockConfig+0x358>)
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	4939      	ldr	r1, [pc, #228]	; (80044f0 <HAL_RCC_ClockConfig+0x358>)
 800440a:	4313      	orrs	r3, r2
 800440c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0308 	and.w	r3, r3, #8
 8004416:	2b00      	cmp	r3, #0
 8004418:	d010      	beq.n	800443c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	695a      	ldr	r2, [r3, #20]
 800441e:	4b34      	ldr	r3, [pc, #208]	; (80044f0 <HAL_RCC_ClockConfig+0x358>)
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004426:	429a      	cmp	r2, r3
 8004428:	d208      	bcs.n	800443c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800442a:	4b31      	ldr	r3, [pc, #196]	; (80044f0 <HAL_RCC_ClockConfig+0x358>)
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	492e      	ldr	r1, [pc, #184]	; (80044f0 <HAL_RCC_ClockConfig+0x358>)
 8004438:	4313      	orrs	r3, r2
 800443a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0310 	and.w	r3, r3, #16
 8004444:	2b00      	cmp	r3, #0
 8004446:	d010      	beq.n	800446a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	699a      	ldr	r2, [r3, #24]
 800444c:	4b28      	ldr	r3, [pc, #160]	; (80044f0 <HAL_RCC_ClockConfig+0x358>)
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004454:	429a      	cmp	r2, r3
 8004456:	d208      	bcs.n	800446a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004458:	4b25      	ldr	r3, [pc, #148]	; (80044f0 <HAL_RCC_ClockConfig+0x358>)
 800445a:	69db      	ldr	r3, [r3, #28]
 800445c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	4922      	ldr	r1, [pc, #136]	; (80044f0 <HAL_RCC_ClockConfig+0x358>)
 8004466:	4313      	orrs	r3, r2
 8004468:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0320 	and.w	r3, r3, #32
 8004472:	2b00      	cmp	r3, #0
 8004474:	d010      	beq.n	8004498 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	69da      	ldr	r2, [r3, #28]
 800447a:	4b1d      	ldr	r3, [pc, #116]	; (80044f0 <HAL_RCC_ClockConfig+0x358>)
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004482:	429a      	cmp	r2, r3
 8004484:	d208      	bcs.n	8004498 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004486:	4b1a      	ldr	r3, [pc, #104]	; (80044f0 <HAL_RCC_ClockConfig+0x358>)
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	4917      	ldr	r1, [pc, #92]	; (80044f0 <HAL_RCC_ClockConfig+0x358>)
 8004494:	4313      	orrs	r3, r2
 8004496:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004498:	f000 f834 	bl	8004504 <HAL_RCC_GetSysClockFreq>
 800449c:	4602      	mov	r2, r0
 800449e:	4b14      	ldr	r3, [pc, #80]	; (80044f0 <HAL_RCC_ClockConfig+0x358>)
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	0a1b      	lsrs	r3, r3, #8
 80044a4:	f003 030f 	and.w	r3, r3, #15
 80044a8:	4912      	ldr	r1, [pc, #72]	; (80044f4 <HAL_RCC_ClockConfig+0x35c>)
 80044aa:	5ccb      	ldrb	r3, [r1, r3]
 80044ac:	f003 031f 	and.w	r3, r3, #31
 80044b0:	fa22 f303 	lsr.w	r3, r2, r3
 80044b4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80044b6:	4b0e      	ldr	r3, [pc, #56]	; (80044f0 <HAL_RCC_ClockConfig+0x358>)
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	f003 030f 	and.w	r3, r3, #15
 80044be:	4a0d      	ldr	r2, [pc, #52]	; (80044f4 <HAL_RCC_ClockConfig+0x35c>)
 80044c0:	5cd3      	ldrb	r3, [r2, r3]
 80044c2:	f003 031f 	and.w	r3, r3, #31
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	fa22 f303 	lsr.w	r3, r2, r3
 80044cc:	4a0a      	ldr	r2, [pc, #40]	; (80044f8 <HAL_RCC_ClockConfig+0x360>)
 80044ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80044d0:	4a0a      	ldr	r2, [pc, #40]	; (80044fc <HAL_RCC_ClockConfig+0x364>)
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80044d6:	4b0a      	ldr	r3, [pc, #40]	; (8004500 <HAL_RCC_ClockConfig+0x368>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fe f924 	bl	8002728 <HAL_InitTick>
 80044e0:	4603      	mov	r3, r0
 80044e2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80044e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3718      	adds	r7, #24
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	58024400 	.word	0x58024400
 80044f4:	08008618 	.word	0x08008618
 80044f8:	24000004 	.word	0x24000004
 80044fc:	24000000 	.word	0x24000000
 8004500:	24000008 	.word	0x24000008

08004504 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004504:	b480      	push	{r7}
 8004506:	b089      	sub	sp, #36	; 0x24
 8004508:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800450a:	4bb3      	ldr	r3, [pc, #716]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004512:	2b18      	cmp	r3, #24
 8004514:	f200 8155 	bhi.w	80047c2 <HAL_RCC_GetSysClockFreq+0x2be>
 8004518:	a201      	add	r2, pc, #4	; (adr r2, 8004520 <HAL_RCC_GetSysClockFreq+0x1c>)
 800451a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800451e:	bf00      	nop
 8004520:	08004585 	.word	0x08004585
 8004524:	080047c3 	.word	0x080047c3
 8004528:	080047c3 	.word	0x080047c3
 800452c:	080047c3 	.word	0x080047c3
 8004530:	080047c3 	.word	0x080047c3
 8004534:	080047c3 	.word	0x080047c3
 8004538:	080047c3 	.word	0x080047c3
 800453c:	080047c3 	.word	0x080047c3
 8004540:	080045ab 	.word	0x080045ab
 8004544:	080047c3 	.word	0x080047c3
 8004548:	080047c3 	.word	0x080047c3
 800454c:	080047c3 	.word	0x080047c3
 8004550:	080047c3 	.word	0x080047c3
 8004554:	080047c3 	.word	0x080047c3
 8004558:	080047c3 	.word	0x080047c3
 800455c:	080047c3 	.word	0x080047c3
 8004560:	080045b1 	.word	0x080045b1
 8004564:	080047c3 	.word	0x080047c3
 8004568:	080047c3 	.word	0x080047c3
 800456c:	080047c3 	.word	0x080047c3
 8004570:	080047c3 	.word	0x080047c3
 8004574:	080047c3 	.word	0x080047c3
 8004578:	080047c3 	.word	0x080047c3
 800457c:	080047c3 	.word	0x080047c3
 8004580:	080045b7 	.word	0x080045b7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004584:	4b94      	ldr	r3, [pc, #592]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0320 	and.w	r3, r3, #32
 800458c:	2b00      	cmp	r3, #0
 800458e:	d009      	beq.n	80045a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004590:	4b91      	ldr	r3, [pc, #580]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	08db      	lsrs	r3, r3, #3
 8004596:	f003 0303 	and.w	r3, r3, #3
 800459a:	4a90      	ldr	r2, [pc, #576]	; (80047dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800459c:	fa22 f303 	lsr.w	r3, r2, r3
 80045a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80045a2:	e111      	b.n	80047c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80045a4:	4b8d      	ldr	r3, [pc, #564]	; (80047dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80045a6:	61bb      	str	r3, [r7, #24]
      break;
 80045a8:	e10e      	b.n	80047c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80045aa:	4b8d      	ldr	r3, [pc, #564]	; (80047e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80045ac:	61bb      	str	r3, [r7, #24]
      break;
 80045ae:	e10b      	b.n	80047c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80045b0:	4b8c      	ldr	r3, [pc, #560]	; (80047e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80045b2:	61bb      	str	r3, [r7, #24]
      break;
 80045b4:	e108      	b.n	80047c8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045b6:	4b88      	ldr	r3, [pc, #544]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ba:	f003 0303 	and.w	r3, r3, #3
 80045be:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80045c0:	4b85      	ldr	r3, [pc, #532]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c4:	091b      	lsrs	r3, r3, #4
 80045c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045ca:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80045cc:	4b82      	ldr	r3, [pc, #520]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80045d6:	4b80      	ldr	r3, [pc, #512]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045da:	08db      	lsrs	r3, r3, #3
 80045dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	fb02 f303 	mul.w	r3, r2, r3
 80045e6:	ee07 3a90 	vmov	s15, r3
 80045ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ee:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 80e1 	beq.w	80047bc <HAL_RCC_GetSysClockFreq+0x2b8>
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	f000 8083 	beq.w	8004708 <HAL_RCC_GetSysClockFreq+0x204>
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	2b02      	cmp	r3, #2
 8004606:	f200 80a1 	bhi.w	800474c <HAL_RCC_GetSysClockFreq+0x248>
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d003      	beq.n	8004618 <HAL_RCC_GetSysClockFreq+0x114>
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d056      	beq.n	80046c4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004616:	e099      	b.n	800474c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004618:	4b6f      	ldr	r3, [pc, #444]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0320 	and.w	r3, r3, #32
 8004620:	2b00      	cmp	r3, #0
 8004622:	d02d      	beq.n	8004680 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004624:	4b6c      	ldr	r3, [pc, #432]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	08db      	lsrs	r3, r3, #3
 800462a:	f003 0303 	and.w	r3, r3, #3
 800462e:	4a6b      	ldr	r2, [pc, #428]	; (80047dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004630:	fa22 f303 	lsr.w	r3, r2, r3
 8004634:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	ee07 3a90 	vmov	s15, r3
 800463c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	ee07 3a90 	vmov	s15, r3
 8004646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800464a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800464e:	4b62      	ldr	r3, [pc, #392]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004656:	ee07 3a90 	vmov	s15, r3
 800465a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800465e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004662:	eddf 5a61 	vldr	s11, [pc, #388]	; 80047e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800466a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800466e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800467a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800467e:	e087      	b.n	8004790 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	ee07 3a90 	vmov	s15, r3
 8004686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800468a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80047ec <HAL_RCC_GetSysClockFreq+0x2e8>
 800468e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004692:	4b51      	ldr	r3, [pc, #324]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800469a:	ee07 3a90 	vmov	s15, r3
 800469e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80046a6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80047e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80046c2:	e065      	b.n	8004790 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	ee07 3a90 	vmov	s15, r3
 80046ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ce:	eddf 6a48 	vldr	s13, [pc, #288]	; 80047f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80046d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046d6:	4b40      	ldr	r3, [pc, #256]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046de:	ee07 3a90 	vmov	s15, r3
 80046e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80046ea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80047e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004702:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004706:	e043      	b.n	8004790 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	ee07 3a90 	vmov	s15, r3
 800470e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004712:	eddf 6a38 	vldr	s13, [pc, #224]	; 80047f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800471a:	4b2f      	ldr	r3, [pc, #188]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800471c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004722:	ee07 3a90 	vmov	s15, r3
 8004726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800472a:	ed97 6a02 	vldr	s12, [r7, #8]
 800472e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80047e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800473a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800473e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004746:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800474a:	e021      	b.n	8004790 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	ee07 3a90 	vmov	s15, r3
 8004752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004756:	eddf 6a26 	vldr	s13, [pc, #152]	; 80047f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800475a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800475e:	4b1e      	ldr	r3, [pc, #120]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004766:	ee07 3a90 	vmov	s15, r3
 800476a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800476e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004772:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80047e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800477a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800477e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800478a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800478e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004790:	4b11      	ldr	r3, [pc, #68]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004794:	0a5b      	lsrs	r3, r3, #9
 8004796:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800479a:	3301      	adds	r3, #1
 800479c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	ee07 3a90 	vmov	s15, r3
 80047a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80047a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80047ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047b4:	ee17 3a90 	vmov	r3, s15
 80047b8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80047ba:	e005      	b.n	80047c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80047bc:	2300      	movs	r3, #0
 80047be:	61bb      	str	r3, [r7, #24]
      break;
 80047c0:	e002      	b.n	80047c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80047c2:	4b07      	ldr	r3, [pc, #28]	; (80047e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80047c4:	61bb      	str	r3, [r7, #24]
      break;
 80047c6:	bf00      	nop
  }

  return sysclockfreq;
 80047c8:	69bb      	ldr	r3, [r7, #24]
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3724      	adds	r7, #36	; 0x24
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	58024400 	.word	0x58024400
 80047dc:	03d09000 	.word	0x03d09000
 80047e0:	003d0900 	.word	0x003d0900
 80047e4:	007a1200 	.word	0x007a1200
 80047e8:	46000000 	.word	0x46000000
 80047ec:	4c742400 	.word	0x4c742400
 80047f0:	4a742400 	.word	0x4a742400
 80047f4:	4af42400 	.word	0x4af42400

080047f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80047fe:	f7ff fe81 	bl	8004504 <HAL_RCC_GetSysClockFreq>
 8004802:	4602      	mov	r2, r0
 8004804:	4b10      	ldr	r3, [pc, #64]	; (8004848 <HAL_RCC_GetHCLKFreq+0x50>)
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	0a1b      	lsrs	r3, r3, #8
 800480a:	f003 030f 	and.w	r3, r3, #15
 800480e:	490f      	ldr	r1, [pc, #60]	; (800484c <HAL_RCC_GetHCLKFreq+0x54>)
 8004810:	5ccb      	ldrb	r3, [r1, r3]
 8004812:	f003 031f 	and.w	r3, r3, #31
 8004816:	fa22 f303 	lsr.w	r3, r2, r3
 800481a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800481c:	4b0a      	ldr	r3, [pc, #40]	; (8004848 <HAL_RCC_GetHCLKFreq+0x50>)
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	f003 030f 	and.w	r3, r3, #15
 8004824:	4a09      	ldr	r2, [pc, #36]	; (800484c <HAL_RCC_GetHCLKFreq+0x54>)
 8004826:	5cd3      	ldrb	r3, [r2, r3]
 8004828:	f003 031f 	and.w	r3, r3, #31
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	fa22 f303 	lsr.w	r3, r2, r3
 8004832:	4a07      	ldr	r2, [pc, #28]	; (8004850 <HAL_RCC_GetHCLKFreq+0x58>)
 8004834:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004836:	4a07      	ldr	r2, [pc, #28]	; (8004854 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800483c:	4b04      	ldr	r3, [pc, #16]	; (8004850 <HAL_RCC_GetHCLKFreq+0x58>)
 800483e:	681b      	ldr	r3, [r3, #0]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3708      	adds	r7, #8
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	58024400 	.word	0x58024400
 800484c:	08008618 	.word	0x08008618
 8004850:	24000004 	.word	0x24000004
 8004854:	24000000 	.word	0x24000000

08004858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800485c:	f7ff ffcc 	bl	80047f8 <HAL_RCC_GetHCLKFreq>
 8004860:	4602      	mov	r2, r0
 8004862:	4b06      	ldr	r3, [pc, #24]	; (800487c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	091b      	lsrs	r3, r3, #4
 8004868:	f003 0307 	and.w	r3, r3, #7
 800486c:	4904      	ldr	r1, [pc, #16]	; (8004880 <HAL_RCC_GetPCLK1Freq+0x28>)
 800486e:	5ccb      	ldrb	r3, [r1, r3]
 8004870:	f003 031f 	and.w	r3, r3, #31
 8004874:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004878:	4618      	mov	r0, r3
 800487a:	bd80      	pop	{r7, pc}
 800487c:	58024400 	.word	0x58024400
 8004880:	08008618 	.word	0x08008618

08004884 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8004888:	f7ff ffb6 	bl	80047f8 <HAL_RCC_GetHCLKFreq>
 800488c:	4602      	mov	r2, r0
 800488e:	4b06      	ldr	r3, [pc, #24]	; (80048a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	0a1b      	lsrs	r3, r3, #8
 8004894:	f003 0307 	and.w	r3, r3, #7
 8004898:	4904      	ldr	r1, [pc, #16]	; (80048ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800489a:	5ccb      	ldrb	r3, [r1, r3]
 800489c:	f003 031f 	and.w	r3, r3, #31
 80048a0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	58024400 	.word	0x58024400
 80048ac:	08008618 	.word	0x08008618

080048b0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048b4:	b0c8      	sub	sp, #288	; 0x120
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80048bc:	2300      	movs	r3, #0
 80048be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048c2:	2300      	movs	r3, #0
 80048c4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80048c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80048d4:	2500      	movs	r5, #0
 80048d6:	ea54 0305 	orrs.w	r3, r4, r5
 80048da:	d049      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80048dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048e6:	d02f      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80048e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048ec:	d828      	bhi.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80048ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048f2:	d01a      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80048f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048f8:	d822      	bhi.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80048fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004902:	d007      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004904:	e01c      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004906:	4ba7      	ldr	r3, [pc, #668]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490a:	4aa6      	ldr	r2, [pc, #664]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800490c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004910:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004912:	e01a      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004914:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004918:	3308      	adds	r3, #8
 800491a:	2102      	movs	r1, #2
 800491c:	4618      	mov	r0, r3
 800491e:	f001 fc43 	bl	80061a8 <RCCEx_PLL2_Config>
 8004922:	4603      	mov	r3, r0
 8004924:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004928:	e00f      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800492a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800492e:	3328      	adds	r3, #40	; 0x28
 8004930:	2102      	movs	r1, #2
 8004932:	4618      	mov	r0, r3
 8004934:	f001 fcea 	bl	800630c <RCCEx_PLL3_Config>
 8004938:	4603      	mov	r3, r0
 800493a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800493e:	e004      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004946:	e000      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004948:	bf00      	nop
    }

    if (ret == HAL_OK)
 800494a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10a      	bne.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004952:	4b94      	ldr	r3, [pc, #592]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004956:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800495a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800495e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004960:	4a90      	ldr	r2, [pc, #576]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004962:	430b      	orrs	r3, r1
 8004964:	6513      	str	r3, [r2, #80]	; 0x50
 8004966:	e003      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004968:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800496c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004970:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004978:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800497c:	f04f 0900 	mov.w	r9, #0
 8004980:	ea58 0309 	orrs.w	r3, r8, r9
 8004984:	d047      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004986:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800498a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800498c:	2b04      	cmp	r3, #4
 800498e:	d82a      	bhi.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004990:	a201      	add	r2, pc, #4	; (adr r2, 8004998 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004996:	bf00      	nop
 8004998:	080049ad 	.word	0x080049ad
 800499c:	080049bb 	.word	0x080049bb
 80049a0:	080049d1 	.word	0x080049d1
 80049a4:	080049ef 	.word	0x080049ef
 80049a8:	080049ef 	.word	0x080049ef
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049ac:	4b7d      	ldr	r3, [pc, #500]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b0:	4a7c      	ldr	r2, [pc, #496]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049b8:	e01a      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049be:	3308      	adds	r3, #8
 80049c0:	2100      	movs	r1, #0
 80049c2:	4618      	mov	r0, r3
 80049c4:	f001 fbf0 	bl	80061a8 <RCCEx_PLL2_Config>
 80049c8:	4603      	mov	r3, r0
 80049ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049ce:	e00f      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80049d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049d4:	3328      	adds	r3, #40	; 0x28
 80049d6:	2100      	movs	r1, #0
 80049d8:	4618      	mov	r0, r3
 80049da:	f001 fc97 	bl	800630c <RCCEx_PLL3_Config>
 80049de:	4603      	mov	r3, r0
 80049e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049e4:	e004      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80049ec:	e000      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80049ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10a      	bne.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049f8:	4b6a      	ldr	r3, [pc, #424]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049fc:	f023 0107 	bic.w	r1, r3, #7
 8004a00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a06:	4a67      	ldr	r2, [pc, #412]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a08:	430b      	orrs	r3, r1
 8004a0a:	6513      	str	r3, [r2, #80]	; 0x50
 8004a0c:	e003      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a0e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a12:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8004a16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8004a22:	f04f 0b00 	mov.w	fp, #0
 8004a26:	ea5a 030b 	orrs.w	r3, sl, fp
 8004a2a:	d054      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8004a2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a32:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004a36:	d036      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004a38:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004a3c:	d82f      	bhi.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a42:	d032      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004a44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a48:	d829      	bhi.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004a4a:	2bc0      	cmp	r3, #192	; 0xc0
 8004a4c:	d02f      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8004a4e:	2bc0      	cmp	r3, #192	; 0xc0
 8004a50:	d825      	bhi.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004a52:	2b80      	cmp	r3, #128	; 0x80
 8004a54:	d018      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8004a56:	2b80      	cmp	r3, #128	; 0x80
 8004a58:	d821      	bhi.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d002      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8004a5e:	2b40      	cmp	r3, #64	; 0x40
 8004a60:	d007      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8004a62:	e01c      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a64:	4b4f      	ldr	r3, [pc, #316]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a68:	4a4e      	ldr	r2, [pc, #312]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004a70:	e01e      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a76:	3308      	adds	r3, #8
 8004a78:	2100      	movs	r1, #0
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f001 fb94 	bl	80061a8 <RCCEx_PLL2_Config>
 8004a80:	4603      	mov	r3, r0
 8004a82:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004a86:	e013      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a8c:	3328      	adds	r3, #40	; 0x28
 8004a8e:	2100      	movs	r1, #0
 8004a90:	4618      	mov	r0, r3
 8004a92:	f001 fc3b 	bl	800630c <RCCEx_PLL3_Config>
 8004a96:	4603      	mov	r3, r0
 8004a98:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004a9c:	e008      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004aa4:	e004      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004aa6:	bf00      	nop
 8004aa8:	e002      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004aaa:	bf00      	nop
 8004aac:	e000      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004aae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ab0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10a      	bne.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8004ab8:	4b3a      	ldr	r3, [pc, #232]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004abc:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004ac0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac6:	4a37      	ldr	r2, [pc, #220]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ac8:	430b      	orrs	r3, r1
 8004aca:	6513      	str	r3, [r2, #80]	; 0x50
 8004acc:	e003      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ace:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ad2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8004ad6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ade:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004ae2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004aec:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004af0:	460b      	mov	r3, r1
 8004af2:	4313      	orrs	r3, r2
 8004af4:	d05c      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8004af6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004afa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004afc:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004b00:	d03b      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004b02:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004b06:	d834      	bhi.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004b08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b0c:	d037      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8004b0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b12:	d82e      	bhi.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004b14:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004b18:	d033      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004b1a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004b1e:	d828      	bhi.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004b20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b24:	d01a      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b2a:	d822      	bhi.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d003      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8004b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b34:	d007      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004b36:	e01c      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b38:	4b1a      	ldr	r3, [pc, #104]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3c:	4a19      	ldr	r2, [pc, #100]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004b44:	e01e      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b4a:	3308      	adds	r3, #8
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f001 fb2a 	bl	80061a8 <RCCEx_PLL2_Config>
 8004b54:	4603      	mov	r3, r0
 8004b56:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004b5a:	e013      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b60:	3328      	adds	r3, #40	; 0x28
 8004b62:	2100      	movs	r1, #0
 8004b64:	4618      	mov	r0, r3
 8004b66:	f001 fbd1 	bl	800630c <RCCEx_PLL3_Config>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004b70:	e008      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004b78:	e004      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004b7a:	bf00      	nop
 8004b7c:	e002      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004b7e:	bf00      	nop
 8004b80:	e000      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004b82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b84:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d10d      	bne.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8004b8c:	4b05      	ldr	r3, [pc, #20]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b90:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8004b94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b9a:	4a02      	ldr	r2, [pc, #8]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b9c:	430b      	orrs	r3, r1
 8004b9e:	6513      	str	r3, [r2, #80]	; 0x50
 8004ba0:	e006      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8004ba2:	bf00      	nop
 8004ba4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004bac:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004bb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004bbc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004bc6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004bca:	460b      	mov	r3, r1
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	d03a      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004bd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bd6:	2b30      	cmp	r3, #48	; 0x30
 8004bd8:	d01f      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004bda:	2b30      	cmp	r3, #48	; 0x30
 8004bdc:	d819      	bhi.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004bde:	2b20      	cmp	r3, #32
 8004be0:	d00c      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004be2:	2b20      	cmp	r3, #32
 8004be4:	d815      	bhi.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d019      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004bea:	2b10      	cmp	r3, #16
 8004bec:	d111      	bne.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bee:	4bae      	ldr	r3, [pc, #696]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf2:	4aad      	ldr	r2, [pc, #692]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bf8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004bfa:	e011      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c00:	3308      	adds	r3, #8
 8004c02:	2102      	movs	r1, #2
 8004c04:	4618      	mov	r0, r3
 8004c06:	f001 facf 	bl	80061a8 <RCCEx_PLL2_Config>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004c10:	e006      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004c18:	e002      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004c1a:	bf00      	nop
 8004c1c:	e000      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004c1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c20:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10a      	bne.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004c28:	4b9f      	ldr	r3, [pc, #636]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c2c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004c30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c36:	4a9c      	ldr	r2, [pc, #624]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c38:	430b      	orrs	r3, r1
 8004c3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c3c:	e003      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c3e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c42:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004c46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004c52:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004c56:	2300      	movs	r3, #0
 8004c58:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004c5c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004c60:	460b      	mov	r3, r1
 8004c62:	4313      	orrs	r3, r2
 8004c64:	d051      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004c66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c70:	d035      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004c72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c76:	d82e      	bhi.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004c78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c7c:	d031      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8004c7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c82:	d828      	bhi.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004c84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c88:	d01a      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004c8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c8e:	d822      	bhi.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d003      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004c94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c98:	d007      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8004c9a:	e01c      	b.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c9c:	4b82      	ldr	r3, [pc, #520]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca0:	4a81      	ldr	r2, [pc, #516]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ca2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ca6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004ca8:	e01c      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004caa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cae:	3308      	adds	r3, #8
 8004cb0:	2100      	movs	r1, #0
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f001 fa78 	bl	80061a8 <RCCEx_PLL2_Config>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004cbe:	e011      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004cc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cc4:	3328      	adds	r3, #40	; 0x28
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f001 fb1f 	bl	800630c <RCCEx_PLL3_Config>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004cd4:	e006      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004cdc:	e002      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004cde:	bf00      	nop
 8004ce0:	e000      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004ce2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ce4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d10a      	bne.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004cec:	4b6e      	ldr	r3, [pc, #440]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004cf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cfa:	4a6b      	ldr	r2, [pc, #428]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004cfc:	430b      	orrs	r3, r1
 8004cfe:	6513      	str	r3, [r2, #80]	; 0x50
 8004d00:	e003      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d02:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d06:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004d0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d12:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004d16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004d20:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004d24:	460b      	mov	r3, r1
 8004d26:	4313      	orrs	r3, r2
 8004d28:	d053      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004d2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d34:	d033      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8004d36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d3a:	d82c      	bhi.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004d3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d40:	d02f      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8004d42:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d46:	d826      	bhi.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004d48:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d4c:	d02b      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004d4e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d52:	d820      	bhi.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004d54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d58:	d012      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004d5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d5e:	d81a      	bhi.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d022      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8004d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d68:	d115      	bne.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d6e:	3308      	adds	r3, #8
 8004d70:	2101      	movs	r1, #1
 8004d72:	4618      	mov	r0, r3
 8004d74:	f001 fa18 	bl	80061a8 <RCCEx_PLL2_Config>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004d7e:	e015      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d84:	3328      	adds	r3, #40	; 0x28
 8004d86:	2101      	movs	r1, #1
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f001 fabf 	bl	800630c <RCCEx_PLL3_Config>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004d94:	e00a      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004d9c:	e006      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004d9e:	bf00      	nop
 8004da0:	e004      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004da2:	bf00      	nop
 8004da4:	e002      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004da6:	bf00      	nop
 8004da8:	e000      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004daa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10a      	bne.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004db4:	4b3c      	ldr	r3, [pc, #240]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004db8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004dbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dc2:	4a39      	ldr	r2, [pc, #228]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004dc4:	430b      	orrs	r3, r1
 8004dc6:	6513      	str	r3, [r2, #80]	; 0x50
 8004dc8:	e003      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004dce:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004dd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dda:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004dde:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004de2:	2300      	movs	r3, #0
 8004de4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004de8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004dec:	460b      	mov	r3, r1
 8004dee:	4313      	orrs	r3, r2
 8004df0:	d060      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004df2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004df6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004dfa:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004dfe:	d039      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8004e00:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004e04:	d832      	bhi.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004e06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e0a:	d035      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004e0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e10:	d82c      	bhi.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e16:	d031      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e1c:	d826      	bhi.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004e1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e22:	d02d      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004e24:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e28:	d820      	bhi.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004e2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e2e:	d012      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004e30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e34:	d81a      	bhi.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d024      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004e3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e3e:	d115      	bne.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e44:	3308      	adds	r3, #8
 8004e46:	2101      	movs	r1, #1
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f001 f9ad 	bl	80061a8 <RCCEx_PLL2_Config>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004e54:	e017      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e5a:	3328      	adds	r3, #40	; 0x28
 8004e5c:	2101      	movs	r1, #1
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f001 fa54 	bl	800630c <RCCEx_PLL3_Config>
 8004e64:	4603      	mov	r3, r0
 8004e66:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004e6a:	e00c      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004e72:	e008      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004e74:	bf00      	nop
 8004e76:	e006      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004e78:	bf00      	nop
 8004e7a:	e004      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004e7c:	bf00      	nop
 8004e7e:	e002      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004e80:	bf00      	nop
 8004e82:	e000      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004e84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e86:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10e      	bne.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004e8e:	4b06      	ldr	r3, [pc, #24]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e92:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004e96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e9e:	4a02      	ldr	r2, [pc, #8]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ea0:	430b      	orrs	r3, r1
 8004ea2:	6593      	str	r3, [r2, #88]	; 0x58
 8004ea4:	e006      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004ea6:	bf00      	nop
 8004ea8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004eb0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004eb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ebc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004ec0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004eca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004ece:	460b      	mov	r3, r1
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	d037      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004ed4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ed8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ede:	d00e      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004ee0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ee4:	d816      	bhi.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d018      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004eea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004eee:	d111      	bne.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ef0:	4bc4      	ldr	r3, [pc, #784]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef4:	4ac3      	ldr	r2, [pc, #780]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ef6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004efa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004efc:	e00f      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004efe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f02:	3308      	adds	r3, #8
 8004f04:	2101      	movs	r1, #1
 8004f06:	4618      	mov	r0, r3
 8004f08:	f001 f94e 	bl	80061a8 <RCCEx_PLL2_Config>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004f12:	e004      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004f1a:	e000      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004f1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f1e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10a      	bne.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f26:	4bb7      	ldr	r3, [pc, #732]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f2a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004f2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f34:	4ab3      	ldr	r2, [pc, #716]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f36:	430b      	orrs	r3, r1
 8004f38:	6513      	str	r3, [r2, #80]	; 0x50
 8004f3a:	e003      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f3c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f40:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004f44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004f50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f54:	2300      	movs	r3, #0
 8004f56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004f5a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004f5e:	460b      	mov	r3, r1
 8004f60:	4313      	orrs	r3, r2
 8004f62:	d039      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004f64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f6a:	2b03      	cmp	r3, #3
 8004f6c:	d81c      	bhi.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004f6e:	a201      	add	r2, pc, #4	; (adr r2, 8004f74 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f74:	08004fb1 	.word	0x08004fb1
 8004f78:	08004f85 	.word	0x08004f85
 8004f7c:	08004f93 	.word	0x08004f93
 8004f80:	08004fb1 	.word	0x08004fb1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f84:	4b9f      	ldr	r3, [pc, #636]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f88:	4a9e      	ldr	r2, [pc, #632]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004f90:	e00f      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f96:	3308      	adds	r3, #8
 8004f98:	2102      	movs	r1, #2
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f001 f904 	bl	80061a8 <RCCEx_PLL2_Config>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004fa6:	e004      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004fae:	e000      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004fb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fb2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10a      	bne.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004fba:	4b92      	ldr	r3, [pc, #584]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fbe:	f023 0103 	bic.w	r1, r3, #3
 8004fc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fc8:	4a8e      	ldr	r2, [pc, #568]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fca:	430b      	orrs	r3, r1
 8004fcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004fce:	e003      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004fd4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004fe4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004fe8:	2300      	movs	r3, #0
 8004fea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004fee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	f000 8099 	beq.w	800512c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ffa:	4b83      	ldr	r3, [pc, #524]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a82      	ldr	r2, [pc, #520]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005004:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005006:	f7fd fbd9 	bl	80027bc <HAL_GetTick>
 800500a:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800500e:	e00b      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005010:	f7fd fbd4 	bl	80027bc <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b64      	cmp	r3, #100	; 0x64
 800501e:	d903      	bls.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005026:	e005      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005028:	4b77      	ldr	r3, [pc, #476]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005030:	2b00      	cmp	r3, #0
 8005032:	d0ed      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005034:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005038:	2b00      	cmp	r3, #0
 800503a:	d173      	bne.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800503c:	4b71      	ldr	r3, [pc, #452]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800503e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005040:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005044:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005048:	4053      	eors	r3, r2
 800504a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800504e:	2b00      	cmp	r3, #0
 8005050:	d015      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005052:	4b6c      	ldr	r3, [pc, #432]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005056:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800505a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800505e:	4b69      	ldr	r3, [pc, #420]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005062:	4a68      	ldr	r2, [pc, #416]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005068:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800506a:	4b66      	ldr	r3, [pc, #408]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800506c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800506e:	4a65      	ldr	r2, [pc, #404]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005070:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005074:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005076:	4a63      	ldr	r2, [pc, #396]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800507c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800507e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005082:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800508a:	d118      	bne.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800508c:	f7fd fb96 	bl	80027bc <HAL_GetTick>
 8005090:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005094:	e00d      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005096:	f7fd fb91 	bl	80027bc <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80050a0:	1ad2      	subs	r2, r2, r3
 80050a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d903      	bls.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 80050b0:	e005      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050b2:	4b54      	ldr	r3, [pc, #336]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d0eb      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80050be:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d129      	bne.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80050ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050d6:	d10e      	bne.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80050d8:	4b4a      	ldr	r3, [pc, #296]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80050e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80050e8:	091a      	lsrs	r2, r3, #4
 80050ea:	4b48      	ldr	r3, [pc, #288]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80050ec:	4013      	ands	r3, r2
 80050ee:	4a45      	ldr	r2, [pc, #276]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050f0:	430b      	orrs	r3, r1
 80050f2:	6113      	str	r3, [r2, #16]
 80050f4:	e005      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80050f6:	4b43      	ldr	r3, [pc, #268]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	4a42      	ldr	r2, [pc, #264]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050fc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005100:	6113      	str	r3, [r2, #16]
 8005102:	4b40      	ldr	r3, [pc, #256]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005104:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005106:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800510a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800510e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005112:	4a3c      	ldr	r2, [pc, #240]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005114:	430b      	orrs	r3, r1
 8005116:	6713      	str	r3, [r2, #112]	; 0x70
 8005118:	e008      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800511a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800511e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8005122:	e003      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005124:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005128:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800512c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005134:	f002 0301 	and.w	r3, r2, #1
 8005138:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800513c:	2300      	movs	r3, #0
 800513e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005142:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005146:	460b      	mov	r3, r1
 8005148:	4313      	orrs	r3, r2
 800514a:	f000 8090 	beq.w	800526e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800514e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005152:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005156:	2b28      	cmp	r3, #40	; 0x28
 8005158:	d870      	bhi.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800515a:	a201      	add	r2, pc, #4	; (adr r2, 8005160 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800515c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005160:	08005245 	.word	0x08005245
 8005164:	0800523d 	.word	0x0800523d
 8005168:	0800523d 	.word	0x0800523d
 800516c:	0800523d 	.word	0x0800523d
 8005170:	0800523d 	.word	0x0800523d
 8005174:	0800523d 	.word	0x0800523d
 8005178:	0800523d 	.word	0x0800523d
 800517c:	0800523d 	.word	0x0800523d
 8005180:	08005211 	.word	0x08005211
 8005184:	0800523d 	.word	0x0800523d
 8005188:	0800523d 	.word	0x0800523d
 800518c:	0800523d 	.word	0x0800523d
 8005190:	0800523d 	.word	0x0800523d
 8005194:	0800523d 	.word	0x0800523d
 8005198:	0800523d 	.word	0x0800523d
 800519c:	0800523d 	.word	0x0800523d
 80051a0:	08005227 	.word	0x08005227
 80051a4:	0800523d 	.word	0x0800523d
 80051a8:	0800523d 	.word	0x0800523d
 80051ac:	0800523d 	.word	0x0800523d
 80051b0:	0800523d 	.word	0x0800523d
 80051b4:	0800523d 	.word	0x0800523d
 80051b8:	0800523d 	.word	0x0800523d
 80051bc:	0800523d 	.word	0x0800523d
 80051c0:	08005245 	.word	0x08005245
 80051c4:	0800523d 	.word	0x0800523d
 80051c8:	0800523d 	.word	0x0800523d
 80051cc:	0800523d 	.word	0x0800523d
 80051d0:	0800523d 	.word	0x0800523d
 80051d4:	0800523d 	.word	0x0800523d
 80051d8:	0800523d 	.word	0x0800523d
 80051dc:	0800523d 	.word	0x0800523d
 80051e0:	08005245 	.word	0x08005245
 80051e4:	0800523d 	.word	0x0800523d
 80051e8:	0800523d 	.word	0x0800523d
 80051ec:	0800523d 	.word	0x0800523d
 80051f0:	0800523d 	.word	0x0800523d
 80051f4:	0800523d 	.word	0x0800523d
 80051f8:	0800523d 	.word	0x0800523d
 80051fc:	0800523d 	.word	0x0800523d
 8005200:	08005245 	.word	0x08005245
 8005204:	58024400 	.word	0x58024400
 8005208:	58024800 	.word	0x58024800
 800520c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005210:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005214:	3308      	adds	r3, #8
 8005216:	2101      	movs	r1, #1
 8005218:	4618      	mov	r0, r3
 800521a:	f000 ffc5 	bl	80061a8 <RCCEx_PLL2_Config>
 800521e:	4603      	mov	r3, r0
 8005220:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005224:	e00f      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005226:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800522a:	3328      	adds	r3, #40	; 0x28
 800522c:	2101      	movs	r1, #1
 800522e:	4618      	mov	r0, r3
 8005230:	f001 f86c 	bl	800630c <RCCEx_PLL3_Config>
 8005234:	4603      	mov	r3, r0
 8005236:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800523a:	e004      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005242:	e000      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005244:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005246:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10b      	bne.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800524e:	4bc0      	ldr	r3, [pc, #768]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005252:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005256:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800525a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800525e:	4abc      	ldr	r2, [pc, #752]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005260:	430b      	orrs	r3, r1
 8005262:	6553      	str	r3, [r2, #84]	; 0x54
 8005264:	e003      	b.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005266:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800526a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800526e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005276:	f002 0302 	and.w	r3, r2, #2
 800527a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800527e:	2300      	movs	r3, #0
 8005280:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005284:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005288:	460b      	mov	r3, r1
 800528a:	4313      	orrs	r3, r2
 800528c:	d043      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800528e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005296:	2b05      	cmp	r3, #5
 8005298:	d824      	bhi.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800529a:	a201      	add	r2, pc, #4	; (adr r2, 80052a0 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800529c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a0:	080052ed 	.word	0x080052ed
 80052a4:	080052b9 	.word	0x080052b9
 80052a8:	080052cf 	.word	0x080052cf
 80052ac:	080052ed 	.word	0x080052ed
 80052b0:	080052ed 	.word	0x080052ed
 80052b4:	080052ed 	.word	0x080052ed
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052bc:	3308      	adds	r3, #8
 80052be:	2101      	movs	r1, #1
 80052c0:	4618      	mov	r0, r3
 80052c2:	f000 ff71 	bl	80061a8 <RCCEx_PLL2_Config>
 80052c6:	4603      	mov	r3, r0
 80052c8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80052cc:	e00f      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80052ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052d2:	3328      	adds	r3, #40	; 0x28
 80052d4:	2101      	movs	r1, #1
 80052d6:	4618      	mov	r0, r3
 80052d8:	f001 f818 	bl	800630c <RCCEx_PLL3_Config>
 80052dc:	4603      	mov	r3, r0
 80052de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80052e2:	e004      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80052ea:	e000      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80052ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10b      	bne.n	800530e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80052f6:	4b96      	ldr	r3, [pc, #600]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80052f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052fa:	f023 0107 	bic.w	r1, r3, #7
 80052fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005302:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005306:	4a92      	ldr	r2, [pc, #584]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005308:	430b      	orrs	r3, r1
 800530a:	6553      	str	r3, [r2, #84]	; 0x54
 800530c:	e003      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800530e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005312:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005316:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800531a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531e:	f002 0304 	and.w	r3, r2, #4
 8005322:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005326:	2300      	movs	r3, #0
 8005328:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800532c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005330:	460b      	mov	r3, r1
 8005332:	4313      	orrs	r3, r2
 8005334:	d043      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005336:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800533a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800533e:	2b05      	cmp	r3, #5
 8005340:	d824      	bhi.n	800538c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8005342:	a201      	add	r2, pc, #4	; (adr r2, 8005348 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8005344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005348:	08005395 	.word	0x08005395
 800534c:	08005361 	.word	0x08005361
 8005350:	08005377 	.word	0x08005377
 8005354:	08005395 	.word	0x08005395
 8005358:	08005395 	.word	0x08005395
 800535c:	08005395 	.word	0x08005395
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005360:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005364:	3308      	adds	r3, #8
 8005366:	2101      	movs	r1, #1
 8005368:	4618      	mov	r0, r3
 800536a:	f000 ff1d 	bl	80061a8 <RCCEx_PLL2_Config>
 800536e:	4603      	mov	r3, r0
 8005370:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005374:	e00f      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005376:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800537a:	3328      	adds	r3, #40	; 0x28
 800537c:	2101      	movs	r1, #1
 800537e:	4618      	mov	r0, r3
 8005380:	f000 ffc4 	bl	800630c <RCCEx_PLL3_Config>
 8005384:	4603      	mov	r3, r0
 8005386:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800538a:	e004      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005392:	e000      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8005394:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005396:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10b      	bne.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800539e:	4b6c      	ldr	r3, [pc, #432]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80053a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a2:	f023 0107 	bic.w	r1, r3, #7
 80053a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053ae:	4a68      	ldr	r2, [pc, #416]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80053b0:	430b      	orrs	r3, r1
 80053b2:	6593      	str	r3, [r2, #88]	; 0x58
 80053b4:	e003      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80053ba:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80053be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c6:	f002 0320 	and.w	r3, r2, #32
 80053ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80053ce:	2300      	movs	r3, #0
 80053d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80053d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80053d8:	460b      	mov	r3, r1
 80053da:	4313      	orrs	r3, r2
 80053dc:	d055      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80053de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053ea:	d033      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80053ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053f0:	d82c      	bhi.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80053f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053f6:	d02f      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80053f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053fc:	d826      	bhi.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80053fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005402:	d02b      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005404:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005408:	d820      	bhi.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800540a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800540e:	d012      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8005410:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005414:	d81a      	bhi.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005416:	2b00      	cmp	r3, #0
 8005418:	d022      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800541a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800541e:	d115      	bne.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005420:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005424:	3308      	adds	r3, #8
 8005426:	2100      	movs	r1, #0
 8005428:	4618      	mov	r0, r3
 800542a:	f000 febd 	bl	80061a8 <RCCEx_PLL2_Config>
 800542e:	4603      	mov	r3, r0
 8005430:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005434:	e015      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005436:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800543a:	3328      	adds	r3, #40	; 0x28
 800543c:	2102      	movs	r1, #2
 800543e:	4618      	mov	r0, r3
 8005440:	f000 ff64 	bl	800630c <RCCEx_PLL3_Config>
 8005444:	4603      	mov	r3, r0
 8005446:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800544a:	e00a      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005452:	e006      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005454:	bf00      	nop
 8005456:	e004      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005458:	bf00      	nop
 800545a:	e002      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800545c:	bf00      	nop
 800545e:	e000      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005460:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005462:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10b      	bne.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800546a:	4b39      	ldr	r3, [pc, #228]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800546c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800546e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005472:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005476:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800547a:	4a35      	ldr	r2, [pc, #212]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800547c:	430b      	orrs	r3, r1
 800547e:	6553      	str	r3, [r2, #84]	; 0x54
 8005480:	e003      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005482:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005486:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800548a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800548e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005492:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005496:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800549a:	2300      	movs	r3, #0
 800549c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80054a0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80054a4:	460b      	mov	r3, r1
 80054a6:	4313      	orrs	r3, r2
 80054a8:	d058      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80054aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80054b2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80054b6:	d033      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80054b8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80054bc:	d82c      	bhi.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80054be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054c2:	d02f      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80054c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054c8:	d826      	bhi.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80054ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054ce:	d02b      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80054d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054d4:	d820      	bhi.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80054d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054da:	d012      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80054dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054e0:	d81a      	bhi.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d022      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80054e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ea:	d115      	bne.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054f0:	3308      	adds	r3, #8
 80054f2:	2100      	movs	r1, #0
 80054f4:	4618      	mov	r0, r3
 80054f6:	f000 fe57 	bl	80061a8 <RCCEx_PLL2_Config>
 80054fa:	4603      	mov	r3, r0
 80054fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005500:	e015      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005502:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005506:	3328      	adds	r3, #40	; 0x28
 8005508:	2102      	movs	r1, #2
 800550a:	4618      	mov	r0, r3
 800550c:	f000 fefe 	bl	800630c <RCCEx_PLL3_Config>
 8005510:	4603      	mov	r3, r0
 8005512:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005516:	e00a      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800551e:	e006      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005520:	bf00      	nop
 8005522:	e004      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005524:	bf00      	nop
 8005526:	e002      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005528:	bf00      	nop
 800552a:	e000      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800552c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800552e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10e      	bne.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005536:	4b06      	ldr	r3, [pc, #24]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800553a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800553e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005542:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005546:	4a02      	ldr	r2, [pc, #8]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005548:	430b      	orrs	r3, r1
 800554a:	6593      	str	r3, [r2, #88]	; 0x58
 800554c:	e006      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800554e:	bf00      	nop
 8005550:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005554:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005558:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800555c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005564:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005568:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800556c:	2300      	movs	r3, #0
 800556e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005572:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005576:	460b      	mov	r3, r1
 8005578:	4313      	orrs	r3, r2
 800557a:	d055      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800557c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005580:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005584:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005588:	d033      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800558a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800558e:	d82c      	bhi.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005590:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005594:	d02f      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005596:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800559a:	d826      	bhi.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800559c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80055a0:	d02b      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80055a2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80055a6:	d820      	bhi.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80055a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055ac:	d012      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80055ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055b2:	d81a      	bhi.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d022      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80055b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055bc:	d115      	bne.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055c2:	3308      	adds	r3, #8
 80055c4:	2100      	movs	r1, #0
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 fdee 	bl	80061a8 <RCCEx_PLL2_Config>
 80055cc:	4603      	mov	r3, r0
 80055ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80055d2:	e015      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80055d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055d8:	3328      	adds	r3, #40	; 0x28
 80055da:	2102      	movs	r1, #2
 80055dc:	4618      	mov	r0, r3
 80055de:	f000 fe95 	bl	800630c <RCCEx_PLL3_Config>
 80055e2:	4603      	mov	r3, r0
 80055e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80055e8:	e00a      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80055f0:	e006      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80055f2:	bf00      	nop
 80055f4:	e004      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80055f6:	bf00      	nop
 80055f8:	e002      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80055fa:	bf00      	nop
 80055fc:	e000      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80055fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005600:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10b      	bne.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005608:	4ba1      	ldr	r3, [pc, #644]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800560a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800560c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005610:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005614:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005618:	4a9d      	ldr	r2, [pc, #628]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800561a:	430b      	orrs	r3, r1
 800561c:	6593      	str	r3, [r2, #88]	; 0x58
 800561e:	e003      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005620:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005624:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005628:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800562c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005630:	f002 0308 	and.w	r3, r2, #8
 8005634:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005638:	2300      	movs	r3, #0
 800563a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800563e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005642:	460b      	mov	r3, r1
 8005644:	4313      	orrs	r3, r2
 8005646:	d01e      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005648:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800564c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005654:	d10c      	bne.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005656:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800565a:	3328      	adds	r3, #40	; 0x28
 800565c:	2102      	movs	r1, #2
 800565e:	4618      	mov	r0, r3
 8005660:	f000 fe54 	bl	800630c <RCCEx_PLL3_Config>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d002      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005670:	4b87      	ldr	r3, [pc, #540]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005674:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005678:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800567c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005680:	4a83      	ldr	r2, [pc, #524]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005682:	430b      	orrs	r3, r1
 8005684:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005686:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800568a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568e:	f002 0310 	and.w	r3, r2, #16
 8005692:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005696:	2300      	movs	r3, #0
 8005698:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800569c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80056a0:	460b      	mov	r3, r1
 80056a2:	4313      	orrs	r3, r2
 80056a4:	d01e      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80056a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80056ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056b2:	d10c      	bne.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80056b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056b8:	3328      	adds	r3, #40	; 0x28
 80056ba:	2102      	movs	r1, #2
 80056bc:	4618      	mov	r0, r3
 80056be:	f000 fe25 	bl	800630c <RCCEx_PLL3_Config>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d002      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80056ce:	4b70      	ldr	r3, [pc, #448]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80056d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80056d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80056de:	4a6c      	ldr	r2, [pc, #432]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80056e0:	430b      	orrs	r3, r1
 80056e2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80056e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ec:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80056f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80056f4:	2300      	movs	r3, #0
 80056f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056fa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80056fe:	460b      	mov	r3, r1
 8005700:	4313      	orrs	r3, r2
 8005702:	d03e      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005704:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005708:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800570c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005710:	d022      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8005712:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005716:	d81b      	bhi.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005718:	2b00      	cmp	r3, #0
 800571a:	d003      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800571c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005720:	d00b      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8005722:	e015      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005724:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005728:	3308      	adds	r3, #8
 800572a:	2100      	movs	r1, #0
 800572c:	4618      	mov	r0, r3
 800572e:	f000 fd3b 	bl	80061a8 <RCCEx_PLL2_Config>
 8005732:	4603      	mov	r3, r0
 8005734:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005738:	e00f      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800573a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800573e:	3328      	adds	r3, #40	; 0x28
 8005740:	2102      	movs	r1, #2
 8005742:	4618      	mov	r0, r3
 8005744:	f000 fde2 	bl	800630c <RCCEx_PLL3_Config>
 8005748:	4603      	mov	r3, r0
 800574a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800574e:	e004      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005756:	e000      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8005758:	bf00      	nop
    }

    if (ret == HAL_OK)
 800575a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10b      	bne.n	800577a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005762:	4b4b      	ldr	r3, [pc, #300]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005766:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800576a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800576e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005772:	4a47      	ldr	r2, [pc, #284]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005774:	430b      	orrs	r3, r1
 8005776:	6593      	str	r3, [r2, #88]	; 0x58
 8005778:	e003      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800577a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800577e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005782:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800578e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005790:	2300      	movs	r3, #0
 8005792:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005794:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005798:	460b      	mov	r3, r1
 800579a:	4313      	orrs	r3, r2
 800579c:	d03b      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800579e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80057aa:	d01f      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80057ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80057b0:	d818      	bhi.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80057b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057b6:	d003      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80057b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057bc:	d007      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80057be:	e011      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057c0:	4b33      	ldr	r3, [pc, #204]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80057c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c4:	4a32      	ldr	r2, [pc, #200]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80057c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80057cc:	e00f      	b.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057d2:	3328      	adds	r3, #40	; 0x28
 80057d4:	2101      	movs	r1, #1
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 fd98 	bl	800630c <RCCEx_PLL3_Config>
 80057dc:	4603      	mov	r3, r0
 80057de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80057e2:	e004      	b.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80057ea:	e000      	b.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80057ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10b      	bne.n	800580e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057f6:	4b26      	ldr	r3, [pc, #152]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80057f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057fa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80057fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005806:	4a22      	ldr	r2, [pc, #136]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005808:	430b      	orrs	r3, r1
 800580a:	6553      	str	r3, [r2, #84]	; 0x54
 800580c:	e003      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800580e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005812:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005816:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800581a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005822:	673b      	str	r3, [r7, #112]	; 0x70
 8005824:	2300      	movs	r3, #0
 8005826:	677b      	str	r3, [r7, #116]	; 0x74
 8005828:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800582c:	460b      	mov	r3, r1
 800582e:	4313      	orrs	r3, r2
 8005830:	d034      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005832:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005838:	2b00      	cmp	r3, #0
 800583a:	d003      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800583c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005840:	d007      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8005842:	e011      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005844:	4b12      	ldr	r3, [pc, #72]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005848:	4a11      	ldr	r2, [pc, #68]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800584a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800584e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005850:	e00e      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005852:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005856:	3308      	adds	r3, #8
 8005858:	2102      	movs	r1, #2
 800585a:	4618      	mov	r0, r3
 800585c:	f000 fca4 	bl	80061a8 <RCCEx_PLL2_Config>
 8005860:	4603      	mov	r3, r0
 8005862:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005866:	e003      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800586e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005870:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10d      	bne.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005878:	4b05      	ldr	r3, [pc, #20]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800587a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800587c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005880:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005886:	4a02      	ldr	r2, [pc, #8]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005888:	430b      	orrs	r3, r1
 800588a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800588c:	e006      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800588e:	bf00      	nop
 8005890:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005894:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005898:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800589c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80058a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80058aa:	2300      	movs	r3, #0
 80058ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058ae:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80058b2:	460b      	mov	r3, r1
 80058b4:	4313      	orrs	r3, r2
 80058b6:	d00c      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80058b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058bc:	3328      	adds	r3, #40	; 0x28
 80058be:	2102      	movs	r1, #2
 80058c0:	4618      	mov	r0, r3
 80058c2:	f000 fd23 	bl	800630c <RCCEx_PLL3_Config>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d002      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80058d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058da:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80058de:	663b      	str	r3, [r7, #96]	; 0x60
 80058e0:	2300      	movs	r3, #0
 80058e2:	667b      	str	r3, [r7, #100]	; 0x64
 80058e4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80058e8:	460b      	mov	r3, r1
 80058ea:	4313      	orrs	r3, r2
 80058ec:	d038      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80058ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058fa:	d018      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80058fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005900:	d811      	bhi.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8005902:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005906:	d014      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8005908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800590c:	d80b      	bhi.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800590e:	2b00      	cmp	r3, #0
 8005910:	d011      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8005912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005916:	d106      	bne.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005918:	4bc3      	ldr	r3, [pc, #780]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800591a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591c:	4ac2      	ldr	r2, [pc, #776]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800591e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005922:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005924:	e008      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800592c:	e004      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800592e:	bf00      	nop
 8005930:	e002      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005932:	bf00      	nop
 8005934:	e000      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005936:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005938:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800593c:	2b00      	cmp	r3, #0
 800593e:	d10b      	bne.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005940:	4bb9      	ldr	r3, [pc, #740]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005944:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005948:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800594c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005950:	4ab5      	ldr	r2, [pc, #724]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005952:	430b      	orrs	r3, r1
 8005954:	6553      	str	r3, [r2, #84]	; 0x54
 8005956:	e003      	b.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005958:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800595c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005960:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005968:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800596c:	65bb      	str	r3, [r7, #88]	; 0x58
 800596e:	2300      	movs	r3, #0
 8005970:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005972:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005976:	460b      	mov	r3, r1
 8005978:	4313      	orrs	r3, r2
 800597a:	d009      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800597c:	4baa      	ldr	r3, [pc, #680]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800597e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005980:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005984:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005988:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800598a:	4aa7      	ldr	r2, [pc, #668]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800598c:	430b      	orrs	r3, r1
 800598e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005990:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005998:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800599c:	653b      	str	r3, [r7, #80]	; 0x50
 800599e:	2300      	movs	r3, #0
 80059a0:	657b      	str	r3, [r7, #84]	; 0x54
 80059a2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80059a6:	460b      	mov	r3, r1
 80059a8:	4313      	orrs	r3, r2
 80059aa:	d009      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80059ac:	4b9e      	ldr	r3, [pc, #632]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80059ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059b0:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80059b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ba:	4a9b      	ldr	r2, [pc, #620]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80059bc:	430b      	orrs	r3, r1
 80059be:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80059c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80059cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80059ce:	2300      	movs	r3, #0
 80059d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059d2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80059d6:	460b      	mov	r3, r1
 80059d8:	4313      	orrs	r3, r2
 80059da:	d009      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80059dc:	4b92      	ldr	r3, [pc, #584]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80059de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059e0:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 80059e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059ea:	4a8f      	ldr	r2, [pc, #572]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80059ec:	430b      	orrs	r3, r1
 80059ee:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80059f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f8:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80059fc:	643b      	str	r3, [r7, #64]	; 0x40
 80059fe:	2300      	movs	r3, #0
 8005a00:	647b      	str	r3, [r7, #68]	; 0x44
 8005a02:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005a06:	460b      	mov	r3, r1
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	d00e      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a0c:	4b86      	ldr	r3, [pc, #536]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	4a85      	ldr	r2, [pc, #532]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a16:	6113      	str	r3, [r2, #16]
 8005a18:	4b83      	ldr	r3, [pc, #524]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a1a:	6919      	ldr	r1, [r3, #16]
 8005a1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a20:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005a24:	4a80      	ldr	r2, [pc, #512]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a26:	430b      	orrs	r3, r1
 8005a28:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005a2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a32:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005a36:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a38:	2300      	movs	r3, #0
 8005a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a3c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005a40:	460b      	mov	r3, r1
 8005a42:	4313      	orrs	r3, r2
 8005a44:	d009      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005a46:	4b78      	ldr	r3, [pc, #480]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a4a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005a4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a54:	4a74      	ldr	r2, [pc, #464]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a56:	430b      	orrs	r3, r1
 8005a58:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005a5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a62:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005a66:	633b      	str	r3, [r7, #48]	; 0x30
 8005a68:	2300      	movs	r3, #0
 8005a6a:	637b      	str	r3, [r7, #52]	; 0x34
 8005a6c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005a70:	460b      	mov	r3, r1
 8005a72:	4313      	orrs	r3, r2
 8005a74:	d00a      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005a76:	4b6c      	ldr	r3, [pc, #432]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a7a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005a7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a86:	4a68      	ldr	r2, [pc, #416]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a88:	430b      	orrs	r3, r1
 8005a8a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005a8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a94:	2100      	movs	r1, #0
 8005a96:	62b9      	str	r1, [r7, #40]	; 0x28
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a9e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	d011      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005aa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005aac:	3308      	adds	r3, #8
 8005aae:	2100      	movs	r1, #0
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f000 fb79 	bl	80061a8 <RCCEx_PLL2_Config>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005abc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d003      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ac4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005ac8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005acc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad4:	2100      	movs	r1, #0
 8005ad6:	6239      	str	r1, [r7, #32]
 8005ad8:	f003 0302 	and.w	r3, r3, #2
 8005adc:	627b      	str	r3, [r7, #36]	; 0x24
 8005ade:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	d011      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ae8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005aec:	3308      	adds	r3, #8
 8005aee:	2101      	movs	r1, #1
 8005af0:	4618      	mov	r0, r3
 8005af2:	f000 fb59 	bl	80061a8 <RCCEx_PLL2_Config>
 8005af6:	4603      	mov	r3, r0
 8005af8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005afc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d003      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b04:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005b08:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005b0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b14:	2100      	movs	r1, #0
 8005b16:	61b9      	str	r1, [r7, #24]
 8005b18:	f003 0304 	and.w	r3, r3, #4
 8005b1c:	61fb      	str	r3, [r7, #28]
 8005b1e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005b22:	460b      	mov	r3, r1
 8005b24:	4313      	orrs	r3, r2
 8005b26:	d011      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b2c:	3308      	adds	r3, #8
 8005b2e:	2102      	movs	r1, #2
 8005b30:	4618      	mov	r0, r3
 8005b32:	f000 fb39 	bl	80061a8 <RCCEx_PLL2_Config>
 8005b36:	4603      	mov	r3, r0
 8005b38:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005b3c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d003      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b44:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005b48:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005b4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b54:	2100      	movs	r1, #0
 8005b56:	6139      	str	r1, [r7, #16]
 8005b58:	f003 0308 	and.w	r3, r3, #8
 8005b5c:	617b      	str	r3, [r7, #20]
 8005b5e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005b62:	460b      	mov	r3, r1
 8005b64:	4313      	orrs	r3, r2
 8005b66:	d011      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b6c:	3328      	adds	r3, #40	; 0x28
 8005b6e:	2100      	movs	r1, #0
 8005b70:	4618      	mov	r0, r3
 8005b72:	f000 fbcb 	bl	800630c <RCCEx_PLL3_Config>
 8005b76:	4603      	mov	r3, r0
 8005b78:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8005b7c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d003      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b84:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005b88:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005b8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b94:	2100      	movs	r1, #0
 8005b96:	60b9      	str	r1, [r7, #8]
 8005b98:	f003 0310 	and.w	r3, r3, #16
 8005b9c:	60fb      	str	r3, [r7, #12]
 8005b9e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	d011      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ba8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bac:	3328      	adds	r3, #40	; 0x28
 8005bae:	2101      	movs	r1, #1
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f000 fbab 	bl	800630c <RCCEx_PLL3_Config>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005bbc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d003      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005bc8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005bcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	6039      	str	r1, [r7, #0]
 8005bd8:	f003 0320 	and.w	r3, r3, #32
 8005bdc:	607b      	str	r3, [r7, #4]
 8005bde:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005be2:	460b      	mov	r3, r1
 8005be4:	4313      	orrs	r3, r2
 8005be6:	d011      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005be8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bec:	3328      	adds	r3, #40	; 0x28
 8005bee:	2102      	movs	r1, #2
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f000 fb8b 	bl	800630c <RCCEx_PLL3_Config>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005bfc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d003      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c04:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c08:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8005c0c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d101      	bne.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8005c14:	2300      	movs	r3, #0
 8005c16:	e000      	b.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8005c20:	46bd      	mov	sp, r7
 8005c22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c26:	bf00      	nop
 8005c28:	58024400 	.word	0x58024400

08005c2c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005c30:	f7fe fde2 	bl	80047f8 <HAL_RCC_GetHCLKFreq>
 8005c34:	4602      	mov	r2, r0
 8005c36:	4b06      	ldr	r3, [pc, #24]	; (8005c50 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	091b      	lsrs	r3, r3, #4
 8005c3c:	f003 0307 	and.w	r3, r3, #7
 8005c40:	4904      	ldr	r1, [pc, #16]	; (8005c54 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005c42:	5ccb      	ldrb	r3, [r1, r3]
 8005c44:	f003 031f 	and.w	r3, r3, #31
 8005c48:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	58024400 	.word	0x58024400
 8005c54:	08008618 	.word	0x08008618

08005c58 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b089      	sub	sp, #36	; 0x24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c60:	4ba1      	ldr	r3, [pc, #644]	; (8005ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c64:	f003 0303 	and.w	r3, r3, #3
 8005c68:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005c6a:	4b9f      	ldr	r3, [pc, #636]	; (8005ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c6e:	0b1b      	lsrs	r3, r3, #12
 8005c70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c74:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005c76:	4b9c      	ldr	r3, [pc, #624]	; (8005ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7a:	091b      	lsrs	r3, r3, #4
 8005c7c:	f003 0301 	and.w	r3, r3, #1
 8005c80:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005c82:	4b99      	ldr	r3, [pc, #612]	; (8005ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c86:	08db      	lsrs	r3, r3, #3
 8005c88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	fb02 f303 	mul.w	r3, r2, r3
 8005c92:	ee07 3a90 	vmov	s15, r3
 8005c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 8111 	beq.w	8005ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	f000 8083 	beq.w	8005db4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	f200 80a1 	bhi.w	8005df8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d003      	beq.n	8005cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d056      	beq.n	8005d70 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005cc2:	e099      	b.n	8005df8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cc4:	4b88      	ldr	r3, [pc, #544]	; (8005ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0320 	and.w	r3, r3, #32
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d02d      	beq.n	8005d2c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005cd0:	4b85      	ldr	r3, [pc, #532]	; (8005ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	08db      	lsrs	r3, r3, #3
 8005cd6:	f003 0303 	and.w	r3, r3, #3
 8005cda:	4a84      	ldr	r2, [pc, #528]	; (8005eec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ce0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	ee07 3a90 	vmov	s15, r3
 8005ce8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	ee07 3a90 	vmov	s15, r3
 8005cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cfa:	4b7b      	ldr	r3, [pc, #492]	; (8005ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d02:	ee07 3a90 	vmov	s15, r3
 8005d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d0e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d26:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005d2a:	e087      	b.n	8005e3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	ee07 3a90 	vmov	s15, r3
 8005d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d36:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d3e:	4b6a      	ldr	r3, [pc, #424]	; (8005ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d46:	ee07 3a90 	vmov	s15, r3
 8005d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d52:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d6e:	e065      	b.n	8005e3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	ee07 3a90 	vmov	s15, r3
 8005d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d7a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d82:	4b59      	ldr	r3, [pc, #356]	; (8005ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d8a:	ee07 3a90 	vmov	s15, r3
 8005d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d92:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d96:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005da2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005db2:	e043      	b.n	8005e3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	ee07 3a90 	vmov	s15, r3
 8005dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dbe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005efc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dc6:	4b48      	ldr	r3, [pc, #288]	; (8005ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dce:	ee07 3a90 	vmov	s15, r3
 8005dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dda:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005de6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005df2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005df6:	e021      	b.n	8005e3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	ee07 3a90 	vmov	s15, r3
 8005dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e02:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e0a:	4b37      	ldr	r3, [pc, #220]	; (8005ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e12:	ee07 3a90 	vmov	s15, r3
 8005e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e1e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e3a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005e3c:	4b2a      	ldr	r3, [pc, #168]	; (8005ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e40:	0a5b      	lsrs	r3, r3, #9
 8005e42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e46:	ee07 3a90 	vmov	s15, r3
 8005e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e56:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e62:	ee17 2a90 	vmov	r2, s15
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005e6a:	4b1f      	ldr	r3, [pc, #124]	; (8005ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6e:	0c1b      	lsrs	r3, r3, #16
 8005e70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e74:	ee07 3a90 	vmov	s15, r3
 8005e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e84:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e90:	ee17 2a90 	vmov	r2, s15
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005e98:	4b13      	ldr	r3, [pc, #76]	; (8005ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9c:	0e1b      	lsrs	r3, r3, #24
 8005e9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ea2:	ee07 3a90 	vmov	s15, r3
 8005ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005eae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005eb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005eb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005eba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ebe:	ee17 2a90 	vmov	r2, s15
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005ec6:	e008      	b.n	8005eda <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	609a      	str	r2, [r3, #8]
}
 8005eda:	bf00      	nop
 8005edc:	3724      	adds	r7, #36	; 0x24
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	58024400 	.word	0x58024400
 8005eec:	03d09000 	.word	0x03d09000
 8005ef0:	46000000 	.word	0x46000000
 8005ef4:	4c742400 	.word	0x4c742400
 8005ef8:	4a742400 	.word	0x4a742400
 8005efc:	4af42400 	.word	0x4af42400

08005f00 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b089      	sub	sp, #36	; 0x24
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f08:	4ba1      	ldr	r3, [pc, #644]	; (8006190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0c:	f003 0303 	and.w	r3, r3, #3
 8005f10:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005f12:	4b9f      	ldr	r3, [pc, #636]	; (8006190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f16:	0d1b      	lsrs	r3, r3, #20
 8005f18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f1c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005f1e:	4b9c      	ldr	r3, [pc, #624]	; (8006190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f22:	0a1b      	lsrs	r3, r3, #8
 8005f24:	f003 0301 	and.w	r3, r3, #1
 8005f28:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005f2a:	4b99      	ldr	r3, [pc, #612]	; (8006190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f2e:	08db      	lsrs	r3, r3, #3
 8005f30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	fb02 f303 	mul.w	r3, r2, r3
 8005f3a:	ee07 3a90 	vmov	s15, r3
 8005f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f000 8111 	beq.w	8006170 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	f000 8083 	beq.w	800605c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	f200 80a1 	bhi.w	80060a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d003      	beq.n	8005f6c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d056      	beq.n	8006018 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005f6a:	e099      	b.n	80060a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f6c:	4b88      	ldr	r3, [pc, #544]	; (8006190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0320 	and.w	r3, r3, #32
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d02d      	beq.n	8005fd4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f78:	4b85      	ldr	r3, [pc, #532]	; (8006190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	08db      	lsrs	r3, r3, #3
 8005f7e:	f003 0303 	and.w	r3, r3, #3
 8005f82:	4a84      	ldr	r2, [pc, #528]	; (8006194 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005f84:	fa22 f303 	lsr.w	r3, r2, r3
 8005f88:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	ee07 3a90 	vmov	s15, r3
 8005f90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	ee07 3a90 	vmov	s15, r3
 8005f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fa2:	4b7b      	ldr	r3, [pc, #492]	; (8006190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005faa:	ee07 3a90 	vmov	s15, r3
 8005fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fb6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006198 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005fd2:	e087      	b.n	80060e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	ee07 3a90 	vmov	s15, r3
 8005fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fde:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800619c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fe6:	4b6a      	ldr	r3, [pc, #424]	; (8006190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fee:	ee07 3a90 	vmov	s15, r3
 8005ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ff6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ffa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006198 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006006:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800600a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800600e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006012:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006016:	e065      	b.n	80060e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	ee07 3a90 	vmov	s15, r3
 800601e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006022:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80061a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800602a:	4b59      	ldr	r3, [pc, #356]	; (8006190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800602c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006032:	ee07 3a90 	vmov	s15, r3
 8006036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800603a:	ed97 6a03 	vldr	s12, [r7, #12]
 800603e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006198 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800604a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800604e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006056:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800605a:	e043      	b.n	80060e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	ee07 3a90 	vmov	s15, r3
 8006062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006066:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80061a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800606a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800606e:	4b48      	ldr	r3, [pc, #288]	; (8006190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006076:	ee07 3a90 	vmov	s15, r3
 800607a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800607e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006082:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006198 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800608a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800608e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800609a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800609e:	e021      	b.n	80060e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	ee07 3a90 	vmov	s15, r3
 80060a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060aa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80061a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80060ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060b2:	4b37      	ldr	r3, [pc, #220]	; (8006190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ba:	ee07 3a90 	vmov	s15, r3
 80060be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80060c6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006198 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060e2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80060e4:	4b2a      	ldr	r3, [pc, #168]	; (8006190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e8:	0a5b      	lsrs	r3, r3, #9
 80060ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060ee:	ee07 3a90 	vmov	s15, r3
 80060f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006102:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006106:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800610a:	ee17 2a90 	vmov	r2, s15
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006112:	4b1f      	ldr	r3, [pc, #124]	; (8006190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006116:	0c1b      	lsrs	r3, r3, #16
 8006118:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800611c:	ee07 3a90 	vmov	s15, r3
 8006120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006124:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006128:	ee37 7a87 	vadd.f32	s14, s15, s14
 800612c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006130:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006134:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006138:	ee17 2a90 	vmov	r2, s15
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006140:	4b13      	ldr	r3, [pc, #76]	; (8006190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006144:	0e1b      	lsrs	r3, r3, #24
 8006146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800614a:	ee07 3a90 	vmov	s15, r3
 800614e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006152:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006156:	ee37 7a87 	vadd.f32	s14, s15, s14
 800615a:	edd7 6a07 	vldr	s13, [r7, #28]
 800615e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006162:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006166:	ee17 2a90 	vmov	r2, s15
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800616e:	e008      	b.n	8006182 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	609a      	str	r2, [r3, #8]
}
 8006182:	bf00      	nop
 8006184:	3724      	adds	r7, #36	; 0x24
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	58024400 	.word	0x58024400
 8006194:	03d09000 	.word	0x03d09000
 8006198:	46000000 	.word	0x46000000
 800619c:	4c742400 	.word	0x4c742400
 80061a0:	4a742400 	.word	0x4a742400
 80061a4:	4af42400 	.word	0x4af42400

080061a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061b2:	2300      	movs	r3, #0
 80061b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80061b6:	4b53      	ldr	r3, [pc, #332]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 80061b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ba:	f003 0303 	and.w	r3, r3, #3
 80061be:	2b03      	cmp	r3, #3
 80061c0:	d101      	bne.n	80061c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e099      	b.n	80062fa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80061c6:	4b4f      	ldr	r3, [pc, #316]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a4e      	ldr	r2, [pc, #312]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 80061cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80061d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061d2:	f7fc faf3 	bl	80027bc <HAL_GetTick>
 80061d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80061d8:	e008      	b.n	80061ec <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80061da:	f7fc faef 	bl	80027bc <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	d901      	bls.n	80061ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e086      	b.n	80062fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80061ec:	4b45      	ldr	r3, [pc, #276]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1f0      	bne.n	80061da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80061f8:	4b42      	ldr	r3, [pc, #264]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 80061fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061fc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	031b      	lsls	r3, r3, #12
 8006206:	493f      	ldr	r1, [pc, #252]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 8006208:	4313      	orrs	r3, r2
 800620a:	628b      	str	r3, [r1, #40]	; 0x28
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	3b01      	subs	r3, #1
 8006212:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	3b01      	subs	r3, #1
 800621c:	025b      	lsls	r3, r3, #9
 800621e:	b29b      	uxth	r3, r3
 8006220:	431a      	orrs	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	3b01      	subs	r3, #1
 8006228:	041b      	lsls	r3, r3, #16
 800622a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800622e:	431a      	orrs	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	3b01      	subs	r3, #1
 8006236:	061b      	lsls	r3, r3, #24
 8006238:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800623c:	4931      	ldr	r1, [pc, #196]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 800623e:	4313      	orrs	r3, r2
 8006240:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006242:	4b30      	ldr	r3, [pc, #192]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 8006244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006246:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	492d      	ldr	r1, [pc, #180]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 8006250:	4313      	orrs	r3, r2
 8006252:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006254:	4b2b      	ldr	r3, [pc, #172]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 8006256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006258:	f023 0220 	bic.w	r2, r3, #32
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	4928      	ldr	r1, [pc, #160]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 8006262:	4313      	orrs	r3, r2
 8006264:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006266:	4b27      	ldr	r3, [pc, #156]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 8006268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626a:	4a26      	ldr	r2, [pc, #152]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 800626c:	f023 0310 	bic.w	r3, r3, #16
 8006270:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006272:	4b24      	ldr	r3, [pc, #144]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 8006274:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006276:	4b24      	ldr	r3, [pc, #144]	; (8006308 <RCCEx_PLL2_Config+0x160>)
 8006278:	4013      	ands	r3, r2
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	69d2      	ldr	r2, [r2, #28]
 800627e:	00d2      	lsls	r2, r2, #3
 8006280:	4920      	ldr	r1, [pc, #128]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 8006282:	4313      	orrs	r3, r2
 8006284:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006286:	4b1f      	ldr	r3, [pc, #124]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 8006288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628a:	4a1e      	ldr	r2, [pc, #120]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 800628c:	f043 0310 	orr.w	r3, r3, #16
 8006290:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d106      	bne.n	80062a6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006298:	4b1a      	ldr	r3, [pc, #104]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 800629a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629c:	4a19      	ldr	r2, [pc, #100]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 800629e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80062a4:	e00f      	b.n	80062c6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d106      	bne.n	80062ba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80062ac:	4b15      	ldr	r3, [pc, #84]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 80062ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b0:	4a14      	ldr	r2, [pc, #80]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 80062b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80062b8:	e005      	b.n	80062c6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80062ba:	4b12      	ldr	r3, [pc, #72]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 80062bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062be:	4a11      	ldr	r2, [pc, #68]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 80062c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80062c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80062c6:	4b0f      	ldr	r3, [pc, #60]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a0e      	ldr	r2, [pc, #56]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 80062cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80062d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062d2:	f7fc fa73 	bl	80027bc <HAL_GetTick>
 80062d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80062d8:	e008      	b.n	80062ec <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80062da:	f7fc fa6f 	bl	80027bc <HAL_GetTick>
 80062de:	4602      	mov	r2, r0
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d901      	bls.n	80062ec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	e006      	b.n	80062fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80062ec:	4b05      	ldr	r3, [pc, #20]	; (8006304 <RCCEx_PLL2_Config+0x15c>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d0f0      	beq.n	80062da <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80062f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	58024400 	.word	0x58024400
 8006308:	ffff0007 	.word	0xffff0007

0800630c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006316:	2300      	movs	r3, #0
 8006318:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800631a:	4b53      	ldr	r3, [pc, #332]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 800631c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631e:	f003 0303 	and.w	r3, r3, #3
 8006322:	2b03      	cmp	r3, #3
 8006324:	d101      	bne.n	800632a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e099      	b.n	800645e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800632a:	4b4f      	ldr	r3, [pc, #316]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a4e      	ldr	r2, [pc, #312]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 8006330:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006334:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006336:	f7fc fa41 	bl	80027bc <HAL_GetTick>
 800633a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800633c:	e008      	b.n	8006350 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800633e:	f7fc fa3d 	bl	80027bc <HAL_GetTick>
 8006342:	4602      	mov	r2, r0
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	2b02      	cmp	r3, #2
 800634a:	d901      	bls.n	8006350 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	e086      	b.n	800645e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006350:	4b45      	ldr	r3, [pc, #276]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1f0      	bne.n	800633e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800635c:	4b42      	ldr	r3, [pc, #264]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 800635e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006360:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	051b      	lsls	r3, r3, #20
 800636a:	493f      	ldr	r1, [pc, #252]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 800636c:	4313      	orrs	r3, r2
 800636e:	628b      	str	r3, [r1, #40]	; 0x28
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	3b01      	subs	r3, #1
 8006376:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	3b01      	subs	r3, #1
 8006380:	025b      	lsls	r3, r3, #9
 8006382:	b29b      	uxth	r3, r3
 8006384:	431a      	orrs	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	3b01      	subs	r3, #1
 800638c:	041b      	lsls	r3, r3, #16
 800638e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006392:	431a      	orrs	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	3b01      	subs	r3, #1
 800639a:	061b      	lsls	r3, r3, #24
 800639c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80063a0:	4931      	ldr	r1, [pc, #196]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 80063a2:	4313      	orrs	r3, r2
 80063a4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80063a6:	4b30      	ldr	r3, [pc, #192]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 80063a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	492d      	ldr	r1, [pc, #180]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 80063b4:	4313      	orrs	r3, r2
 80063b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80063b8:	4b2b      	ldr	r3, [pc, #172]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 80063ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063bc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	699b      	ldr	r3, [r3, #24]
 80063c4:	4928      	ldr	r1, [pc, #160]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80063ca:	4b27      	ldr	r3, [pc, #156]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 80063cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ce:	4a26      	ldr	r2, [pc, #152]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 80063d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80063d6:	4b24      	ldr	r3, [pc, #144]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 80063d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063da:	4b24      	ldr	r3, [pc, #144]	; (800646c <RCCEx_PLL3_Config+0x160>)
 80063dc:	4013      	ands	r3, r2
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	69d2      	ldr	r2, [r2, #28]
 80063e2:	00d2      	lsls	r2, r2, #3
 80063e4:	4920      	ldr	r1, [pc, #128]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 80063e6:	4313      	orrs	r3, r2
 80063e8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80063ea:	4b1f      	ldr	r3, [pc, #124]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 80063ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ee:	4a1e      	ldr	r2, [pc, #120]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 80063f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d106      	bne.n	800640a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80063fc:	4b1a      	ldr	r3, [pc, #104]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 80063fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006400:	4a19      	ldr	r2, [pc, #100]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 8006402:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006406:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006408:	e00f      	b.n	800642a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d106      	bne.n	800641e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006410:	4b15      	ldr	r3, [pc, #84]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 8006412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006414:	4a14      	ldr	r2, [pc, #80]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 8006416:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800641a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800641c:	e005      	b.n	800642a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800641e:	4b12      	ldr	r3, [pc, #72]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 8006420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006422:	4a11      	ldr	r2, [pc, #68]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 8006424:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006428:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800642a:	4b0f      	ldr	r3, [pc, #60]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a0e      	ldr	r2, [pc, #56]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 8006430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006434:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006436:	f7fc f9c1 	bl	80027bc <HAL_GetTick>
 800643a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800643c:	e008      	b.n	8006450 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800643e:	f7fc f9bd 	bl	80027bc <HAL_GetTick>
 8006442:	4602      	mov	r2, r0
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	2b02      	cmp	r3, #2
 800644a:	d901      	bls.n	8006450 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	e006      	b.n	800645e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006450:	4b05      	ldr	r3, [pc, #20]	; (8006468 <RCCEx_PLL3_Config+0x15c>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006458:	2b00      	cmp	r3, #0
 800645a:	d0f0      	beq.n	800643e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800645c:	7bfb      	ldrb	r3, [r7, #15]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	58024400 	.word	0x58024400
 800646c:	ffff0007 	.word	0xffff0007

08006470 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d101      	bne.n	8006482 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e042      	b.n	8006508 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006488:	2b00      	cmp	r3, #0
 800648a:	d106      	bne.n	800649a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f7fb ffc3 	bl	8002420 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2224      	movs	r2, #36	; 0x24
 800649e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f022 0201 	bic.w	r2, r2, #1
 80064b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 fd5c 	bl	8006f70 <UART_SetConfig>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d101      	bne.n	80064c2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e022      	b.n	8006508 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d002      	beq.n	80064d0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f001 fbbc 	bl	8007c48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	685a      	ldr	r2, [r3, #4]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	689a      	ldr	r2, [r3, #8]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f042 0201 	orr.w	r2, r2, #1
 80064fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f001 fc43 	bl	8007d8c <UART_CheckIdleState>
 8006506:	4603      	mov	r3, r0
}
 8006508:	4618      	mov	r0, r3
 800650a:	3708      	adds	r7, #8
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b08a      	sub	sp, #40	; 0x28
 8006514:	af02      	add	r7, sp, #8
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	603b      	str	r3, [r7, #0]
 800651c:	4613      	mov	r3, r2
 800651e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006526:	2b20      	cmp	r3, #32
 8006528:	d17b      	bne.n	8006622 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d002      	beq.n	8006536 <HAL_UART_Transmit+0x26>
 8006530:	88fb      	ldrh	r3, [r7, #6]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d101      	bne.n	800653a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e074      	b.n	8006624 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2221      	movs	r2, #33	; 0x21
 8006546:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800654a:	f7fc f937 	bl	80027bc <HAL_GetTick>
 800654e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	88fa      	ldrh	r2, [r7, #6]
 8006554:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	88fa      	ldrh	r2, [r7, #6]
 800655c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006568:	d108      	bne.n	800657c <HAL_UART_Transmit+0x6c>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d104      	bne.n	800657c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006572:	2300      	movs	r3, #0
 8006574:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	61bb      	str	r3, [r7, #24]
 800657a:	e003      	b.n	8006584 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006580:	2300      	movs	r3, #0
 8006582:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006584:	e030      	b.n	80065e8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	9300      	str	r3, [sp, #0]
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	2200      	movs	r2, #0
 800658e:	2180      	movs	r1, #128	; 0x80
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f001 fca5 	bl	8007ee0 <UART_WaitOnFlagUntilTimeout>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d005      	beq.n	80065a8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2220      	movs	r2, #32
 80065a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e03d      	b.n	8006624 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d10b      	bne.n	80065c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	881b      	ldrh	r3, [r3, #0]
 80065b2:	461a      	mov	r2, r3
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065bc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	3302      	adds	r3, #2
 80065c2:	61bb      	str	r3, [r7, #24]
 80065c4:	e007      	b.n	80065d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	781a      	ldrb	r2, [r3, #0]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	3301      	adds	r3, #1
 80065d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80065dc:	b29b      	uxth	r3, r3
 80065de:	3b01      	subs	r3, #1
 80065e0:	b29a      	uxth	r2, r3
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d1c8      	bne.n	8006586 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	9300      	str	r3, [sp, #0]
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	2200      	movs	r2, #0
 80065fc:	2140      	movs	r1, #64	; 0x40
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	f001 fc6e 	bl	8007ee0 <UART_WaitOnFlagUntilTimeout>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d005      	beq.n	8006616 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2220      	movs	r2, #32
 800660e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e006      	b.n	8006624 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2220      	movs	r2, #32
 800661a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800661e:	2300      	movs	r3, #0
 8006620:	e000      	b.n	8006624 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006622:	2302      	movs	r3, #2
  }
}
 8006624:	4618      	mov	r0, r3
 8006626:	3720      	adds	r7, #32
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b08a      	sub	sp, #40	; 0x28
 8006630:	af02      	add	r7, sp, #8
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	603b      	str	r3, [r7, #0]
 8006638:	4613      	mov	r3, r2
 800663a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006642:	2b20      	cmp	r3, #32
 8006644:	f040 80b5 	bne.w	80067b2 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d002      	beq.n	8006654 <HAL_UART_Receive+0x28>
 800664e:	88fb      	ldrh	r3, [r7, #6]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d101      	bne.n	8006658 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e0ad      	b.n	80067b4 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2222      	movs	r2, #34	; 0x22
 8006664:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800666e:	f7fc f8a5 	bl	80027bc <HAL_GetTick>
 8006672:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	88fa      	ldrh	r2, [r7, #6]
 8006678:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	88fa      	ldrh	r2, [r7, #6]
 8006680:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800668c:	d10e      	bne.n	80066ac <HAL_UART_Receive+0x80>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d105      	bne.n	80066a2 <HAL_UART_Receive+0x76>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f240 12ff 	movw	r2, #511	; 0x1ff
 800669c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80066a0:	e02d      	b.n	80066fe <HAL_UART_Receive+0xd2>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	22ff      	movs	r2, #255	; 0xff
 80066a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80066aa:	e028      	b.n	80066fe <HAL_UART_Receive+0xd2>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d10d      	bne.n	80066d0 <HAL_UART_Receive+0xa4>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d104      	bne.n	80066c6 <HAL_UART_Receive+0x9a>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	22ff      	movs	r2, #255	; 0xff
 80066c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80066c4:	e01b      	b.n	80066fe <HAL_UART_Receive+0xd2>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	227f      	movs	r2, #127	; 0x7f
 80066ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80066ce:	e016      	b.n	80066fe <HAL_UART_Receive+0xd2>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066d8:	d10d      	bne.n	80066f6 <HAL_UART_Receive+0xca>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d104      	bne.n	80066ec <HAL_UART_Receive+0xc0>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	227f      	movs	r2, #127	; 0x7f
 80066e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80066ea:	e008      	b.n	80066fe <HAL_UART_Receive+0xd2>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	223f      	movs	r2, #63	; 0x3f
 80066f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80066f4:	e003      	b.n	80066fe <HAL_UART_Receive+0xd2>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006704:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800670e:	d108      	bne.n	8006722 <HAL_UART_Receive+0xf6>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d104      	bne.n	8006722 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006718:	2300      	movs	r3, #0
 800671a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	61bb      	str	r3, [r7, #24]
 8006720:	e003      	b.n	800672a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006726:	2300      	movs	r3, #0
 8006728:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800672a:	e036      	b.n	800679a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	9300      	str	r3, [sp, #0]
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	2200      	movs	r2, #0
 8006734:	2120      	movs	r1, #32
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	f001 fbd2 	bl	8007ee0 <UART_WaitOnFlagUntilTimeout>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d005      	beq.n	800674e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2220      	movs	r2, #32
 8006746:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e032      	b.n	80067b4 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d10c      	bne.n	800676e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675a:	b29a      	uxth	r2, r3
 800675c:	8a7b      	ldrh	r3, [r7, #18]
 800675e:	4013      	ands	r3, r2
 8006760:	b29a      	uxth	r2, r3
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	3302      	adds	r3, #2
 800676a:	61bb      	str	r3, [r7, #24]
 800676c:	e00c      	b.n	8006788 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006774:	b2da      	uxtb	r2, r3
 8006776:	8a7b      	ldrh	r3, [r7, #18]
 8006778:	b2db      	uxtb	r3, r3
 800677a:	4013      	ands	r3, r2
 800677c:	b2da      	uxtb	r2, r3
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	3301      	adds	r3, #1
 8006786:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800678e:	b29b      	uxth	r3, r3
 8006790:	3b01      	subs	r3, #1
 8006792:	b29a      	uxth	r2, r3
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d1c2      	bne.n	800672c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2220      	movs	r2, #32
 80067aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80067ae:	2300      	movs	r3, #0
 80067b0:	e000      	b.n	80067b4 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80067b2:	2302      	movs	r3, #2
  }
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3720      	adds	r7, #32
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b0ba      	sub	sp, #232	; 0xe8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	69db      	ldr	r3, [r3, #28]
 80067ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80067e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80067e6:	f640 030f 	movw	r3, #2063	; 0x80f
 80067ea:	4013      	ands	r3, r2
 80067ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80067f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d11b      	bne.n	8006830 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80067f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067fc:	f003 0320 	and.w	r3, r3, #32
 8006800:	2b00      	cmp	r3, #0
 8006802:	d015      	beq.n	8006830 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006808:	f003 0320 	and.w	r3, r3, #32
 800680c:	2b00      	cmp	r3, #0
 800680e:	d105      	bne.n	800681c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006810:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d009      	beq.n	8006830 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006820:	2b00      	cmp	r3, #0
 8006822:	f000 8377 	beq.w	8006f14 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	4798      	blx	r3
      }
      return;
 800682e:	e371      	b.n	8006f14 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006830:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006834:	2b00      	cmp	r3, #0
 8006836:	f000 8123 	beq.w	8006a80 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800683a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800683e:	4b8d      	ldr	r3, [pc, #564]	; (8006a74 <HAL_UART_IRQHandler+0x2b8>)
 8006840:	4013      	ands	r3, r2
 8006842:	2b00      	cmp	r3, #0
 8006844:	d106      	bne.n	8006854 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006846:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800684a:	4b8b      	ldr	r3, [pc, #556]	; (8006a78 <HAL_UART_IRQHandler+0x2bc>)
 800684c:	4013      	ands	r3, r2
 800684e:	2b00      	cmp	r3, #0
 8006850:	f000 8116 	beq.w	8006a80 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006858:	f003 0301 	and.w	r3, r3, #1
 800685c:	2b00      	cmp	r3, #0
 800685e:	d011      	beq.n	8006884 <HAL_UART_IRQHandler+0xc8>
 8006860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00b      	beq.n	8006884 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2201      	movs	r2, #1
 8006872:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800687a:	f043 0201 	orr.w	r2, r3, #1
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006888:	f003 0302 	and.w	r3, r3, #2
 800688c:	2b00      	cmp	r3, #0
 800688e:	d011      	beq.n	80068b4 <HAL_UART_IRQHandler+0xf8>
 8006890:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006894:	f003 0301 	and.w	r3, r3, #1
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00b      	beq.n	80068b4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2202      	movs	r2, #2
 80068a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068aa:	f043 0204 	orr.w	r2, r3, #4
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068b8:	f003 0304 	and.w	r3, r3, #4
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d011      	beq.n	80068e4 <HAL_UART_IRQHandler+0x128>
 80068c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068c4:	f003 0301 	and.w	r3, r3, #1
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00b      	beq.n	80068e4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2204      	movs	r2, #4
 80068d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068da:	f043 0202 	orr.w	r2, r3, #2
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80068e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068e8:	f003 0308 	and.w	r3, r3, #8
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d017      	beq.n	8006920 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80068f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068f4:	f003 0320 	and.w	r3, r3, #32
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d105      	bne.n	8006908 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80068fc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006900:	4b5c      	ldr	r3, [pc, #368]	; (8006a74 <HAL_UART_IRQHandler+0x2b8>)
 8006902:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00b      	beq.n	8006920 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2208      	movs	r2, #8
 800690e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006916:	f043 0208 	orr.w	r2, r3, #8
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006924:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006928:	2b00      	cmp	r3, #0
 800692a:	d012      	beq.n	8006952 <HAL_UART_IRQHandler+0x196>
 800692c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006930:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00c      	beq.n	8006952 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006940:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006948:	f043 0220 	orr.w	r2, r3, #32
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006958:	2b00      	cmp	r3, #0
 800695a:	f000 82dd 	beq.w	8006f18 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800695e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006962:	f003 0320 	and.w	r3, r3, #32
 8006966:	2b00      	cmp	r3, #0
 8006968:	d013      	beq.n	8006992 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800696a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800696e:	f003 0320 	and.w	r3, r3, #32
 8006972:	2b00      	cmp	r3, #0
 8006974:	d105      	bne.n	8006982 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800697a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800697e:	2b00      	cmp	r3, #0
 8006980:	d007      	beq.n	8006992 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006986:	2b00      	cmp	r3, #0
 8006988:	d003      	beq.n	8006992 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006998:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a6:	2b40      	cmp	r3, #64	; 0x40
 80069a8:	d005      	beq.n	80069b6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80069aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d054      	beq.n	8006a60 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f001 fafa 	bl	8007fb0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069c6:	2b40      	cmp	r3, #64	; 0x40
 80069c8:	d146      	bne.n	8006a58 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	3308      	adds	r3, #8
 80069d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069d8:	e853 3f00 	ldrex	r3, [r3]
 80069dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80069e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	3308      	adds	r3, #8
 80069f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80069f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80069fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006a02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006a06:	e841 2300 	strex	r3, r2, [r1]
 8006a0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006a0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1d9      	bne.n	80069ca <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d017      	beq.n	8006a50 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a26:	4a15      	ldr	r2, [pc, #84]	; (8006a7c <HAL_UART_IRQHandler+0x2c0>)
 8006a28:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7fc fafd 	bl	8003030 <HAL_DMA_Abort_IT>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d019      	beq.n	8006a70 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006a4a:	4610      	mov	r0, r2
 8006a4c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a4e:	e00f      	b.n	8006a70 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fa77 	bl	8006f44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a56:	e00b      	b.n	8006a70 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 fa73 	bl	8006f44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a5e:	e007      	b.n	8006a70 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 fa6f 	bl	8006f44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006a6e:	e253      	b.n	8006f18 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a70:	bf00      	nop
    return;
 8006a72:	e251      	b.n	8006f18 <HAL_UART_IRQHandler+0x75c>
 8006a74:	10000001 	.word	0x10000001
 8006a78:	04000120 	.word	0x04000120
 8006a7c:	0800807d 	.word	0x0800807d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	f040 81e7 	bne.w	8006e58 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a8e:	f003 0310 	and.w	r3, r3, #16
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f000 81e0 	beq.w	8006e58 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a9c:	f003 0310 	and.w	r3, r3, #16
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f000 81d9 	beq.w	8006e58 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2210      	movs	r2, #16
 8006aac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab8:	2b40      	cmp	r3, #64	; 0x40
 8006aba:	f040 8151 	bne.w	8006d60 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a96      	ldr	r2, [pc, #600]	; (8006d20 <HAL_UART_IRQHandler+0x564>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d068      	beq.n	8006b9e <HAL_UART_IRQHandler+0x3e2>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a93      	ldr	r2, [pc, #588]	; (8006d24 <HAL_UART_IRQHandler+0x568>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d061      	beq.n	8006b9e <HAL_UART_IRQHandler+0x3e2>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a91      	ldr	r2, [pc, #580]	; (8006d28 <HAL_UART_IRQHandler+0x56c>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d05a      	beq.n	8006b9e <HAL_UART_IRQHandler+0x3e2>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a8e      	ldr	r2, [pc, #568]	; (8006d2c <HAL_UART_IRQHandler+0x570>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d053      	beq.n	8006b9e <HAL_UART_IRQHandler+0x3e2>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a8c      	ldr	r2, [pc, #560]	; (8006d30 <HAL_UART_IRQHandler+0x574>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d04c      	beq.n	8006b9e <HAL_UART_IRQHandler+0x3e2>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a89      	ldr	r2, [pc, #548]	; (8006d34 <HAL_UART_IRQHandler+0x578>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d045      	beq.n	8006b9e <HAL_UART_IRQHandler+0x3e2>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a87      	ldr	r2, [pc, #540]	; (8006d38 <HAL_UART_IRQHandler+0x57c>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d03e      	beq.n	8006b9e <HAL_UART_IRQHandler+0x3e2>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a84      	ldr	r2, [pc, #528]	; (8006d3c <HAL_UART_IRQHandler+0x580>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d037      	beq.n	8006b9e <HAL_UART_IRQHandler+0x3e2>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a82      	ldr	r2, [pc, #520]	; (8006d40 <HAL_UART_IRQHandler+0x584>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d030      	beq.n	8006b9e <HAL_UART_IRQHandler+0x3e2>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a7f      	ldr	r2, [pc, #508]	; (8006d44 <HAL_UART_IRQHandler+0x588>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d029      	beq.n	8006b9e <HAL_UART_IRQHandler+0x3e2>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a7d      	ldr	r2, [pc, #500]	; (8006d48 <HAL_UART_IRQHandler+0x58c>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d022      	beq.n	8006b9e <HAL_UART_IRQHandler+0x3e2>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a7a      	ldr	r2, [pc, #488]	; (8006d4c <HAL_UART_IRQHandler+0x590>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d01b      	beq.n	8006b9e <HAL_UART_IRQHandler+0x3e2>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a78      	ldr	r2, [pc, #480]	; (8006d50 <HAL_UART_IRQHandler+0x594>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d014      	beq.n	8006b9e <HAL_UART_IRQHandler+0x3e2>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a75      	ldr	r2, [pc, #468]	; (8006d54 <HAL_UART_IRQHandler+0x598>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d00d      	beq.n	8006b9e <HAL_UART_IRQHandler+0x3e2>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a73      	ldr	r2, [pc, #460]	; (8006d58 <HAL_UART_IRQHandler+0x59c>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d006      	beq.n	8006b9e <HAL_UART_IRQHandler+0x3e2>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a70      	ldr	r2, [pc, #448]	; (8006d5c <HAL_UART_IRQHandler+0x5a0>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d106      	bne.n	8006bac <HAL_UART_IRQHandler+0x3f0>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	e005      	b.n	8006bb8 <HAL_UART_IRQHandler+0x3fc>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006bbc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f000 81ab 	beq.w	8006f1c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006bcc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	f080 81a3 	bcs.w	8006f1c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006bdc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006be6:	69db      	ldr	r3, [r3, #28]
 8006be8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bec:	f000 8087 	beq.w	8006cfe <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006bfc:	e853 3f00 	ldrex	r3, [r3]
 8006c00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006c04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	461a      	mov	r2, r3
 8006c16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006c1e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c22:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006c26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006c2a:	e841 2300 	strex	r3, r2, [r1]
 8006c2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006c32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d1da      	bne.n	8006bf0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	3308      	adds	r3, #8
 8006c40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c44:	e853 3f00 	ldrex	r3, [r3]
 8006c48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006c4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c4c:	f023 0301 	bic.w	r3, r3, #1
 8006c50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	3308      	adds	r3, #8
 8006c5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006c5e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006c62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006c66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006c6a:	e841 2300 	strex	r3, r2, [r1]
 8006c6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006c70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1e1      	bne.n	8006c3a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	3308      	adds	r3, #8
 8006c7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c80:	e853 3f00 	ldrex	r3, [r3]
 8006c84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006c86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	3308      	adds	r3, #8
 8006c96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006c9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006c9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ca0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006ca2:	e841 2300 	strex	r3, r2, [r1]
 8006ca6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006ca8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d1e3      	bne.n	8006c76 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2220      	movs	r2, #32
 8006cb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cc4:	e853 3f00 	ldrex	r3, [r3]
 8006cc8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ccc:	f023 0310 	bic.w	r3, r3, #16
 8006cd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	461a      	mov	r2, r3
 8006cda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006cde:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ce0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ce4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ce6:	e841 2300 	strex	r3, r2, [r1]
 8006cea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006cec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1e4      	bne.n	8006cbc <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7fb fe7b 	bl	80029f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2202      	movs	r2, #2
 8006d02:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	4619      	mov	r1, r3
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 f91d 	bl	8006f58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d1e:	e0fd      	b.n	8006f1c <HAL_UART_IRQHandler+0x760>
 8006d20:	40020010 	.word	0x40020010
 8006d24:	40020028 	.word	0x40020028
 8006d28:	40020040 	.word	0x40020040
 8006d2c:	40020058 	.word	0x40020058
 8006d30:	40020070 	.word	0x40020070
 8006d34:	40020088 	.word	0x40020088
 8006d38:	400200a0 	.word	0x400200a0
 8006d3c:	400200b8 	.word	0x400200b8
 8006d40:	40020410 	.word	0x40020410
 8006d44:	40020428 	.word	0x40020428
 8006d48:	40020440 	.word	0x40020440
 8006d4c:	40020458 	.word	0x40020458
 8006d50:	40020470 	.word	0x40020470
 8006d54:	40020488 	.word	0x40020488
 8006d58:	400204a0 	.word	0x400204a0
 8006d5c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f000 80cf 	beq.w	8006f20 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8006d82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f000 80ca 	beq.w	8006f20 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d94:	e853 3f00 	ldrex	r3, [r3]
 8006d98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006da0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	461a      	mov	r2, r3
 8006daa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006dae:	647b      	str	r3, [r7, #68]	; 0x44
 8006db0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006db4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006db6:	e841 2300 	strex	r3, r2, [r1]
 8006dba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d1e4      	bne.n	8006d8c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	3308      	adds	r3, #8
 8006dc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dcc:	e853 3f00 	ldrex	r3, [r3]
 8006dd0:	623b      	str	r3, [r7, #32]
   return(result);
 8006dd2:	6a3a      	ldr	r2, [r7, #32]
 8006dd4:	4b55      	ldr	r3, [pc, #340]	; (8006f2c <HAL_UART_IRQHandler+0x770>)
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	3308      	adds	r3, #8
 8006de2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006de6:	633a      	str	r2, [r7, #48]	; 0x30
 8006de8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dee:	e841 2300 	strex	r3, r2, [r1]
 8006df2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d1e3      	bne.n	8006dc2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2220      	movs	r2, #32
 8006dfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	e853 3f00 	ldrex	r3, [r3]
 8006e1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f023 0310 	bic.w	r3, r3, #16
 8006e22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006e30:	61fb      	str	r3, [r7, #28]
 8006e32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e34:	69b9      	ldr	r1, [r7, #24]
 8006e36:	69fa      	ldr	r2, [r7, #28]
 8006e38:	e841 2300 	strex	r3, r2, [r1]
 8006e3c:	617b      	str	r3, [r7, #20]
   return(result);
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1e4      	bne.n	8006e0e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2202      	movs	r2, #2
 8006e48:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e4e:	4619      	mov	r1, r3
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 f881 	bl	8006f58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e56:	e063      	b.n	8006f20 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d00e      	beq.n	8006e82 <HAL_UART_IRQHandler+0x6c6>
 8006e64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d008      	beq.n	8006e82 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006e78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f001 f93f 	bl	80080fe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e80:	e051      	b.n	8006f26 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d014      	beq.n	8006eb8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006e8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d105      	bne.n	8006ea6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006e9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d008      	beq.n	8006eb8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d03a      	beq.n	8006f24 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	4798      	blx	r3
    }
    return;
 8006eb6:	e035      	b.n	8006f24 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d009      	beq.n	8006ed8 <HAL_UART_IRQHandler+0x71c>
 8006ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d003      	beq.n	8006ed8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f001 f8e9 	bl	80080a8 <UART_EndTransmit_IT>
    return;
 8006ed6:	e026      	b.n	8006f26 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006edc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d009      	beq.n	8006ef8 <HAL_UART_IRQHandler+0x73c>
 8006ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ee8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d003      	beq.n	8006ef8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f001 f918 	bl	8008126 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ef6:	e016      	b.n	8006f26 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006efc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d010      	beq.n	8006f26 <HAL_UART_IRQHandler+0x76a>
 8006f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	da0c      	bge.n	8006f26 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f001 f900 	bl	8008112 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f12:	e008      	b.n	8006f26 <HAL_UART_IRQHandler+0x76a>
      return;
 8006f14:	bf00      	nop
 8006f16:	e006      	b.n	8006f26 <HAL_UART_IRQHandler+0x76a>
    return;
 8006f18:	bf00      	nop
 8006f1a:	e004      	b.n	8006f26 <HAL_UART_IRQHandler+0x76a>
      return;
 8006f1c:	bf00      	nop
 8006f1e:	e002      	b.n	8006f26 <HAL_UART_IRQHandler+0x76a>
      return;
 8006f20:	bf00      	nop
 8006f22:	e000      	b.n	8006f26 <HAL_UART_IRQHandler+0x76a>
    return;
 8006f24:	bf00      	nop
  }
}
 8006f26:	37e8      	adds	r7, #232	; 0xe8
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	effffffe 	.word	0xeffffffe

08006f30 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006f38:	bf00      	nop
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006f4c:	bf00      	nop
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	460b      	mov	r3, r1
 8006f62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f64:	bf00      	nop
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f74:	b092      	sub	sp, #72	; 0x48
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	689a      	ldr	r2, [r3, #8]
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	431a      	orrs	r2, r3
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	431a      	orrs	r2, r3
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	69db      	ldr	r3, [r3, #28]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	4bbe      	ldr	r3, [pc, #760]	; (8007298 <UART_SetConfig+0x328>)
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	6812      	ldr	r2, [r2, #0]
 8006fa6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006fa8:	430b      	orrs	r3, r1
 8006faa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	68da      	ldr	r2, [r3, #12]
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	430a      	orrs	r2, r1
 8006fc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	699b      	ldr	r3, [r3, #24]
 8006fc6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4ab3      	ldr	r2, [pc, #716]	; (800729c <UART_SetConfig+0x32c>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d004      	beq.n	8006fdc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	689a      	ldr	r2, [r3, #8]
 8006fe2:	4baf      	ldr	r3, [pc, #700]	; (80072a0 <UART_SetConfig+0x330>)
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	697a      	ldr	r2, [r7, #20]
 8006fe8:	6812      	ldr	r2, [r2, #0]
 8006fea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006fec:	430b      	orrs	r3, r1
 8006fee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff6:	f023 010f 	bic.w	r1, r3, #15
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	430a      	orrs	r2, r1
 8007004:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4aa6      	ldr	r2, [pc, #664]	; (80072a4 <UART_SetConfig+0x334>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d177      	bne.n	8007100 <UART_SetConfig+0x190>
 8007010:	4ba5      	ldr	r3, [pc, #660]	; (80072a8 <UART_SetConfig+0x338>)
 8007012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007014:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007018:	2b28      	cmp	r3, #40	; 0x28
 800701a:	d86d      	bhi.n	80070f8 <UART_SetConfig+0x188>
 800701c:	a201      	add	r2, pc, #4	; (adr r2, 8007024 <UART_SetConfig+0xb4>)
 800701e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007022:	bf00      	nop
 8007024:	080070c9 	.word	0x080070c9
 8007028:	080070f9 	.word	0x080070f9
 800702c:	080070f9 	.word	0x080070f9
 8007030:	080070f9 	.word	0x080070f9
 8007034:	080070f9 	.word	0x080070f9
 8007038:	080070f9 	.word	0x080070f9
 800703c:	080070f9 	.word	0x080070f9
 8007040:	080070f9 	.word	0x080070f9
 8007044:	080070d1 	.word	0x080070d1
 8007048:	080070f9 	.word	0x080070f9
 800704c:	080070f9 	.word	0x080070f9
 8007050:	080070f9 	.word	0x080070f9
 8007054:	080070f9 	.word	0x080070f9
 8007058:	080070f9 	.word	0x080070f9
 800705c:	080070f9 	.word	0x080070f9
 8007060:	080070f9 	.word	0x080070f9
 8007064:	080070d9 	.word	0x080070d9
 8007068:	080070f9 	.word	0x080070f9
 800706c:	080070f9 	.word	0x080070f9
 8007070:	080070f9 	.word	0x080070f9
 8007074:	080070f9 	.word	0x080070f9
 8007078:	080070f9 	.word	0x080070f9
 800707c:	080070f9 	.word	0x080070f9
 8007080:	080070f9 	.word	0x080070f9
 8007084:	080070e1 	.word	0x080070e1
 8007088:	080070f9 	.word	0x080070f9
 800708c:	080070f9 	.word	0x080070f9
 8007090:	080070f9 	.word	0x080070f9
 8007094:	080070f9 	.word	0x080070f9
 8007098:	080070f9 	.word	0x080070f9
 800709c:	080070f9 	.word	0x080070f9
 80070a0:	080070f9 	.word	0x080070f9
 80070a4:	080070e9 	.word	0x080070e9
 80070a8:	080070f9 	.word	0x080070f9
 80070ac:	080070f9 	.word	0x080070f9
 80070b0:	080070f9 	.word	0x080070f9
 80070b4:	080070f9 	.word	0x080070f9
 80070b8:	080070f9 	.word	0x080070f9
 80070bc:	080070f9 	.word	0x080070f9
 80070c0:	080070f9 	.word	0x080070f9
 80070c4:	080070f1 	.word	0x080070f1
 80070c8:	2301      	movs	r3, #1
 80070ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ce:	e326      	b.n	800771e <UART_SetConfig+0x7ae>
 80070d0:	2304      	movs	r3, #4
 80070d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070d6:	e322      	b.n	800771e <UART_SetConfig+0x7ae>
 80070d8:	2308      	movs	r3, #8
 80070da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070de:	e31e      	b.n	800771e <UART_SetConfig+0x7ae>
 80070e0:	2310      	movs	r3, #16
 80070e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070e6:	e31a      	b.n	800771e <UART_SetConfig+0x7ae>
 80070e8:	2320      	movs	r3, #32
 80070ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ee:	e316      	b.n	800771e <UART_SetConfig+0x7ae>
 80070f0:	2340      	movs	r3, #64	; 0x40
 80070f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070f6:	e312      	b.n	800771e <UART_SetConfig+0x7ae>
 80070f8:	2380      	movs	r3, #128	; 0x80
 80070fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070fe:	e30e      	b.n	800771e <UART_SetConfig+0x7ae>
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a69      	ldr	r2, [pc, #420]	; (80072ac <UART_SetConfig+0x33c>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d130      	bne.n	800716c <UART_SetConfig+0x1fc>
 800710a:	4b67      	ldr	r3, [pc, #412]	; (80072a8 <UART_SetConfig+0x338>)
 800710c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800710e:	f003 0307 	and.w	r3, r3, #7
 8007112:	2b05      	cmp	r3, #5
 8007114:	d826      	bhi.n	8007164 <UART_SetConfig+0x1f4>
 8007116:	a201      	add	r2, pc, #4	; (adr r2, 800711c <UART_SetConfig+0x1ac>)
 8007118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711c:	08007135 	.word	0x08007135
 8007120:	0800713d 	.word	0x0800713d
 8007124:	08007145 	.word	0x08007145
 8007128:	0800714d 	.word	0x0800714d
 800712c:	08007155 	.word	0x08007155
 8007130:	0800715d 	.word	0x0800715d
 8007134:	2300      	movs	r3, #0
 8007136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800713a:	e2f0      	b.n	800771e <UART_SetConfig+0x7ae>
 800713c:	2304      	movs	r3, #4
 800713e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007142:	e2ec      	b.n	800771e <UART_SetConfig+0x7ae>
 8007144:	2308      	movs	r3, #8
 8007146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800714a:	e2e8      	b.n	800771e <UART_SetConfig+0x7ae>
 800714c:	2310      	movs	r3, #16
 800714e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007152:	e2e4      	b.n	800771e <UART_SetConfig+0x7ae>
 8007154:	2320      	movs	r3, #32
 8007156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800715a:	e2e0      	b.n	800771e <UART_SetConfig+0x7ae>
 800715c:	2340      	movs	r3, #64	; 0x40
 800715e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007162:	e2dc      	b.n	800771e <UART_SetConfig+0x7ae>
 8007164:	2380      	movs	r3, #128	; 0x80
 8007166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800716a:	e2d8      	b.n	800771e <UART_SetConfig+0x7ae>
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a4f      	ldr	r2, [pc, #316]	; (80072b0 <UART_SetConfig+0x340>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d130      	bne.n	80071d8 <UART_SetConfig+0x268>
 8007176:	4b4c      	ldr	r3, [pc, #304]	; (80072a8 <UART_SetConfig+0x338>)
 8007178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800717a:	f003 0307 	and.w	r3, r3, #7
 800717e:	2b05      	cmp	r3, #5
 8007180:	d826      	bhi.n	80071d0 <UART_SetConfig+0x260>
 8007182:	a201      	add	r2, pc, #4	; (adr r2, 8007188 <UART_SetConfig+0x218>)
 8007184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007188:	080071a1 	.word	0x080071a1
 800718c:	080071a9 	.word	0x080071a9
 8007190:	080071b1 	.word	0x080071b1
 8007194:	080071b9 	.word	0x080071b9
 8007198:	080071c1 	.word	0x080071c1
 800719c:	080071c9 	.word	0x080071c9
 80071a0:	2300      	movs	r3, #0
 80071a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071a6:	e2ba      	b.n	800771e <UART_SetConfig+0x7ae>
 80071a8:	2304      	movs	r3, #4
 80071aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ae:	e2b6      	b.n	800771e <UART_SetConfig+0x7ae>
 80071b0:	2308      	movs	r3, #8
 80071b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071b6:	e2b2      	b.n	800771e <UART_SetConfig+0x7ae>
 80071b8:	2310      	movs	r3, #16
 80071ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071be:	e2ae      	b.n	800771e <UART_SetConfig+0x7ae>
 80071c0:	2320      	movs	r3, #32
 80071c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071c6:	e2aa      	b.n	800771e <UART_SetConfig+0x7ae>
 80071c8:	2340      	movs	r3, #64	; 0x40
 80071ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ce:	e2a6      	b.n	800771e <UART_SetConfig+0x7ae>
 80071d0:	2380      	movs	r3, #128	; 0x80
 80071d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071d6:	e2a2      	b.n	800771e <UART_SetConfig+0x7ae>
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a35      	ldr	r2, [pc, #212]	; (80072b4 <UART_SetConfig+0x344>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d130      	bne.n	8007244 <UART_SetConfig+0x2d4>
 80071e2:	4b31      	ldr	r3, [pc, #196]	; (80072a8 <UART_SetConfig+0x338>)
 80071e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071e6:	f003 0307 	and.w	r3, r3, #7
 80071ea:	2b05      	cmp	r3, #5
 80071ec:	d826      	bhi.n	800723c <UART_SetConfig+0x2cc>
 80071ee:	a201      	add	r2, pc, #4	; (adr r2, 80071f4 <UART_SetConfig+0x284>)
 80071f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f4:	0800720d 	.word	0x0800720d
 80071f8:	08007215 	.word	0x08007215
 80071fc:	0800721d 	.word	0x0800721d
 8007200:	08007225 	.word	0x08007225
 8007204:	0800722d 	.word	0x0800722d
 8007208:	08007235 	.word	0x08007235
 800720c:	2300      	movs	r3, #0
 800720e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007212:	e284      	b.n	800771e <UART_SetConfig+0x7ae>
 8007214:	2304      	movs	r3, #4
 8007216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800721a:	e280      	b.n	800771e <UART_SetConfig+0x7ae>
 800721c:	2308      	movs	r3, #8
 800721e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007222:	e27c      	b.n	800771e <UART_SetConfig+0x7ae>
 8007224:	2310      	movs	r3, #16
 8007226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800722a:	e278      	b.n	800771e <UART_SetConfig+0x7ae>
 800722c:	2320      	movs	r3, #32
 800722e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007232:	e274      	b.n	800771e <UART_SetConfig+0x7ae>
 8007234:	2340      	movs	r3, #64	; 0x40
 8007236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800723a:	e270      	b.n	800771e <UART_SetConfig+0x7ae>
 800723c:	2380      	movs	r3, #128	; 0x80
 800723e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007242:	e26c      	b.n	800771e <UART_SetConfig+0x7ae>
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a1b      	ldr	r2, [pc, #108]	; (80072b8 <UART_SetConfig+0x348>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d142      	bne.n	80072d4 <UART_SetConfig+0x364>
 800724e:	4b16      	ldr	r3, [pc, #88]	; (80072a8 <UART_SetConfig+0x338>)
 8007250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007252:	f003 0307 	and.w	r3, r3, #7
 8007256:	2b05      	cmp	r3, #5
 8007258:	d838      	bhi.n	80072cc <UART_SetConfig+0x35c>
 800725a:	a201      	add	r2, pc, #4	; (adr r2, 8007260 <UART_SetConfig+0x2f0>)
 800725c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007260:	08007279 	.word	0x08007279
 8007264:	08007281 	.word	0x08007281
 8007268:	08007289 	.word	0x08007289
 800726c:	08007291 	.word	0x08007291
 8007270:	080072bd 	.word	0x080072bd
 8007274:	080072c5 	.word	0x080072c5
 8007278:	2300      	movs	r3, #0
 800727a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800727e:	e24e      	b.n	800771e <UART_SetConfig+0x7ae>
 8007280:	2304      	movs	r3, #4
 8007282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007286:	e24a      	b.n	800771e <UART_SetConfig+0x7ae>
 8007288:	2308      	movs	r3, #8
 800728a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800728e:	e246      	b.n	800771e <UART_SetConfig+0x7ae>
 8007290:	2310      	movs	r3, #16
 8007292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007296:	e242      	b.n	800771e <UART_SetConfig+0x7ae>
 8007298:	cfff69f3 	.word	0xcfff69f3
 800729c:	58000c00 	.word	0x58000c00
 80072a0:	11fff4ff 	.word	0x11fff4ff
 80072a4:	40011000 	.word	0x40011000
 80072a8:	58024400 	.word	0x58024400
 80072ac:	40004400 	.word	0x40004400
 80072b0:	40004800 	.word	0x40004800
 80072b4:	40004c00 	.word	0x40004c00
 80072b8:	40005000 	.word	0x40005000
 80072bc:	2320      	movs	r3, #32
 80072be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072c2:	e22c      	b.n	800771e <UART_SetConfig+0x7ae>
 80072c4:	2340      	movs	r3, #64	; 0x40
 80072c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ca:	e228      	b.n	800771e <UART_SetConfig+0x7ae>
 80072cc:	2380      	movs	r3, #128	; 0x80
 80072ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072d2:	e224      	b.n	800771e <UART_SetConfig+0x7ae>
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4ab1      	ldr	r2, [pc, #708]	; (80075a0 <UART_SetConfig+0x630>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d176      	bne.n	80073cc <UART_SetConfig+0x45c>
 80072de:	4bb1      	ldr	r3, [pc, #708]	; (80075a4 <UART_SetConfig+0x634>)
 80072e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80072e6:	2b28      	cmp	r3, #40	; 0x28
 80072e8:	d86c      	bhi.n	80073c4 <UART_SetConfig+0x454>
 80072ea:	a201      	add	r2, pc, #4	; (adr r2, 80072f0 <UART_SetConfig+0x380>)
 80072ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f0:	08007395 	.word	0x08007395
 80072f4:	080073c5 	.word	0x080073c5
 80072f8:	080073c5 	.word	0x080073c5
 80072fc:	080073c5 	.word	0x080073c5
 8007300:	080073c5 	.word	0x080073c5
 8007304:	080073c5 	.word	0x080073c5
 8007308:	080073c5 	.word	0x080073c5
 800730c:	080073c5 	.word	0x080073c5
 8007310:	0800739d 	.word	0x0800739d
 8007314:	080073c5 	.word	0x080073c5
 8007318:	080073c5 	.word	0x080073c5
 800731c:	080073c5 	.word	0x080073c5
 8007320:	080073c5 	.word	0x080073c5
 8007324:	080073c5 	.word	0x080073c5
 8007328:	080073c5 	.word	0x080073c5
 800732c:	080073c5 	.word	0x080073c5
 8007330:	080073a5 	.word	0x080073a5
 8007334:	080073c5 	.word	0x080073c5
 8007338:	080073c5 	.word	0x080073c5
 800733c:	080073c5 	.word	0x080073c5
 8007340:	080073c5 	.word	0x080073c5
 8007344:	080073c5 	.word	0x080073c5
 8007348:	080073c5 	.word	0x080073c5
 800734c:	080073c5 	.word	0x080073c5
 8007350:	080073ad 	.word	0x080073ad
 8007354:	080073c5 	.word	0x080073c5
 8007358:	080073c5 	.word	0x080073c5
 800735c:	080073c5 	.word	0x080073c5
 8007360:	080073c5 	.word	0x080073c5
 8007364:	080073c5 	.word	0x080073c5
 8007368:	080073c5 	.word	0x080073c5
 800736c:	080073c5 	.word	0x080073c5
 8007370:	080073b5 	.word	0x080073b5
 8007374:	080073c5 	.word	0x080073c5
 8007378:	080073c5 	.word	0x080073c5
 800737c:	080073c5 	.word	0x080073c5
 8007380:	080073c5 	.word	0x080073c5
 8007384:	080073c5 	.word	0x080073c5
 8007388:	080073c5 	.word	0x080073c5
 800738c:	080073c5 	.word	0x080073c5
 8007390:	080073bd 	.word	0x080073bd
 8007394:	2301      	movs	r3, #1
 8007396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800739a:	e1c0      	b.n	800771e <UART_SetConfig+0x7ae>
 800739c:	2304      	movs	r3, #4
 800739e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073a2:	e1bc      	b.n	800771e <UART_SetConfig+0x7ae>
 80073a4:	2308      	movs	r3, #8
 80073a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073aa:	e1b8      	b.n	800771e <UART_SetConfig+0x7ae>
 80073ac:	2310      	movs	r3, #16
 80073ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073b2:	e1b4      	b.n	800771e <UART_SetConfig+0x7ae>
 80073b4:	2320      	movs	r3, #32
 80073b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073ba:	e1b0      	b.n	800771e <UART_SetConfig+0x7ae>
 80073bc:	2340      	movs	r3, #64	; 0x40
 80073be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073c2:	e1ac      	b.n	800771e <UART_SetConfig+0x7ae>
 80073c4:	2380      	movs	r3, #128	; 0x80
 80073c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073ca:	e1a8      	b.n	800771e <UART_SetConfig+0x7ae>
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a75      	ldr	r2, [pc, #468]	; (80075a8 <UART_SetConfig+0x638>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d130      	bne.n	8007438 <UART_SetConfig+0x4c8>
 80073d6:	4b73      	ldr	r3, [pc, #460]	; (80075a4 <UART_SetConfig+0x634>)
 80073d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073da:	f003 0307 	and.w	r3, r3, #7
 80073de:	2b05      	cmp	r3, #5
 80073e0:	d826      	bhi.n	8007430 <UART_SetConfig+0x4c0>
 80073e2:	a201      	add	r2, pc, #4	; (adr r2, 80073e8 <UART_SetConfig+0x478>)
 80073e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e8:	08007401 	.word	0x08007401
 80073ec:	08007409 	.word	0x08007409
 80073f0:	08007411 	.word	0x08007411
 80073f4:	08007419 	.word	0x08007419
 80073f8:	08007421 	.word	0x08007421
 80073fc:	08007429 	.word	0x08007429
 8007400:	2300      	movs	r3, #0
 8007402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007406:	e18a      	b.n	800771e <UART_SetConfig+0x7ae>
 8007408:	2304      	movs	r3, #4
 800740a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800740e:	e186      	b.n	800771e <UART_SetConfig+0x7ae>
 8007410:	2308      	movs	r3, #8
 8007412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007416:	e182      	b.n	800771e <UART_SetConfig+0x7ae>
 8007418:	2310      	movs	r3, #16
 800741a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800741e:	e17e      	b.n	800771e <UART_SetConfig+0x7ae>
 8007420:	2320      	movs	r3, #32
 8007422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007426:	e17a      	b.n	800771e <UART_SetConfig+0x7ae>
 8007428:	2340      	movs	r3, #64	; 0x40
 800742a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800742e:	e176      	b.n	800771e <UART_SetConfig+0x7ae>
 8007430:	2380      	movs	r3, #128	; 0x80
 8007432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007436:	e172      	b.n	800771e <UART_SetConfig+0x7ae>
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a5b      	ldr	r2, [pc, #364]	; (80075ac <UART_SetConfig+0x63c>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d130      	bne.n	80074a4 <UART_SetConfig+0x534>
 8007442:	4b58      	ldr	r3, [pc, #352]	; (80075a4 <UART_SetConfig+0x634>)
 8007444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007446:	f003 0307 	and.w	r3, r3, #7
 800744a:	2b05      	cmp	r3, #5
 800744c:	d826      	bhi.n	800749c <UART_SetConfig+0x52c>
 800744e:	a201      	add	r2, pc, #4	; (adr r2, 8007454 <UART_SetConfig+0x4e4>)
 8007450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007454:	0800746d 	.word	0x0800746d
 8007458:	08007475 	.word	0x08007475
 800745c:	0800747d 	.word	0x0800747d
 8007460:	08007485 	.word	0x08007485
 8007464:	0800748d 	.word	0x0800748d
 8007468:	08007495 	.word	0x08007495
 800746c:	2300      	movs	r3, #0
 800746e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007472:	e154      	b.n	800771e <UART_SetConfig+0x7ae>
 8007474:	2304      	movs	r3, #4
 8007476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800747a:	e150      	b.n	800771e <UART_SetConfig+0x7ae>
 800747c:	2308      	movs	r3, #8
 800747e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007482:	e14c      	b.n	800771e <UART_SetConfig+0x7ae>
 8007484:	2310      	movs	r3, #16
 8007486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800748a:	e148      	b.n	800771e <UART_SetConfig+0x7ae>
 800748c:	2320      	movs	r3, #32
 800748e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007492:	e144      	b.n	800771e <UART_SetConfig+0x7ae>
 8007494:	2340      	movs	r3, #64	; 0x40
 8007496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800749a:	e140      	b.n	800771e <UART_SetConfig+0x7ae>
 800749c:	2380      	movs	r3, #128	; 0x80
 800749e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074a2:	e13c      	b.n	800771e <UART_SetConfig+0x7ae>
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a41      	ldr	r2, [pc, #260]	; (80075b0 <UART_SetConfig+0x640>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	f040 8082 	bne.w	80075b4 <UART_SetConfig+0x644>
 80074b0:	4b3c      	ldr	r3, [pc, #240]	; (80075a4 <UART_SetConfig+0x634>)
 80074b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074b8:	2b28      	cmp	r3, #40	; 0x28
 80074ba:	d86d      	bhi.n	8007598 <UART_SetConfig+0x628>
 80074bc:	a201      	add	r2, pc, #4	; (adr r2, 80074c4 <UART_SetConfig+0x554>)
 80074be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c2:	bf00      	nop
 80074c4:	08007569 	.word	0x08007569
 80074c8:	08007599 	.word	0x08007599
 80074cc:	08007599 	.word	0x08007599
 80074d0:	08007599 	.word	0x08007599
 80074d4:	08007599 	.word	0x08007599
 80074d8:	08007599 	.word	0x08007599
 80074dc:	08007599 	.word	0x08007599
 80074e0:	08007599 	.word	0x08007599
 80074e4:	08007571 	.word	0x08007571
 80074e8:	08007599 	.word	0x08007599
 80074ec:	08007599 	.word	0x08007599
 80074f0:	08007599 	.word	0x08007599
 80074f4:	08007599 	.word	0x08007599
 80074f8:	08007599 	.word	0x08007599
 80074fc:	08007599 	.word	0x08007599
 8007500:	08007599 	.word	0x08007599
 8007504:	08007579 	.word	0x08007579
 8007508:	08007599 	.word	0x08007599
 800750c:	08007599 	.word	0x08007599
 8007510:	08007599 	.word	0x08007599
 8007514:	08007599 	.word	0x08007599
 8007518:	08007599 	.word	0x08007599
 800751c:	08007599 	.word	0x08007599
 8007520:	08007599 	.word	0x08007599
 8007524:	08007581 	.word	0x08007581
 8007528:	08007599 	.word	0x08007599
 800752c:	08007599 	.word	0x08007599
 8007530:	08007599 	.word	0x08007599
 8007534:	08007599 	.word	0x08007599
 8007538:	08007599 	.word	0x08007599
 800753c:	08007599 	.word	0x08007599
 8007540:	08007599 	.word	0x08007599
 8007544:	08007589 	.word	0x08007589
 8007548:	08007599 	.word	0x08007599
 800754c:	08007599 	.word	0x08007599
 8007550:	08007599 	.word	0x08007599
 8007554:	08007599 	.word	0x08007599
 8007558:	08007599 	.word	0x08007599
 800755c:	08007599 	.word	0x08007599
 8007560:	08007599 	.word	0x08007599
 8007564:	08007591 	.word	0x08007591
 8007568:	2301      	movs	r3, #1
 800756a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800756e:	e0d6      	b.n	800771e <UART_SetConfig+0x7ae>
 8007570:	2304      	movs	r3, #4
 8007572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007576:	e0d2      	b.n	800771e <UART_SetConfig+0x7ae>
 8007578:	2308      	movs	r3, #8
 800757a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800757e:	e0ce      	b.n	800771e <UART_SetConfig+0x7ae>
 8007580:	2310      	movs	r3, #16
 8007582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007586:	e0ca      	b.n	800771e <UART_SetConfig+0x7ae>
 8007588:	2320      	movs	r3, #32
 800758a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800758e:	e0c6      	b.n	800771e <UART_SetConfig+0x7ae>
 8007590:	2340      	movs	r3, #64	; 0x40
 8007592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007596:	e0c2      	b.n	800771e <UART_SetConfig+0x7ae>
 8007598:	2380      	movs	r3, #128	; 0x80
 800759a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800759e:	e0be      	b.n	800771e <UART_SetConfig+0x7ae>
 80075a0:	40011400 	.word	0x40011400
 80075a4:	58024400 	.word	0x58024400
 80075a8:	40007800 	.word	0x40007800
 80075ac:	40007c00 	.word	0x40007c00
 80075b0:	40011800 	.word	0x40011800
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4aad      	ldr	r2, [pc, #692]	; (8007870 <UART_SetConfig+0x900>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d176      	bne.n	80076ac <UART_SetConfig+0x73c>
 80075be:	4bad      	ldr	r3, [pc, #692]	; (8007874 <UART_SetConfig+0x904>)
 80075c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075c6:	2b28      	cmp	r3, #40	; 0x28
 80075c8:	d86c      	bhi.n	80076a4 <UART_SetConfig+0x734>
 80075ca:	a201      	add	r2, pc, #4	; (adr r2, 80075d0 <UART_SetConfig+0x660>)
 80075cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d0:	08007675 	.word	0x08007675
 80075d4:	080076a5 	.word	0x080076a5
 80075d8:	080076a5 	.word	0x080076a5
 80075dc:	080076a5 	.word	0x080076a5
 80075e0:	080076a5 	.word	0x080076a5
 80075e4:	080076a5 	.word	0x080076a5
 80075e8:	080076a5 	.word	0x080076a5
 80075ec:	080076a5 	.word	0x080076a5
 80075f0:	0800767d 	.word	0x0800767d
 80075f4:	080076a5 	.word	0x080076a5
 80075f8:	080076a5 	.word	0x080076a5
 80075fc:	080076a5 	.word	0x080076a5
 8007600:	080076a5 	.word	0x080076a5
 8007604:	080076a5 	.word	0x080076a5
 8007608:	080076a5 	.word	0x080076a5
 800760c:	080076a5 	.word	0x080076a5
 8007610:	08007685 	.word	0x08007685
 8007614:	080076a5 	.word	0x080076a5
 8007618:	080076a5 	.word	0x080076a5
 800761c:	080076a5 	.word	0x080076a5
 8007620:	080076a5 	.word	0x080076a5
 8007624:	080076a5 	.word	0x080076a5
 8007628:	080076a5 	.word	0x080076a5
 800762c:	080076a5 	.word	0x080076a5
 8007630:	0800768d 	.word	0x0800768d
 8007634:	080076a5 	.word	0x080076a5
 8007638:	080076a5 	.word	0x080076a5
 800763c:	080076a5 	.word	0x080076a5
 8007640:	080076a5 	.word	0x080076a5
 8007644:	080076a5 	.word	0x080076a5
 8007648:	080076a5 	.word	0x080076a5
 800764c:	080076a5 	.word	0x080076a5
 8007650:	08007695 	.word	0x08007695
 8007654:	080076a5 	.word	0x080076a5
 8007658:	080076a5 	.word	0x080076a5
 800765c:	080076a5 	.word	0x080076a5
 8007660:	080076a5 	.word	0x080076a5
 8007664:	080076a5 	.word	0x080076a5
 8007668:	080076a5 	.word	0x080076a5
 800766c:	080076a5 	.word	0x080076a5
 8007670:	0800769d 	.word	0x0800769d
 8007674:	2301      	movs	r3, #1
 8007676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800767a:	e050      	b.n	800771e <UART_SetConfig+0x7ae>
 800767c:	2304      	movs	r3, #4
 800767e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007682:	e04c      	b.n	800771e <UART_SetConfig+0x7ae>
 8007684:	2308      	movs	r3, #8
 8007686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800768a:	e048      	b.n	800771e <UART_SetConfig+0x7ae>
 800768c:	2310      	movs	r3, #16
 800768e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007692:	e044      	b.n	800771e <UART_SetConfig+0x7ae>
 8007694:	2320      	movs	r3, #32
 8007696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800769a:	e040      	b.n	800771e <UART_SetConfig+0x7ae>
 800769c:	2340      	movs	r3, #64	; 0x40
 800769e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076a2:	e03c      	b.n	800771e <UART_SetConfig+0x7ae>
 80076a4:	2380      	movs	r3, #128	; 0x80
 80076a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076aa:	e038      	b.n	800771e <UART_SetConfig+0x7ae>
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a71      	ldr	r2, [pc, #452]	; (8007878 <UART_SetConfig+0x908>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d130      	bne.n	8007718 <UART_SetConfig+0x7a8>
 80076b6:	4b6f      	ldr	r3, [pc, #444]	; (8007874 <UART_SetConfig+0x904>)
 80076b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ba:	f003 0307 	and.w	r3, r3, #7
 80076be:	2b05      	cmp	r3, #5
 80076c0:	d826      	bhi.n	8007710 <UART_SetConfig+0x7a0>
 80076c2:	a201      	add	r2, pc, #4	; (adr r2, 80076c8 <UART_SetConfig+0x758>)
 80076c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c8:	080076e1 	.word	0x080076e1
 80076cc:	080076e9 	.word	0x080076e9
 80076d0:	080076f1 	.word	0x080076f1
 80076d4:	080076f9 	.word	0x080076f9
 80076d8:	08007701 	.word	0x08007701
 80076dc:	08007709 	.word	0x08007709
 80076e0:	2302      	movs	r3, #2
 80076e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076e6:	e01a      	b.n	800771e <UART_SetConfig+0x7ae>
 80076e8:	2304      	movs	r3, #4
 80076ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076ee:	e016      	b.n	800771e <UART_SetConfig+0x7ae>
 80076f0:	2308      	movs	r3, #8
 80076f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076f6:	e012      	b.n	800771e <UART_SetConfig+0x7ae>
 80076f8:	2310      	movs	r3, #16
 80076fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076fe:	e00e      	b.n	800771e <UART_SetConfig+0x7ae>
 8007700:	2320      	movs	r3, #32
 8007702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007706:	e00a      	b.n	800771e <UART_SetConfig+0x7ae>
 8007708:	2340      	movs	r3, #64	; 0x40
 800770a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800770e:	e006      	b.n	800771e <UART_SetConfig+0x7ae>
 8007710:	2380      	movs	r3, #128	; 0x80
 8007712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007716:	e002      	b.n	800771e <UART_SetConfig+0x7ae>
 8007718:	2380      	movs	r3, #128	; 0x80
 800771a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a55      	ldr	r2, [pc, #340]	; (8007878 <UART_SetConfig+0x908>)
 8007724:	4293      	cmp	r3, r2
 8007726:	f040 80f8 	bne.w	800791a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800772a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800772e:	2b20      	cmp	r3, #32
 8007730:	dc46      	bgt.n	80077c0 <UART_SetConfig+0x850>
 8007732:	2b02      	cmp	r3, #2
 8007734:	db75      	blt.n	8007822 <UART_SetConfig+0x8b2>
 8007736:	3b02      	subs	r3, #2
 8007738:	2b1e      	cmp	r3, #30
 800773a:	d872      	bhi.n	8007822 <UART_SetConfig+0x8b2>
 800773c:	a201      	add	r2, pc, #4	; (adr r2, 8007744 <UART_SetConfig+0x7d4>)
 800773e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007742:	bf00      	nop
 8007744:	080077c7 	.word	0x080077c7
 8007748:	08007823 	.word	0x08007823
 800774c:	080077cf 	.word	0x080077cf
 8007750:	08007823 	.word	0x08007823
 8007754:	08007823 	.word	0x08007823
 8007758:	08007823 	.word	0x08007823
 800775c:	080077df 	.word	0x080077df
 8007760:	08007823 	.word	0x08007823
 8007764:	08007823 	.word	0x08007823
 8007768:	08007823 	.word	0x08007823
 800776c:	08007823 	.word	0x08007823
 8007770:	08007823 	.word	0x08007823
 8007774:	08007823 	.word	0x08007823
 8007778:	08007823 	.word	0x08007823
 800777c:	080077ef 	.word	0x080077ef
 8007780:	08007823 	.word	0x08007823
 8007784:	08007823 	.word	0x08007823
 8007788:	08007823 	.word	0x08007823
 800778c:	08007823 	.word	0x08007823
 8007790:	08007823 	.word	0x08007823
 8007794:	08007823 	.word	0x08007823
 8007798:	08007823 	.word	0x08007823
 800779c:	08007823 	.word	0x08007823
 80077a0:	08007823 	.word	0x08007823
 80077a4:	08007823 	.word	0x08007823
 80077a8:	08007823 	.word	0x08007823
 80077ac:	08007823 	.word	0x08007823
 80077b0:	08007823 	.word	0x08007823
 80077b4:	08007823 	.word	0x08007823
 80077b8:	08007823 	.word	0x08007823
 80077bc:	08007815 	.word	0x08007815
 80077c0:	2b40      	cmp	r3, #64	; 0x40
 80077c2:	d02a      	beq.n	800781a <UART_SetConfig+0x8aa>
 80077c4:	e02d      	b.n	8007822 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80077c6:	f7fe fa31 	bl	8005c2c <HAL_RCCEx_GetD3PCLK1Freq>
 80077ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80077cc:	e02f      	b.n	800782e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077d2:	4618      	mov	r0, r3
 80077d4:	f7fe fa40 	bl	8005c58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80077d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077dc:	e027      	b.n	800782e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077de:	f107 0318 	add.w	r3, r7, #24
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7fe fb8c 	bl	8005f00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077ec:	e01f      	b.n	800782e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077ee:	4b21      	ldr	r3, [pc, #132]	; (8007874 <UART_SetConfig+0x904>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 0320 	and.w	r3, r3, #32
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d009      	beq.n	800780e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80077fa:	4b1e      	ldr	r3, [pc, #120]	; (8007874 <UART_SetConfig+0x904>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	08db      	lsrs	r3, r3, #3
 8007800:	f003 0303 	and.w	r3, r3, #3
 8007804:	4a1d      	ldr	r2, [pc, #116]	; (800787c <UART_SetConfig+0x90c>)
 8007806:	fa22 f303 	lsr.w	r3, r2, r3
 800780a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800780c:	e00f      	b.n	800782e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800780e:	4b1b      	ldr	r3, [pc, #108]	; (800787c <UART_SetConfig+0x90c>)
 8007810:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007812:	e00c      	b.n	800782e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007814:	4b1a      	ldr	r3, [pc, #104]	; (8007880 <UART_SetConfig+0x910>)
 8007816:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007818:	e009      	b.n	800782e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800781a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800781e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007820:	e005      	b.n	800782e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007822:	2300      	movs	r3, #0
 8007824:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800782c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800782e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007830:	2b00      	cmp	r3, #0
 8007832:	f000 81ee 	beq.w	8007c12 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783a:	4a12      	ldr	r2, [pc, #72]	; (8007884 <UART_SetConfig+0x914>)
 800783c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007840:	461a      	mov	r2, r3
 8007842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007844:	fbb3 f3f2 	udiv	r3, r3, r2
 8007848:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	685a      	ldr	r2, [r3, #4]
 800784e:	4613      	mov	r3, r2
 8007850:	005b      	lsls	r3, r3, #1
 8007852:	4413      	add	r3, r2
 8007854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007856:	429a      	cmp	r2, r3
 8007858:	d305      	bcc.n	8007866 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007862:	429a      	cmp	r2, r3
 8007864:	d910      	bls.n	8007888 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800786c:	e1d1      	b.n	8007c12 <UART_SetConfig+0xca2>
 800786e:	bf00      	nop
 8007870:	40011c00 	.word	0x40011c00
 8007874:	58024400 	.word	0x58024400
 8007878:	58000c00 	.word	0x58000c00
 800787c:	03d09000 	.word	0x03d09000
 8007880:	003d0900 	.word	0x003d0900
 8007884:	08008628 	.word	0x08008628
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800788a:	2200      	movs	r2, #0
 800788c:	60bb      	str	r3, [r7, #8]
 800788e:	60fa      	str	r2, [r7, #12]
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007894:	4ac0      	ldr	r2, [pc, #768]	; (8007b98 <UART_SetConfig+0xc28>)
 8007896:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800789a:	b29b      	uxth	r3, r3
 800789c:	2200      	movs	r2, #0
 800789e:	603b      	str	r3, [r7, #0]
 80078a0:	607a      	str	r2, [r7, #4]
 80078a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80078aa:	f7f8 fd1f 	bl	80002ec <__aeabi_uldivmod>
 80078ae:	4602      	mov	r2, r0
 80078b0:	460b      	mov	r3, r1
 80078b2:	4610      	mov	r0, r2
 80078b4:	4619      	mov	r1, r3
 80078b6:	f04f 0200 	mov.w	r2, #0
 80078ba:	f04f 0300 	mov.w	r3, #0
 80078be:	020b      	lsls	r3, r1, #8
 80078c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80078c4:	0202      	lsls	r2, r0, #8
 80078c6:	6979      	ldr	r1, [r7, #20]
 80078c8:	6849      	ldr	r1, [r1, #4]
 80078ca:	0849      	lsrs	r1, r1, #1
 80078cc:	2000      	movs	r0, #0
 80078ce:	460c      	mov	r4, r1
 80078d0:	4605      	mov	r5, r0
 80078d2:	eb12 0804 	adds.w	r8, r2, r4
 80078d6:	eb43 0905 	adc.w	r9, r3, r5
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	469a      	mov	sl, r3
 80078e2:	4693      	mov	fp, r2
 80078e4:	4652      	mov	r2, sl
 80078e6:	465b      	mov	r3, fp
 80078e8:	4640      	mov	r0, r8
 80078ea:	4649      	mov	r1, r9
 80078ec:	f7f8 fcfe 	bl	80002ec <__aeabi_uldivmod>
 80078f0:	4602      	mov	r2, r0
 80078f2:	460b      	mov	r3, r1
 80078f4:	4613      	mov	r3, r2
 80078f6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80078f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078fe:	d308      	bcc.n	8007912 <UART_SetConfig+0x9a2>
 8007900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007902:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007906:	d204      	bcs.n	8007912 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800790e:	60da      	str	r2, [r3, #12]
 8007910:	e17f      	b.n	8007c12 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007918:	e17b      	b.n	8007c12 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	69db      	ldr	r3, [r3, #28]
 800791e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007922:	f040 80bd 	bne.w	8007aa0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8007926:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800792a:	2b20      	cmp	r3, #32
 800792c:	dc48      	bgt.n	80079c0 <UART_SetConfig+0xa50>
 800792e:	2b00      	cmp	r3, #0
 8007930:	db7b      	blt.n	8007a2a <UART_SetConfig+0xaba>
 8007932:	2b20      	cmp	r3, #32
 8007934:	d879      	bhi.n	8007a2a <UART_SetConfig+0xaba>
 8007936:	a201      	add	r2, pc, #4	; (adr r2, 800793c <UART_SetConfig+0x9cc>)
 8007938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793c:	080079c7 	.word	0x080079c7
 8007940:	080079cf 	.word	0x080079cf
 8007944:	08007a2b 	.word	0x08007a2b
 8007948:	08007a2b 	.word	0x08007a2b
 800794c:	080079d7 	.word	0x080079d7
 8007950:	08007a2b 	.word	0x08007a2b
 8007954:	08007a2b 	.word	0x08007a2b
 8007958:	08007a2b 	.word	0x08007a2b
 800795c:	080079e7 	.word	0x080079e7
 8007960:	08007a2b 	.word	0x08007a2b
 8007964:	08007a2b 	.word	0x08007a2b
 8007968:	08007a2b 	.word	0x08007a2b
 800796c:	08007a2b 	.word	0x08007a2b
 8007970:	08007a2b 	.word	0x08007a2b
 8007974:	08007a2b 	.word	0x08007a2b
 8007978:	08007a2b 	.word	0x08007a2b
 800797c:	080079f7 	.word	0x080079f7
 8007980:	08007a2b 	.word	0x08007a2b
 8007984:	08007a2b 	.word	0x08007a2b
 8007988:	08007a2b 	.word	0x08007a2b
 800798c:	08007a2b 	.word	0x08007a2b
 8007990:	08007a2b 	.word	0x08007a2b
 8007994:	08007a2b 	.word	0x08007a2b
 8007998:	08007a2b 	.word	0x08007a2b
 800799c:	08007a2b 	.word	0x08007a2b
 80079a0:	08007a2b 	.word	0x08007a2b
 80079a4:	08007a2b 	.word	0x08007a2b
 80079a8:	08007a2b 	.word	0x08007a2b
 80079ac:	08007a2b 	.word	0x08007a2b
 80079b0:	08007a2b 	.word	0x08007a2b
 80079b4:	08007a2b 	.word	0x08007a2b
 80079b8:	08007a2b 	.word	0x08007a2b
 80079bc:	08007a1d 	.word	0x08007a1d
 80079c0:	2b40      	cmp	r3, #64	; 0x40
 80079c2:	d02e      	beq.n	8007a22 <UART_SetConfig+0xab2>
 80079c4:	e031      	b.n	8007a2a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079c6:	f7fc ff47 	bl	8004858 <HAL_RCC_GetPCLK1Freq>
 80079ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80079cc:	e033      	b.n	8007a36 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079ce:	f7fc ff59 	bl	8004884 <HAL_RCC_GetPCLK2Freq>
 80079d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80079d4:	e02f      	b.n	8007a36 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079da:	4618      	mov	r0, r3
 80079dc:	f7fe f93c 	bl	8005c58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80079e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079e4:	e027      	b.n	8007a36 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079e6:	f107 0318 	add.w	r3, r7, #24
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7fe fa88 	bl	8005f00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079f4:	e01f      	b.n	8007a36 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079f6:	4b69      	ldr	r3, [pc, #420]	; (8007b9c <UART_SetConfig+0xc2c>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f003 0320 	and.w	r3, r3, #32
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d009      	beq.n	8007a16 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a02:	4b66      	ldr	r3, [pc, #408]	; (8007b9c <UART_SetConfig+0xc2c>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	08db      	lsrs	r3, r3, #3
 8007a08:	f003 0303 	and.w	r3, r3, #3
 8007a0c:	4a64      	ldr	r2, [pc, #400]	; (8007ba0 <UART_SetConfig+0xc30>)
 8007a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8007a12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a14:	e00f      	b.n	8007a36 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007a16:	4b62      	ldr	r3, [pc, #392]	; (8007ba0 <UART_SetConfig+0xc30>)
 8007a18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a1a:	e00c      	b.n	8007a36 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007a1c:	4b61      	ldr	r3, [pc, #388]	; (8007ba4 <UART_SetConfig+0xc34>)
 8007a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a20:	e009      	b.n	8007a36 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a28:	e005      	b.n	8007a36 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007a34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	f000 80ea 	beq.w	8007c12 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a42:	4a55      	ldr	r2, [pc, #340]	; (8007b98 <UART_SetConfig+0xc28>)
 8007a44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a48:	461a      	mov	r2, r3
 8007a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a50:	005a      	lsls	r2, r3, #1
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	085b      	lsrs	r3, r3, #1
 8007a58:	441a      	add	r2, r3
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a62:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a66:	2b0f      	cmp	r3, #15
 8007a68:	d916      	bls.n	8007a98 <UART_SetConfig+0xb28>
 8007a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a70:	d212      	bcs.n	8007a98 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	f023 030f 	bic.w	r3, r3, #15
 8007a7a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a7e:	085b      	lsrs	r3, r3, #1
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	f003 0307 	and.w	r3, r3, #7
 8007a86:	b29a      	uxth	r2, r3
 8007a88:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007a94:	60da      	str	r2, [r3, #12]
 8007a96:	e0bc      	b.n	8007c12 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007a9e:	e0b8      	b.n	8007c12 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007aa0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007aa4:	2b20      	cmp	r3, #32
 8007aa6:	dc4b      	bgt.n	8007b40 <UART_SetConfig+0xbd0>
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	f2c0 8087 	blt.w	8007bbc <UART_SetConfig+0xc4c>
 8007aae:	2b20      	cmp	r3, #32
 8007ab0:	f200 8084 	bhi.w	8007bbc <UART_SetConfig+0xc4c>
 8007ab4:	a201      	add	r2, pc, #4	; (adr r2, 8007abc <UART_SetConfig+0xb4c>)
 8007ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aba:	bf00      	nop
 8007abc:	08007b47 	.word	0x08007b47
 8007ac0:	08007b4f 	.word	0x08007b4f
 8007ac4:	08007bbd 	.word	0x08007bbd
 8007ac8:	08007bbd 	.word	0x08007bbd
 8007acc:	08007b57 	.word	0x08007b57
 8007ad0:	08007bbd 	.word	0x08007bbd
 8007ad4:	08007bbd 	.word	0x08007bbd
 8007ad8:	08007bbd 	.word	0x08007bbd
 8007adc:	08007b67 	.word	0x08007b67
 8007ae0:	08007bbd 	.word	0x08007bbd
 8007ae4:	08007bbd 	.word	0x08007bbd
 8007ae8:	08007bbd 	.word	0x08007bbd
 8007aec:	08007bbd 	.word	0x08007bbd
 8007af0:	08007bbd 	.word	0x08007bbd
 8007af4:	08007bbd 	.word	0x08007bbd
 8007af8:	08007bbd 	.word	0x08007bbd
 8007afc:	08007b77 	.word	0x08007b77
 8007b00:	08007bbd 	.word	0x08007bbd
 8007b04:	08007bbd 	.word	0x08007bbd
 8007b08:	08007bbd 	.word	0x08007bbd
 8007b0c:	08007bbd 	.word	0x08007bbd
 8007b10:	08007bbd 	.word	0x08007bbd
 8007b14:	08007bbd 	.word	0x08007bbd
 8007b18:	08007bbd 	.word	0x08007bbd
 8007b1c:	08007bbd 	.word	0x08007bbd
 8007b20:	08007bbd 	.word	0x08007bbd
 8007b24:	08007bbd 	.word	0x08007bbd
 8007b28:	08007bbd 	.word	0x08007bbd
 8007b2c:	08007bbd 	.word	0x08007bbd
 8007b30:	08007bbd 	.word	0x08007bbd
 8007b34:	08007bbd 	.word	0x08007bbd
 8007b38:	08007bbd 	.word	0x08007bbd
 8007b3c:	08007baf 	.word	0x08007baf
 8007b40:	2b40      	cmp	r3, #64	; 0x40
 8007b42:	d037      	beq.n	8007bb4 <UART_SetConfig+0xc44>
 8007b44:	e03a      	b.n	8007bbc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b46:	f7fc fe87 	bl	8004858 <HAL_RCC_GetPCLK1Freq>
 8007b4a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007b4c:	e03c      	b.n	8007bc8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b4e:	f7fc fe99 	bl	8004884 <HAL_RCC_GetPCLK2Freq>
 8007b52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007b54:	e038      	b.n	8007bc8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7fe f87c 	bl	8005c58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b64:	e030      	b.n	8007bc8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b66:	f107 0318 	add.w	r3, r7, #24
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7fe f9c8 	bl	8005f00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b74:	e028      	b.n	8007bc8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b76:	4b09      	ldr	r3, [pc, #36]	; (8007b9c <UART_SetConfig+0xc2c>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f003 0320 	and.w	r3, r3, #32
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d012      	beq.n	8007ba8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007b82:	4b06      	ldr	r3, [pc, #24]	; (8007b9c <UART_SetConfig+0xc2c>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	08db      	lsrs	r3, r3, #3
 8007b88:	f003 0303 	and.w	r3, r3, #3
 8007b8c:	4a04      	ldr	r2, [pc, #16]	; (8007ba0 <UART_SetConfig+0xc30>)
 8007b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8007b92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007b94:	e018      	b.n	8007bc8 <UART_SetConfig+0xc58>
 8007b96:	bf00      	nop
 8007b98:	08008628 	.word	0x08008628
 8007b9c:	58024400 	.word	0x58024400
 8007ba0:	03d09000 	.word	0x03d09000
 8007ba4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007ba8:	4b24      	ldr	r3, [pc, #144]	; (8007c3c <UART_SetConfig+0xccc>)
 8007baa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bac:	e00c      	b.n	8007bc8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007bae:	4b24      	ldr	r3, [pc, #144]	; (8007c40 <UART_SetConfig+0xcd0>)
 8007bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bb2:	e009      	b.n	8007bc8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bba:	e005      	b.n	8007bc8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007bc6:	bf00      	nop
    }

    if (pclk != 0U)
 8007bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d021      	beq.n	8007c12 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd2:	4a1c      	ldr	r2, [pc, #112]	; (8007c44 <UART_SetConfig+0xcd4>)
 8007bd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bd8:	461a      	mov	r2, r3
 8007bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bdc:	fbb3 f2f2 	udiv	r2, r3, r2
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	085b      	lsrs	r3, r3, #1
 8007be6:	441a      	add	r2, r3
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bf0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf4:	2b0f      	cmp	r3, #15
 8007bf6:	d909      	bls.n	8007c0c <UART_SetConfig+0xc9c>
 8007bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bfe:	d205      	bcs.n	8007c0c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c02:	b29a      	uxth	r2, r3
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	60da      	str	r2, [r3, #12]
 8007c0a:	e002      	b.n	8007c12 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	2201      	movs	r2, #1
 8007c16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	2200      	movs	r2, #0
 8007c26:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007c2e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3748      	adds	r7, #72	; 0x48
 8007c36:	46bd      	mov	sp, r7
 8007c38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c3c:	03d09000 	.word	0x03d09000
 8007c40:	003d0900 	.word	0x003d0900
 8007c44:	08008628 	.word	0x08008628

08007c48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c54:	f003 0301 	and.w	r3, r3, #1
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00a      	beq.n	8007c72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	430a      	orrs	r2, r1
 8007c70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c76:	f003 0302 	and.w	r3, r3, #2
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00a      	beq.n	8007c94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	430a      	orrs	r2, r1
 8007c92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c98:	f003 0304 	and.w	r3, r3, #4
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00a      	beq.n	8007cb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	430a      	orrs	r2, r1
 8007cb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cba:	f003 0308 	and.w	r3, r3, #8
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00a      	beq.n	8007cd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	430a      	orrs	r2, r1
 8007cd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cdc:	f003 0310 	and.w	r3, r3, #16
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d00a      	beq.n	8007cfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	430a      	orrs	r2, r1
 8007cf8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cfe:	f003 0320 	and.w	r3, r3, #32
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00a      	beq.n	8007d1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	430a      	orrs	r2, r1
 8007d1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d01a      	beq.n	8007d5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	430a      	orrs	r2, r1
 8007d3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d46:	d10a      	bne.n	8007d5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	430a      	orrs	r2, r1
 8007d5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00a      	beq.n	8007d80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	430a      	orrs	r2, r1
 8007d7e:	605a      	str	r2, [r3, #4]
  }
}
 8007d80:	bf00      	nop
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b098      	sub	sp, #96	; 0x60
 8007d90:	af02      	add	r7, sp, #8
 8007d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d9c:	f7fa fd0e 	bl	80027bc <HAL_GetTick>
 8007da0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f003 0308 	and.w	r3, r3, #8
 8007dac:	2b08      	cmp	r3, #8
 8007dae:	d12f      	bne.n	8007e10 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007db0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007db4:	9300      	str	r3, [sp, #0]
 8007db6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007db8:	2200      	movs	r2, #0
 8007dba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 f88e 	bl	8007ee0 <UART_WaitOnFlagUntilTimeout>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d022      	beq.n	8007e10 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd2:	e853 3f00 	ldrex	r3, [r3]
 8007dd6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dde:	653b      	str	r3, [r7, #80]	; 0x50
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	461a      	mov	r2, r3
 8007de6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007de8:	647b      	str	r3, [r7, #68]	; 0x44
 8007dea:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007dee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007df0:	e841 2300 	strex	r3, r2, [r1]
 8007df4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d1e6      	bne.n	8007dca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2220      	movs	r2, #32
 8007e00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e0c:	2303      	movs	r3, #3
 8007e0e:	e063      	b.n	8007ed8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 0304 	and.w	r3, r3, #4
 8007e1a:	2b04      	cmp	r3, #4
 8007e1c:	d149      	bne.n	8007eb2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e1e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e22:	9300      	str	r3, [sp, #0]
 8007e24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e26:	2200      	movs	r2, #0
 8007e28:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 f857 	bl	8007ee0 <UART_WaitOnFlagUntilTimeout>
 8007e32:	4603      	mov	r3, r0
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d03c      	beq.n	8007eb2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e40:	e853 3f00 	ldrex	r3, [r3]
 8007e44:	623b      	str	r3, [r7, #32]
   return(result);
 8007e46:	6a3b      	ldr	r3, [r7, #32]
 8007e48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	461a      	mov	r2, r3
 8007e54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e56:	633b      	str	r3, [r7, #48]	; 0x30
 8007e58:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e5e:	e841 2300 	strex	r3, r2, [r1]
 8007e62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d1e6      	bne.n	8007e38 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	3308      	adds	r3, #8
 8007e70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	e853 3f00 	ldrex	r3, [r3]
 8007e78:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f023 0301 	bic.w	r3, r3, #1
 8007e80:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	3308      	adds	r3, #8
 8007e88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e8a:	61fa      	str	r2, [r7, #28]
 8007e8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8e:	69b9      	ldr	r1, [r7, #24]
 8007e90:	69fa      	ldr	r2, [r7, #28]
 8007e92:	e841 2300 	strex	r3, r2, [r1]
 8007e96:	617b      	str	r3, [r7, #20]
   return(result);
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d1e5      	bne.n	8007e6a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2220      	movs	r2, #32
 8007ea2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007eae:	2303      	movs	r3, #3
 8007eb0:	e012      	b.n	8007ed8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2220      	movs	r2, #32
 8007eb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2220      	movs	r2, #32
 8007ebe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3758      	adds	r7, #88	; 0x58
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	603b      	str	r3, [r7, #0]
 8007eec:	4613      	mov	r3, r2
 8007eee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ef0:	e049      	b.n	8007f86 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ef8:	d045      	beq.n	8007f86 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007efa:	f7fa fc5f 	bl	80027bc <HAL_GetTick>
 8007efe:	4602      	mov	r2, r0
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	1ad3      	subs	r3, r2, r3
 8007f04:	69ba      	ldr	r2, [r7, #24]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d302      	bcc.n	8007f10 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d101      	bne.n	8007f14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007f10:	2303      	movs	r3, #3
 8007f12:	e048      	b.n	8007fa6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f003 0304 	and.w	r3, r3, #4
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d031      	beq.n	8007f86 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	69db      	ldr	r3, [r3, #28]
 8007f28:	f003 0308 	and.w	r3, r3, #8
 8007f2c:	2b08      	cmp	r3, #8
 8007f2e:	d110      	bne.n	8007f52 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2208      	movs	r2, #8
 8007f36:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007f38:	68f8      	ldr	r0, [r7, #12]
 8007f3a:	f000 f839 	bl	8007fb0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2208      	movs	r2, #8
 8007f42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e029      	b.n	8007fa6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	69db      	ldr	r3, [r3, #28]
 8007f58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f60:	d111      	bne.n	8007f86 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f6c:	68f8      	ldr	r0, [r7, #12]
 8007f6e:	f000 f81f 	bl	8007fb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2220      	movs	r2, #32
 8007f76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007f82:	2303      	movs	r3, #3
 8007f84:	e00f      	b.n	8007fa6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	69da      	ldr	r2, [r3, #28]
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	4013      	ands	r3, r2
 8007f90:	68ba      	ldr	r2, [r7, #8]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	bf0c      	ite	eq
 8007f96:	2301      	moveq	r3, #1
 8007f98:	2300      	movne	r3, #0
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	79fb      	ldrb	r3, [r7, #7]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d0a6      	beq.n	8007ef2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3710      	adds	r7, #16
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
	...

08007fb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b095      	sub	sp, #84	; 0x54
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fc0:	e853 3f00 	ldrex	r3, [r3]
 8007fc4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fd6:	643b      	str	r3, [r7, #64]	; 0x40
 8007fd8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fda:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007fdc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007fde:	e841 2300 	strex	r3, r2, [r1]
 8007fe2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d1e6      	bne.n	8007fb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	3308      	adds	r3, #8
 8007ff0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff2:	6a3b      	ldr	r3, [r7, #32]
 8007ff4:	e853 3f00 	ldrex	r3, [r3]
 8007ff8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ffa:	69fa      	ldr	r2, [r7, #28]
 8007ffc:	4b1e      	ldr	r3, [pc, #120]	; (8008078 <UART_EndRxTransfer+0xc8>)
 8007ffe:	4013      	ands	r3, r2
 8008000:	64bb      	str	r3, [r7, #72]	; 0x48
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	3308      	adds	r3, #8
 8008008:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800800a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800800c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800800e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008010:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008012:	e841 2300 	strex	r3, r2, [r1]
 8008016:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801a:	2b00      	cmp	r3, #0
 800801c:	d1e5      	bne.n	8007fea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008022:	2b01      	cmp	r3, #1
 8008024:	d118      	bne.n	8008058 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	e853 3f00 	ldrex	r3, [r3]
 8008032:	60bb      	str	r3, [r7, #8]
   return(result);
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	f023 0310 	bic.w	r3, r3, #16
 800803a:	647b      	str	r3, [r7, #68]	; 0x44
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	461a      	mov	r2, r3
 8008042:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008044:	61bb      	str	r3, [r7, #24]
 8008046:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008048:	6979      	ldr	r1, [r7, #20]
 800804a:	69ba      	ldr	r2, [r7, #24]
 800804c:	e841 2300 	strex	r3, r2, [r1]
 8008050:	613b      	str	r3, [r7, #16]
   return(result);
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d1e6      	bne.n	8008026 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2220      	movs	r2, #32
 800805c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800806c:	bf00      	nop
 800806e:	3754      	adds	r7, #84	; 0x54
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr
 8008078:	effffffe 	.word	0xeffffffe

0800807c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008088:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2200      	movs	r2, #0
 800808e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2200      	movs	r2, #0
 8008096:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	f7fe ff52 	bl	8006f44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080a0:	bf00      	nop
 80080a2:	3710      	adds	r7, #16
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b088      	sub	sp, #32
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	e853 3f00 	ldrex	r3, [r3]
 80080bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080c4:	61fb      	str	r3, [r7, #28]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	461a      	mov	r2, r3
 80080cc:	69fb      	ldr	r3, [r7, #28]
 80080ce:	61bb      	str	r3, [r7, #24]
 80080d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d2:	6979      	ldr	r1, [r7, #20]
 80080d4:	69ba      	ldr	r2, [r7, #24]
 80080d6:	e841 2300 	strex	r3, r2, [r1]
 80080da:	613b      	str	r3, [r7, #16]
   return(result);
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d1e6      	bne.n	80080b0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2220      	movs	r2, #32
 80080e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f7fe ff1d 	bl	8006f30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080f6:	bf00      	nop
 80080f8:	3720      	adds	r7, #32
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}

080080fe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80080fe:	b480      	push	{r7}
 8008100:	b083      	sub	sp, #12
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008106:	bf00      	nop
 8008108:	370c      	adds	r7, #12
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr

08008112 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008112:	b480      	push	{r7}
 8008114:	b083      	sub	sp, #12
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800811a:	bf00      	nop
 800811c:	370c      	adds	r7, #12
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr

08008126 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008126:	b480      	push	{r7}
 8008128:	b083      	sub	sp, #12
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800812e:	bf00      	nop
 8008130:	370c      	adds	r7, #12
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr

0800813a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800813a:	b480      	push	{r7}
 800813c:	b085      	sub	sp, #20
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008148:	2b01      	cmp	r3, #1
 800814a:	d101      	bne.n	8008150 <HAL_UARTEx_DisableFifoMode+0x16>
 800814c:	2302      	movs	r3, #2
 800814e:	e027      	b.n	80081a0 <HAL_UARTEx_DisableFifoMode+0x66>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2201      	movs	r2, #1
 8008154:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2224      	movs	r2, #36	; 0x24
 800815c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f022 0201 	bic.w	r2, r2, #1
 8008176:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800817e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	68fa      	ldr	r2, [r7, #12]
 800818c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2220      	movs	r2, #32
 8008192:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3714      	adds	r7, #20
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d101      	bne.n	80081c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80081c0:	2302      	movs	r3, #2
 80081c2:	e02d      	b.n	8008220 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2224      	movs	r2, #36	; 0x24
 80081d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f022 0201 	bic.w	r2, r2, #1
 80081ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	683a      	ldr	r2, [r7, #0]
 80081fc:	430a      	orrs	r2, r1
 80081fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 f84f 	bl	80082a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	68fa      	ldr	r2, [r7, #12]
 800820c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2220      	movs	r2, #32
 8008212:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800821e:	2300      	movs	r3, #0
}
 8008220:	4618      	mov	r0, r3
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008238:	2b01      	cmp	r3, #1
 800823a:	d101      	bne.n	8008240 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800823c:	2302      	movs	r3, #2
 800823e:	e02d      	b.n	800829c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2224      	movs	r2, #36	; 0x24
 800824c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f022 0201 	bic.w	r2, r2, #1
 8008266:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	683a      	ldr	r2, [r7, #0]
 8008278:	430a      	orrs	r2, r1
 800827a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 f811 	bl	80082a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	68fa      	ldr	r2, [r7, #12]
 8008288:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2220      	movs	r2, #32
 800828e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800829a:	2300      	movs	r3, #0
}
 800829c:	4618      	mov	r0, r3
 800829e:	3710      	adds	r7, #16
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b085      	sub	sp, #20
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d108      	bne.n	80082c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2201      	movs	r2, #1
 80082c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80082c4:	e031      	b.n	800832a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80082c6:	2310      	movs	r3, #16
 80082c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80082ca:	2310      	movs	r3, #16
 80082cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	0e5b      	lsrs	r3, r3, #25
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	f003 0307 	and.w	r3, r3, #7
 80082dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	0f5b      	lsrs	r3, r3, #29
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	f003 0307 	and.w	r3, r3, #7
 80082ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80082ee:	7bbb      	ldrb	r3, [r7, #14]
 80082f0:	7b3a      	ldrb	r2, [r7, #12]
 80082f2:	4911      	ldr	r1, [pc, #68]	; (8008338 <UARTEx_SetNbDataToProcess+0x94>)
 80082f4:	5c8a      	ldrb	r2, [r1, r2]
 80082f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80082fa:	7b3a      	ldrb	r2, [r7, #12]
 80082fc:	490f      	ldr	r1, [pc, #60]	; (800833c <UARTEx_SetNbDataToProcess+0x98>)
 80082fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008300:	fb93 f3f2 	sdiv	r3, r3, r2
 8008304:	b29a      	uxth	r2, r3
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800830c:	7bfb      	ldrb	r3, [r7, #15]
 800830e:	7b7a      	ldrb	r2, [r7, #13]
 8008310:	4909      	ldr	r1, [pc, #36]	; (8008338 <UARTEx_SetNbDataToProcess+0x94>)
 8008312:	5c8a      	ldrb	r2, [r1, r2]
 8008314:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008318:	7b7a      	ldrb	r2, [r7, #13]
 800831a:	4908      	ldr	r1, [pc, #32]	; (800833c <UARTEx_SetNbDataToProcess+0x98>)
 800831c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800831e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008322:	b29a      	uxth	r2, r3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800832a:	bf00      	nop
 800832c:	3714      	adds	r7, #20
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr
 8008336:	bf00      	nop
 8008338:	08008640 	.word	0x08008640
 800833c:	08008648 	.word	0x08008648

08008340 <_ZdlPvj>:
 8008340:	f000 b800 	b.w	8008344 <_ZdlPv>

08008344 <_ZdlPv>:
 8008344:	f000 b800 	b.w	8008348 <free>

08008348 <free>:
 8008348:	4b02      	ldr	r3, [pc, #8]	; (8008354 <free+0xc>)
 800834a:	4601      	mov	r1, r0
 800834c:	6818      	ldr	r0, [r3, #0]
 800834e:	f000 b84b 	b.w	80083e8 <_free_r>
 8008352:	bf00      	nop
 8008354:	2400005c 	.word	0x2400005c

08008358 <__malloc_lock>:
 8008358:	4801      	ldr	r0, [pc, #4]	; (8008360 <__malloc_lock+0x8>)
 800835a:	f000 b835 	b.w	80083c8 <__retarget_lock_acquire_recursive>
 800835e:	bf00      	nop
 8008360:	240002e4 	.word	0x240002e4

08008364 <__malloc_unlock>:
 8008364:	4801      	ldr	r0, [pc, #4]	; (800836c <__malloc_unlock+0x8>)
 8008366:	f000 b830 	b.w	80083ca <__retarget_lock_release_recursive>
 800836a:	bf00      	nop
 800836c:	240002e4 	.word	0x240002e4

08008370 <memset>:
 8008370:	4402      	add	r2, r0
 8008372:	4603      	mov	r3, r0
 8008374:	4293      	cmp	r3, r2
 8008376:	d100      	bne.n	800837a <memset+0xa>
 8008378:	4770      	bx	lr
 800837a:	f803 1b01 	strb.w	r1, [r3], #1
 800837e:	e7f9      	b.n	8008374 <memset+0x4>

08008380 <__libc_init_array>:
 8008380:	b570      	push	{r4, r5, r6, lr}
 8008382:	4d0d      	ldr	r5, [pc, #52]	; (80083b8 <__libc_init_array+0x38>)
 8008384:	4c0d      	ldr	r4, [pc, #52]	; (80083bc <__libc_init_array+0x3c>)
 8008386:	1b64      	subs	r4, r4, r5
 8008388:	10a4      	asrs	r4, r4, #2
 800838a:	2600      	movs	r6, #0
 800838c:	42a6      	cmp	r6, r4
 800838e:	d109      	bne.n	80083a4 <__libc_init_array+0x24>
 8008390:	4d0b      	ldr	r5, [pc, #44]	; (80083c0 <__libc_init_array+0x40>)
 8008392:	4c0c      	ldr	r4, [pc, #48]	; (80083c4 <__libc_init_array+0x44>)
 8008394:	f000 f874 	bl	8008480 <_init>
 8008398:	1b64      	subs	r4, r4, r5
 800839a:	10a4      	asrs	r4, r4, #2
 800839c:	2600      	movs	r6, #0
 800839e:	42a6      	cmp	r6, r4
 80083a0:	d105      	bne.n	80083ae <__libc_init_array+0x2e>
 80083a2:	bd70      	pop	{r4, r5, r6, pc}
 80083a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80083a8:	4798      	blx	r3
 80083aa:	3601      	adds	r6, #1
 80083ac:	e7ee      	b.n	800838c <__libc_init_array+0xc>
 80083ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80083b2:	4798      	blx	r3
 80083b4:	3601      	adds	r6, #1
 80083b6:	e7f2      	b.n	800839e <__libc_init_array+0x1e>
 80083b8:	08008658 	.word	0x08008658
 80083bc:	08008658 	.word	0x08008658
 80083c0:	08008658 	.word	0x08008658
 80083c4:	08008660 	.word	0x08008660

080083c8 <__retarget_lock_acquire_recursive>:
 80083c8:	4770      	bx	lr

080083ca <__retarget_lock_release_recursive>:
 80083ca:	4770      	bx	lr

080083cc <memcpy>:
 80083cc:	440a      	add	r2, r1
 80083ce:	4291      	cmp	r1, r2
 80083d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80083d4:	d100      	bne.n	80083d8 <memcpy+0xc>
 80083d6:	4770      	bx	lr
 80083d8:	b510      	push	{r4, lr}
 80083da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083e2:	4291      	cmp	r1, r2
 80083e4:	d1f9      	bne.n	80083da <memcpy+0xe>
 80083e6:	bd10      	pop	{r4, pc}

080083e8 <_free_r>:
 80083e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083ea:	2900      	cmp	r1, #0
 80083ec:	d044      	beq.n	8008478 <_free_r+0x90>
 80083ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083f2:	9001      	str	r0, [sp, #4]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f1a1 0404 	sub.w	r4, r1, #4
 80083fa:	bfb8      	it	lt
 80083fc:	18e4      	addlt	r4, r4, r3
 80083fe:	f7ff ffab 	bl	8008358 <__malloc_lock>
 8008402:	4a1e      	ldr	r2, [pc, #120]	; (800847c <_free_r+0x94>)
 8008404:	9801      	ldr	r0, [sp, #4]
 8008406:	6813      	ldr	r3, [r2, #0]
 8008408:	b933      	cbnz	r3, 8008418 <_free_r+0x30>
 800840a:	6063      	str	r3, [r4, #4]
 800840c:	6014      	str	r4, [r2, #0]
 800840e:	b003      	add	sp, #12
 8008410:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008414:	f7ff bfa6 	b.w	8008364 <__malloc_unlock>
 8008418:	42a3      	cmp	r3, r4
 800841a:	d908      	bls.n	800842e <_free_r+0x46>
 800841c:	6825      	ldr	r5, [r4, #0]
 800841e:	1961      	adds	r1, r4, r5
 8008420:	428b      	cmp	r3, r1
 8008422:	bf01      	itttt	eq
 8008424:	6819      	ldreq	r1, [r3, #0]
 8008426:	685b      	ldreq	r3, [r3, #4]
 8008428:	1949      	addeq	r1, r1, r5
 800842a:	6021      	streq	r1, [r4, #0]
 800842c:	e7ed      	b.n	800840a <_free_r+0x22>
 800842e:	461a      	mov	r2, r3
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	b10b      	cbz	r3, 8008438 <_free_r+0x50>
 8008434:	42a3      	cmp	r3, r4
 8008436:	d9fa      	bls.n	800842e <_free_r+0x46>
 8008438:	6811      	ldr	r1, [r2, #0]
 800843a:	1855      	adds	r5, r2, r1
 800843c:	42a5      	cmp	r5, r4
 800843e:	d10b      	bne.n	8008458 <_free_r+0x70>
 8008440:	6824      	ldr	r4, [r4, #0]
 8008442:	4421      	add	r1, r4
 8008444:	1854      	adds	r4, r2, r1
 8008446:	42a3      	cmp	r3, r4
 8008448:	6011      	str	r1, [r2, #0]
 800844a:	d1e0      	bne.n	800840e <_free_r+0x26>
 800844c:	681c      	ldr	r4, [r3, #0]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	6053      	str	r3, [r2, #4]
 8008452:	440c      	add	r4, r1
 8008454:	6014      	str	r4, [r2, #0]
 8008456:	e7da      	b.n	800840e <_free_r+0x26>
 8008458:	d902      	bls.n	8008460 <_free_r+0x78>
 800845a:	230c      	movs	r3, #12
 800845c:	6003      	str	r3, [r0, #0]
 800845e:	e7d6      	b.n	800840e <_free_r+0x26>
 8008460:	6825      	ldr	r5, [r4, #0]
 8008462:	1961      	adds	r1, r4, r5
 8008464:	428b      	cmp	r3, r1
 8008466:	bf04      	itt	eq
 8008468:	6819      	ldreq	r1, [r3, #0]
 800846a:	685b      	ldreq	r3, [r3, #4]
 800846c:	6063      	str	r3, [r4, #4]
 800846e:	bf04      	itt	eq
 8008470:	1949      	addeq	r1, r1, r5
 8008472:	6021      	streq	r1, [r4, #0]
 8008474:	6054      	str	r4, [r2, #4]
 8008476:	e7ca      	b.n	800840e <_free_r+0x26>
 8008478:	b003      	add	sp, #12
 800847a:	bd30      	pop	{r4, r5, pc}
 800847c:	240001a8 	.word	0x240001a8

08008480 <_init>:
 8008480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008482:	bf00      	nop
 8008484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008486:	bc08      	pop	{r3}
 8008488:	469e      	mov	lr, r3
 800848a:	4770      	bx	lr

0800848c <_fini>:
 800848c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800848e:	bf00      	nop
 8008490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008492:	bc08      	pop	{r3}
 8008494:	469e      	mov	lr, r3
 8008496:	4770      	bx	lr
