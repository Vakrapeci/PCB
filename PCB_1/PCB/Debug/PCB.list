
PCB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007710  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080079bc  080079bc  000179bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080079f4  080079f4  000179f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080079fc  080079fc  000179fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007a00  08007a00  00017a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000011c  24000000  08007a04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b8  2400011c  08007b20  0002011c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240001d4  08007b20  000201d4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002014a  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001020b  00000000  00000000  0002018d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00001ff4  00000000  00000000  00030398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000ae0  00000000  00000000  00032390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000866  00000000  00000000  00032e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002efb8  00000000  00000000  000336d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000feee  00000000  00000000  0006268e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013317a  00000000  00000000  0007257c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00002c94  00000000  00000000  001a56f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005f  00000000  00000000  001a838c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	2400011c 	.word	0x2400011c
 80002c8:	00000000 	.word	0x00000000
 80002cc:	080079a4 	.word	0x080079a4

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000120 	.word	0x24000120
 80002e8:	080079a4 	.word	0x080079a4

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000300:	f000 b970 	b.w	80005e4 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9e08      	ldr	r6, [sp, #32]
 8000322:	460d      	mov	r5, r1
 8000324:	4604      	mov	r4, r0
 8000326:	460f      	mov	r7, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14a      	bne.n	80003c2 <__udivmoddi4+0xa6>
 800032c:	428a      	cmp	r2, r1
 800032e:	4694      	mov	ip, r2
 8000330:	d965      	bls.n	80003fe <__udivmoddi4+0xe2>
 8000332:	fab2 f382 	clz	r3, r2
 8000336:	b143      	cbz	r3, 800034a <__udivmoddi4+0x2e>
 8000338:	fa02 fc03 	lsl.w	ip, r2, r3
 800033c:	f1c3 0220 	rsb	r2, r3, #32
 8000340:	409f      	lsls	r7, r3
 8000342:	fa20 f202 	lsr.w	r2, r0, r2
 8000346:	4317      	orrs	r7, r2
 8000348:	409c      	lsls	r4, r3
 800034a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800034e:	fa1f f58c 	uxth.w	r5, ip
 8000352:	fbb7 f1fe 	udiv	r1, r7, lr
 8000356:	0c22      	lsrs	r2, r4, #16
 8000358:	fb0e 7711 	mls	r7, lr, r1, r7
 800035c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000360:	fb01 f005 	mul.w	r0, r1, r5
 8000364:	4290      	cmp	r0, r2
 8000366:	d90a      	bls.n	800037e <__udivmoddi4+0x62>
 8000368:	eb1c 0202 	adds.w	r2, ip, r2
 800036c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000370:	f080 811c 	bcs.w	80005ac <__udivmoddi4+0x290>
 8000374:	4290      	cmp	r0, r2
 8000376:	f240 8119 	bls.w	80005ac <__udivmoddi4+0x290>
 800037a:	3902      	subs	r1, #2
 800037c:	4462      	add	r2, ip
 800037e:	1a12      	subs	r2, r2, r0
 8000380:	b2a4      	uxth	r4, r4
 8000382:	fbb2 f0fe 	udiv	r0, r2, lr
 8000386:	fb0e 2210 	mls	r2, lr, r0, r2
 800038a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038e:	fb00 f505 	mul.w	r5, r0, r5
 8000392:	42a5      	cmp	r5, r4
 8000394:	d90a      	bls.n	80003ac <__udivmoddi4+0x90>
 8000396:	eb1c 0404 	adds.w	r4, ip, r4
 800039a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x294>
 80003a2:	42a5      	cmp	r5, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x294>
 80003a8:	4464      	add	r4, ip
 80003aa:	3802      	subs	r0, #2
 80003ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	2100      	movs	r1, #0
 80003b4:	b11e      	cbz	r6, 80003be <__udivmoddi4+0xa2>
 80003b6:	40dc      	lsrs	r4, r3
 80003b8:	2300      	movs	r3, #0
 80003ba:	e9c6 4300 	strd	r4, r3, [r6]
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d908      	bls.n	80003d8 <__udivmoddi4+0xbc>
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f000 80ed 	beq.w	80005a6 <__udivmoddi4+0x28a>
 80003cc:	2100      	movs	r1, #0
 80003ce:	e9c6 0500 	strd	r0, r5, [r6]
 80003d2:	4608      	mov	r0, r1
 80003d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d8:	fab3 f183 	clz	r1, r3
 80003dc:	2900      	cmp	r1, #0
 80003de:	d149      	bne.n	8000474 <__udivmoddi4+0x158>
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d302      	bcc.n	80003ea <__udivmoddi4+0xce>
 80003e4:	4282      	cmp	r2, r0
 80003e6:	f200 80f8 	bhi.w	80005da <__udivmoddi4+0x2be>
 80003ea:	1a84      	subs	r4, r0, r2
 80003ec:	eb65 0203 	sbc.w	r2, r5, r3
 80003f0:	2001      	movs	r0, #1
 80003f2:	4617      	mov	r7, r2
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d0e2      	beq.n	80003be <__udivmoddi4+0xa2>
 80003f8:	e9c6 4700 	strd	r4, r7, [r6]
 80003fc:	e7df      	b.n	80003be <__udivmoddi4+0xa2>
 80003fe:	b902      	cbnz	r2, 8000402 <__udivmoddi4+0xe6>
 8000400:	deff      	udf	#255	; 0xff
 8000402:	fab2 f382 	clz	r3, r2
 8000406:	2b00      	cmp	r3, #0
 8000408:	f040 8090 	bne.w	800052c <__udivmoddi4+0x210>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f fe8c 	uxth.w	lr, ip
 8000416:	2101      	movs	r1, #1
 8000418:	fbb2 f5f7 	udiv	r5, r2, r7
 800041c:	fb07 2015 	mls	r0, r7, r5, r2
 8000420:	0c22      	lsrs	r2, r4, #16
 8000422:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000426:	fb0e f005 	mul.w	r0, lr, r5
 800042a:	4290      	cmp	r0, r2
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x124>
 800042e:	eb1c 0202 	adds.w	r2, ip, r2
 8000432:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000436:	d202      	bcs.n	800043e <__udivmoddi4+0x122>
 8000438:	4290      	cmp	r0, r2
 800043a:	f200 80cb 	bhi.w	80005d4 <__udivmoddi4+0x2b8>
 800043e:	4645      	mov	r5, r8
 8000440:	1a12      	subs	r2, r2, r0
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb2 f0f7 	udiv	r0, r2, r7
 8000448:	fb07 2210 	mls	r2, r7, r0, r2
 800044c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000450:	fb0e fe00 	mul.w	lr, lr, r0
 8000454:	45a6      	cmp	lr, r4
 8000456:	d908      	bls.n	800046a <__udivmoddi4+0x14e>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000460:	d202      	bcs.n	8000468 <__udivmoddi4+0x14c>
 8000462:	45a6      	cmp	lr, r4
 8000464:	f200 80bb 	bhi.w	80005de <__udivmoddi4+0x2c2>
 8000468:	4610      	mov	r0, r2
 800046a:	eba4 040e 	sub.w	r4, r4, lr
 800046e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000472:	e79f      	b.n	80003b4 <__udivmoddi4+0x98>
 8000474:	f1c1 0720 	rsb	r7, r1, #32
 8000478:	408b      	lsls	r3, r1
 800047a:	fa22 fc07 	lsr.w	ip, r2, r7
 800047e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000482:	fa05 f401 	lsl.w	r4, r5, r1
 8000486:	fa20 f307 	lsr.w	r3, r0, r7
 800048a:	40fd      	lsrs	r5, r7
 800048c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000490:	4323      	orrs	r3, r4
 8000492:	fbb5 f8f9 	udiv	r8, r5, r9
 8000496:	fa1f fe8c 	uxth.w	lr, ip
 800049a:	fb09 5518 	mls	r5, r9, r8, r5
 800049e:	0c1c      	lsrs	r4, r3, #16
 80004a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a4:	fb08 f50e 	mul.w	r5, r8, lr
 80004a8:	42a5      	cmp	r5, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	fa00 f001 	lsl.w	r0, r0, r1
 80004b2:	d90b      	bls.n	80004cc <__udivmoddi4+0x1b0>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004bc:	f080 8088 	bcs.w	80005d0 <__udivmoddi4+0x2b4>
 80004c0:	42a5      	cmp	r5, r4
 80004c2:	f240 8085 	bls.w	80005d0 <__udivmoddi4+0x2b4>
 80004c6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ca:	4464      	add	r4, ip
 80004cc:	1b64      	subs	r4, r4, r5
 80004ce:	b29d      	uxth	r5, r3
 80004d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d4:	fb09 4413 	mls	r4, r9, r3, r4
 80004d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e0:	45a6      	cmp	lr, r4
 80004e2:	d908      	bls.n	80004f6 <__udivmoddi4+0x1da>
 80004e4:	eb1c 0404 	adds.w	r4, ip, r4
 80004e8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004ec:	d26c      	bcs.n	80005c8 <__udivmoddi4+0x2ac>
 80004ee:	45a6      	cmp	lr, r4
 80004f0:	d96a      	bls.n	80005c8 <__udivmoddi4+0x2ac>
 80004f2:	3b02      	subs	r3, #2
 80004f4:	4464      	add	r4, ip
 80004f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fa:	fba3 9502 	umull	r9, r5, r3, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	42ac      	cmp	r4, r5
 8000504:	46c8      	mov	r8, r9
 8000506:	46ae      	mov	lr, r5
 8000508:	d356      	bcc.n	80005b8 <__udivmoddi4+0x29c>
 800050a:	d053      	beq.n	80005b4 <__udivmoddi4+0x298>
 800050c:	b156      	cbz	r6, 8000524 <__udivmoddi4+0x208>
 800050e:	ebb0 0208 	subs.w	r2, r0, r8
 8000512:	eb64 040e 	sbc.w	r4, r4, lr
 8000516:	fa04 f707 	lsl.w	r7, r4, r7
 800051a:	40ca      	lsrs	r2, r1
 800051c:	40cc      	lsrs	r4, r1
 800051e:	4317      	orrs	r7, r2
 8000520:	e9c6 7400 	strd	r7, r4, [r6]
 8000524:	4618      	mov	r0, r3
 8000526:	2100      	movs	r1, #0
 8000528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052c:	f1c3 0120 	rsb	r1, r3, #32
 8000530:	fa02 fc03 	lsl.w	ip, r2, r3
 8000534:	fa20 f201 	lsr.w	r2, r0, r1
 8000538:	fa25 f101 	lsr.w	r1, r5, r1
 800053c:	409d      	lsls	r5, r3
 800053e:	432a      	orrs	r2, r5
 8000540:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000544:	fa1f fe8c 	uxth.w	lr, ip
 8000548:	fbb1 f0f7 	udiv	r0, r1, r7
 800054c:	fb07 1510 	mls	r5, r7, r0, r1
 8000550:	0c11      	lsrs	r1, r2, #16
 8000552:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000556:	fb00 f50e 	mul.w	r5, r0, lr
 800055a:	428d      	cmp	r5, r1
 800055c:	fa04 f403 	lsl.w	r4, r4, r3
 8000560:	d908      	bls.n	8000574 <__udivmoddi4+0x258>
 8000562:	eb1c 0101 	adds.w	r1, ip, r1
 8000566:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800056a:	d22f      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800056c:	428d      	cmp	r5, r1
 800056e:	d92d      	bls.n	80005cc <__udivmoddi4+0x2b0>
 8000570:	3802      	subs	r0, #2
 8000572:	4461      	add	r1, ip
 8000574:	1b49      	subs	r1, r1, r5
 8000576:	b292      	uxth	r2, r2
 8000578:	fbb1 f5f7 	udiv	r5, r1, r7
 800057c:	fb07 1115 	mls	r1, r7, r5, r1
 8000580:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000584:	fb05 f10e 	mul.w	r1, r5, lr
 8000588:	4291      	cmp	r1, r2
 800058a:	d908      	bls.n	800059e <__udivmoddi4+0x282>
 800058c:	eb1c 0202 	adds.w	r2, ip, r2
 8000590:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000594:	d216      	bcs.n	80005c4 <__udivmoddi4+0x2a8>
 8000596:	4291      	cmp	r1, r2
 8000598:	d914      	bls.n	80005c4 <__udivmoddi4+0x2a8>
 800059a:	3d02      	subs	r5, #2
 800059c:	4462      	add	r2, ip
 800059e:	1a52      	subs	r2, r2, r1
 80005a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a4:	e738      	b.n	8000418 <__udivmoddi4+0xfc>
 80005a6:	4631      	mov	r1, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e708      	b.n	80003be <__udivmoddi4+0xa2>
 80005ac:	4639      	mov	r1, r7
 80005ae:	e6e6      	b.n	800037e <__udivmoddi4+0x62>
 80005b0:	4610      	mov	r0, r2
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x90>
 80005b4:	4548      	cmp	r0, r9
 80005b6:	d2a9      	bcs.n	800050c <__udivmoddi4+0x1f0>
 80005b8:	ebb9 0802 	subs.w	r8, r9, r2
 80005bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c0:	3b01      	subs	r3, #1
 80005c2:	e7a3      	b.n	800050c <__udivmoddi4+0x1f0>
 80005c4:	4645      	mov	r5, r8
 80005c6:	e7ea      	b.n	800059e <__udivmoddi4+0x282>
 80005c8:	462b      	mov	r3, r5
 80005ca:	e794      	b.n	80004f6 <__udivmoddi4+0x1da>
 80005cc:	4640      	mov	r0, r8
 80005ce:	e7d1      	b.n	8000574 <__udivmoddi4+0x258>
 80005d0:	46d0      	mov	r8, sl
 80005d2:	e77b      	b.n	80004cc <__udivmoddi4+0x1b0>
 80005d4:	3d02      	subs	r5, #2
 80005d6:	4462      	add	r2, ip
 80005d8:	e732      	b.n	8000440 <__udivmoddi4+0x124>
 80005da:	4608      	mov	r0, r1
 80005dc:	e70a      	b.n	80003f4 <__udivmoddi4+0xd8>
 80005de:	4464      	add	r4, ip
 80005e0:	3802      	subs	r0, #2
 80005e2:	e742      	b.n	800046a <__udivmoddi4+0x14e>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ec:	f000 fcb6 	bl	8000f5c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80005f0:	f000 f91e 	bl	8000830 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f4:	f000 f9e6 	bl	80009c4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005f8:	f000 f990 	bl	800091c <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80005fc:	f000 f9da 	bl	80009b4 <MX_USB_OTG_HS_USB_Init>

  /* USER CODE BEGIN 2*/
  // UART interrupt inditasa
  if(mode != POLL){
 8000600:	4b79      	ldr	r3, [pc, #484]	; (80007e8 <main+0x200>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d004      	beq.n	8000612 <main+0x2a>
	  HAL_UART_Receive_IT(&huart3, data, 1);
 8000608:	2201      	movs	r2, #1
 800060a:	4978      	ldr	r1, [pc, #480]	; (80007ec <main+0x204>)
 800060c:	4878      	ldr	r0, [pc, #480]	; (80007f0 <main+0x208>)
 800060e:	f004 fd4f 	bl	80050b0 <HAL_UART_Receive_IT>
  }

  // alap adatok, udvozlo szoveg, utmutato kikuldese UART-on
  HAL_UART_Transmit(&huart3, welcome, sizeof(welcome), 10);
 8000612:	230a      	movs	r3, #10
 8000614:	223f      	movs	r2, #63	; 0x3f
 8000616:	4977      	ldr	r1, [pc, #476]	; (80007f4 <main+0x20c>)
 8000618:	4875      	ldr	r0, [pc, #468]	; (80007f0 <main+0x208>)
 800061a:	f004 fbf3 	bl	8004e04 <HAL_UART_Transmit>
  if(mode == POLL){
 800061e:	4b72      	ldr	r3, [pc, #456]	; (80007e8 <main+0x200>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d106      	bne.n	8000634 <main+0x4c>
	  HAL_UART_Transmit(&huart3, poll, sizeof(poll), 10);
 8000626:	230a      	movs	r3, #10
 8000628:	220e      	movs	r2, #14
 800062a:	4973      	ldr	r1, [pc, #460]	; (80007f8 <main+0x210>)
 800062c:	4870      	ldr	r0, [pc, #448]	; (80007f0 <main+0x208>)
 800062e:	f004 fbe9 	bl	8004e04 <HAL_UART_Transmit>
 8000632:	e005      	b.n	8000640 <main+0x58>
  }else{
	  HAL_UART_Transmit(&huart3, it, sizeof(it), 10);
 8000634:	230a      	movs	r3, #10
 8000636:	2213      	movs	r2, #19
 8000638:	4970      	ldr	r1, [pc, #448]	; (80007fc <main+0x214>)
 800063a:	486d      	ldr	r0, [pc, #436]	; (80007f0 <main+0x208>)
 800063c:	f004 fbe2 	bl	8004e04 <HAL_UART_Transmit>
  }
  HAL_UART_Transmit(&huart3, instruction, sizeof(instruction), 10);
 8000640:	230a      	movs	r3, #10
 8000642:	2239      	movs	r2, #57	; 0x39
 8000644:	496e      	ldr	r1, [pc, #440]	; (8000800 <main+0x218>)
 8000646:	486a      	ldr	r0, [pc, #424]	; (80007f0 <main+0x208>)
 8000648:	f004 fbdc 	bl	8004e04 <HAL_UART_Transmit>
  HAL_Delay(10);
 800064c:	200a      	movs	r0, #10
 800064e:	f000 fd17 	bl	8001080 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  // gombnyomas erzekelese
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)){
 8000652:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000656:	486b      	ldr	r0, [pc, #428]	; (8000804 <main+0x21c>)
 8000658:	f001 fd5a 	bl	8002110 <HAL_GPIO_ReadPin>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d05c      	beq.n	800071c <main+0x134>
		  while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)){}	// pergesmentesites
 8000662:	bf00      	nop
 8000664:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000668:	4866      	ldr	r0, [pc, #408]	; (8000804 <main+0x21c>)
 800066a:	f001 fd51 	bl	8002110 <HAL_GPIO_ReadPin>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d1f7      	bne.n	8000664 <main+0x7c>
		  if(state == 0 && state_old == 1){
 8000674:	4b64      	ldr	r3, [pc, #400]	; (8000808 <main+0x220>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d119      	bne.n	80006b0 <main+0xc8>
 800067c:	4b63      	ldr	r3, [pc, #396]	; (800080c <main+0x224>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d115      	bne.n	80006b0 <main+0xc8>
			  // LED-ek alaphelyzetbe allitasa
			  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);	// state allapotat mutato LED
 8000684:	2201      	movs	r2, #1
 8000686:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800068a:	4861      	ldr	r0, [pc, #388]	; (8000810 <main+0x228>)
 800068c:	f001 fd58 	bl	8002140 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);	// UART-on kapcsolhato LED
 8000690:	2200      	movs	r2, #0
 8000692:	2102      	movs	r1, #2
 8000694:	485f      	ldr	r0, [pc, #380]	; (8000814 <main+0x22c>)
 8000696:	f001 fd53 	bl	8002140 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);	// state 1-ben villogo LED
 800069a:	2200      	movs	r2, #0
 800069c:	2101      	movs	r1, #1
 800069e:	485c      	ldr	r0, [pc, #368]	; (8000810 <main+0x228>)
 80006a0:	f001 fd4e 	bl	8002140 <HAL_GPIO_WritePin>
			  // uzenet, hogy atleptunk villogo modba
			  HAL_UART_Transmit(&huart3, AUTOON, sizeof(AUTOON), 10);
 80006a4:	230a      	movs	r3, #10
 80006a6:	220f      	movs	r2, #15
 80006a8:	495b      	ldr	r1, [pc, #364]	; (8000818 <main+0x230>)
 80006aa:	4851      	ldr	r0, [pc, #324]	; (80007f0 <main+0x208>)
 80006ac:	f004 fbaa 	bl	8004e04 <HAL_UART_Transmit>
		  }
		  if(state == 1 && state_old == 0){
 80006b0:	4b55      	ldr	r3, [pc, #340]	; (8000808 <main+0x220>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d11f      	bne.n	80006f8 <main+0x110>
 80006b8:	4b54      	ldr	r3, [pc, #336]	; (800080c <main+0x224>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d11b      	bne.n	80006f8 <main+0x110>
			  // LED-ek alaphelyzetbe allitasa
			  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);	// state allapotat mutato LED
 80006c0:	2200      	movs	r2, #0
 80006c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006c6:	4852      	ldr	r0, [pc, #328]	; (8000810 <main+0x228>)
 80006c8:	f001 fd3a 	bl	8002140 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);	// UART-on kapcsolhato LED
 80006cc:	2200      	movs	r2, #0
 80006ce:	2102      	movs	r1, #2
 80006d0:	4850      	ldr	r0, [pc, #320]	; (8000814 <main+0x22c>)
 80006d2:	f001 fd35 	bl	8002140 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);	// state 1-ben villogo LED
 80006d6:	2200      	movs	r2, #0
 80006d8:	2101      	movs	r1, #1
 80006da:	484d      	ldr	r0, [pc, #308]	; (8000810 <main+0x228>)
 80006dc:	f001 fd30 	bl	8002140 <HAL_GPIO_WritePin>
			  // uzenet, hogy visszaleptunk alap modba
			  HAL_UART_Transmit(&huart3, AUTOOFF, sizeof(AUTOOFF), 10);
 80006e0:	230a      	movs	r3, #10
 80006e2:	2210      	movs	r2, #16
 80006e4:	494d      	ldr	r1, [pc, #308]	; (800081c <main+0x234>)
 80006e6:	4842      	ldr	r0, [pc, #264]	; (80007f0 <main+0x208>)
 80006e8:	f004 fb8c 	bl	8004e04 <HAL_UART_Transmit>
			  // utmutato kiirasa UART-on
			  HAL_UART_Transmit(&huart3, instruction, sizeof(instruction), 10);
 80006ec:	230a      	movs	r3, #10
 80006ee:	2239      	movs	r2, #57	; 0x39
 80006f0:	4943      	ldr	r1, [pc, #268]	; (8000800 <main+0x218>)
 80006f2:	483f      	ldr	r0, [pc, #252]	; (80007f0 <main+0x208>)
 80006f4:	f004 fb86 	bl	8004e04 <HAL_UART_Transmit>
		  }
		  // state allapotvaltozok frissitese
		  state_old = state;
 80006f8:	4b43      	ldr	r3, [pc, #268]	; (8000808 <main+0x220>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a43      	ldr	r2, [pc, #268]	; (800080c <main+0x224>)
 80006fe:	6013      	str	r3, [r2, #0]
		  state++;
 8000700:	4b41      	ldr	r3, [pc, #260]	; (8000808 <main+0x220>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	3301      	adds	r3, #1
 8000706:	4a40      	ldr	r2, [pc, #256]	; (8000808 <main+0x220>)
 8000708:	6013      	str	r3, [r2, #0]
		  state %= 2;
 800070a:	4b3f      	ldr	r3, [pc, #252]	; (8000808 <main+0x220>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	f003 0301 	and.w	r3, r3, #1
 8000714:	bfb8      	it	lt
 8000716:	425b      	neglt	r3, r3
 8000718:	4a3b      	ldr	r2, [pc, #236]	; (8000808 <main+0x220>)
 800071a:	6013      	str	r3, [r2, #0]
	  }// if(B1)


	  // basic allapot - nem vilagitanak LED-ek, csak LED2 kapcsolhato UART-on
	  if(state == 0){
 800071c:	4b3a      	ldr	r3, [pc, #232]	; (8000808 <main+0x220>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d138      	bne.n	8000796 <main+0x1ae>
		  // POLL mode
		  if(mode == POLL){
 8000724:	4b30      	ldr	r3, [pc, #192]	; (80007e8 <main+0x200>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b01      	cmp	r3, #1
 800072a:	d134      	bne.n	8000796 <main+0x1ae>
			  // varja UART-on az utasitast
			  HAL_UART_Receive(&huart3, data, 1, 1);
 800072c:	2301      	movs	r3, #1
 800072e:	2201      	movs	r2, #1
 8000730:	492e      	ldr	r1, [pc, #184]	; (80007ec <main+0x204>)
 8000732:	482f      	ldr	r0, [pc, #188]	; (80007f0 <main+0x208>)
 8000734:	f004 fbf4 	bl	8004f20 <HAL_UART_Receive>

			  if(data[0] == '1' && HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin) == 0){
 8000738:	4b2c      	ldr	r3, [pc, #176]	; (80007ec <main+0x204>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b31      	cmp	r3, #49	; 0x31
 800073e:	d111      	bne.n	8000764 <main+0x17c>
 8000740:	2102      	movs	r1, #2
 8000742:	4834      	ldr	r0, [pc, #208]	; (8000814 <main+0x22c>)
 8000744:	f001 fce4 	bl	8002110 <HAL_GPIO_ReadPin>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d10a      	bne.n	8000764 <main+0x17c>
				  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 800074e:	2201      	movs	r2, #1
 8000750:	2102      	movs	r1, #2
 8000752:	4830      	ldr	r0, [pc, #192]	; (8000814 <main+0x22c>)
 8000754:	f001 fcf4 	bl	8002140 <HAL_GPIO_WritePin>
				  HAL_UART_Transmit(&huart3, LED2ON, sizeof(LED2ON), 10);
 8000758:	230a      	movs	r3, #10
 800075a:	220e      	movs	r2, #14
 800075c:	4930      	ldr	r1, [pc, #192]	; (8000820 <main+0x238>)
 800075e:	4824      	ldr	r0, [pc, #144]	; (80007f0 <main+0x208>)
 8000760:	f004 fb50 	bl	8004e04 <HAL_UART_Transmit>
			  }
			  if(data[0] == '0' && HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin) == 1){
 8000764:	4b21      	ldr	r3, [pc, #132]	; (80007ec <main+0x204>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b30      	cmp	r3, #48	; 0x30
 800076a:	d111      	bne.n	8000790 <main+0x1a8>
 800076c:	2102      	movs	r1, #2
 800076e:	4829      	ldr	r0, [pc, #164]	; (8000814 <main+0x22c>)
 8000770:	f001 fcce 	bl	8002110 <HAL_GPIO_ReadPin>
 8000774:	4603      	mov	r3, r0
 8000776:	2b01      	cmp	r3, #1
 8000778:	d10a      	bne.n	8000790 <main+0x1a8>
				  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	2102      	movs	r1, #2
 800077e:	4825      	ldr	r0, [pc, #148]	; (8000814 <main+0x22c>)
 8000780:	f001 fcde 	bl	8002140 <HAL_GPIO_WritePin>
				  HAL_UART_Transmit(&huart3, LED2OFF, sizeof(LED2OFF), 10);
 8000784:	230a      	movs	r3, #10
 8000786:	220e      	movs	r2, #14
 8000788:	4926      	ldr	r1, [pc, #152]	; (8000824 <main+0x23c>)
 800078a:	4819      	ldr	r0, [pc, #100]	; (80007f0 <main+0x208>)
 800078c:	f004 fb3a 	bl	8004e04 <HAL_UART_Transmit>
			  }

			  HAL_Delay(5);
 8000790:	2005      	movs	r0, #5
 8000792:	f000 fc75 	bl	8001080 <HAL_Delay>
			  // itt nincs szukseg LED kapcsolo kod-ra,
			  // mivel az interrupt fuggvenyben van megvalositva
		  }
	  }// if(state==0)

	  if(state == 1){
 8000796:	4b1c      	ldr	r3, [pc, #112]	; (8000808 <main+0x220>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2b01      	cmp	r3, #1
 800079c:	f47f af59 	bne.w	8000652 <main+0x6a>
		  // LED1 villog, kikuldi UART-on, hogy fel vagy le van kapcsolva
		  // poll modban ebben az allapotban nem tud UART-on adatot fogadni
		  if(HAL_GPIO_ReadPin(LD1_GPIO_Port, LD1_Pin) == 0){
 80007a0:	2101      	movs	r1, #1
 80007a2:	481b      	ldr	r0, [pc, #108]	; (8000810 <main+0x228>)
 80007a4:	f001 fcb4 	bl	8002110 <HAL_GPIO_ReadPin>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d10b      	bne.n	80007c6 <main+0x1de>
			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 80007ae:	2201      	movs	r2, #1
 80007b0:	2101      	movs	r1, #1
 80007b2:	4817      	ldr	r0, [pc, #92]	; (8000810 <main+0x228>)
 80007b4:	f001 fcc4 	bl	8002140 <HAL_GPIO_WritePin>
			  HAL_UART_Transmit(&huart3, LED1ON, sizeof(LED1ON), 10);
 80007b8:	230a      	movs	r3, #10
 80007ba:	220e      	movs	r2, #14
 80007bc:	491a      	ldr	r1, [pc, #104]	; (8000828 <main+0x240>)
 80007be:	480c      	ldr	r0, [pc, #48]	; (80007f0 <main+0x208>)
 80007c0:	f004 fb20 	bl	8004e04 <HAL_UART_Transmit>
 80007c4:	e00a      	b.n	80007dc <main+0x1f4>
		  }else{
			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2101      	movs	r1, #1
 80007ca:	4811      	ldr	r0, [pc, #68]	; (8000810 <main+0x228>)
 80007cc:	f001 fcb8 	bl	8002140 <HAL_GPIO_WritePin>
			  HAL_UART_Transmit(&huart3, LED1OFF, sizeof(LED1OFF), 10);
 80007d0:	230a      	movs	r3, #10
 80007d2:	220e      	movs	r2, #14
 80007d4:	4915      	ldr	r1, [pc, #84]	; (800082c <main+0x244>)
 80007d6:	4806      	ldr	r0, [pc, #24]	; (80007f0 <main+0x208>)
 80007d8:	f004 fb14 	bl	8004e04 <HAL_UART_Transmit>
		  }

		  HAL_Delay(1000);
 80007dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007e0:	f000 fc4e 	bl	8001080 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)){
 80007e4:	e735      	b.n	8000652 <main+0x6a>
 80007e6:	bf00      	nop
 80007e8:	24000108 	.word	0x24000108
 80007ec:	24000100 	.word	0x24000100
 80007f0:	24000138 	.word	0x24000138
 80007f4:	24000000 	.word	0x24000000
 80007f8:	240000dc 	.word	0x240000dc
 80007fc:	240000ec 	.word	0x240000ec
 8000800:	24000040 	.word	0x24000040
 8000804:	58020800 	.word	0x58020800
 8000808:	240001cc 	.word	0x240001cc
 800080c:	24000104 	.word	0x24000104
 8000810:	58020400 	.word	0x58020400
 8000814:	58021000 	.word	0x58021000
 8000818:	240000bc 	.word	0x240000bc
 800081c:	240000cc 	.word	0x240000cc
 8000820:	2400009c 	.word	0x2400009c
 8000824:	240000ac 	.word	0x240000ac
 8000828:	2400007c 	.word	0x2400007c
 800082c:	2400008c 	.word	0x2400008c

08000830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b09c      	sub	sp, #112	; 0x70
 8000834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083a:	224c      	movs	r2, #76	; 0x4c
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f007 f884 	bl	800794c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	2220      	movs	r2, #32
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f007 f87e 	bl	800794c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000850:	4b30      	ldr	r3, [pc, #192]	; (8000914 <SystemClock_Config+0xe4>)
 8000852:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000856:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800085a:	2004      	movs	r0, #4
 800085c:	f001 fc8a 	bl	8002174 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000860:	2300      	movs	r3, #0
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	4b2c      	ldr	r3, [pc, #176]	; (8000918 <SystemClock_Config+0xe8>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	4a2b      	ldr	r2, [pc, #172]	; (8000918 <SystemClock_Config+0xe8>)
 800086a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800086e:	6193      	str	r3, [r2, #24]
 8000870:	4b29      	ldr	r3, [pc, #164]	; (8000918 <SystemClock_Config+0xe8>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800087c:	bf00      	nop
 800087e:	4b26      	ldr	r3, [pc, #152]	; (8000918 <SystemClock_Config+0xe8>)
 8000880:	699b      	ldr	r3, [r3, #24]
 8000882:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800088a:	d1f8      	bne.n	800087e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800088c:	2321      	movs	r3, #33	; 0x21
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000890:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000896:	2301      	movs	r3, #1
 8000898:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800089a:	2302      	movs	r3, #2
 800089c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800089e:	2302      	movs	r3, #2
 80008a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008a2:	2301      	movs	r3, #1
 80008a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80008a6:	2318      	movs	r3, #24
 80008a8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008aa:	2302      	movs	r3, #2
 80008ac:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008ae:	2304      	movs	r3, #4
 80008b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008b2:	2302      	movs	r3, #2
 80008b4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008b6:	230c      	movs	r3, #12
 80008b8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c6:	4618      	mov	r0, r3
 80008c8:	f001 fcae 	bl	8002228 <HAL_RCC_OscConfig>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80008d2:	f000 f9db 	bl	8000c8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d6:	233f      	movs	r3, #63	; 0x3f
 80008d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008da:	2303      	movs	r3, #3
 80008dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008de:	2300      	movs	r3, #0
 80008e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008e6:	2300      	movs	r3, #0
 80008e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	2102      	movs	r1, #2
 80008fa:	4618      	mov	r0, r3
 80008fc:	f002 f8c6 	bl	8002a8c <HAL_RCC_ClockConfig>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000906:	f000 f9c1 	bl	8000c8c <Error_Handler>
  }
}
 800090a:	bf00      	nop
 800090c:	3770      	adds	r7, #112	; 0x70
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	58024400 	.word	0x58024400
 8000918:	58024800 	.word	0x58024800

0800091c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000920:	4b22      	ldr	r3, [pc, #136]	; (80009ac <MX_USART3_UART_Init+0x90>)
 8000922:	4a23      	ldr	r2, [pc, #140]	; (80009b0 <MX_USART3_UART_Init+0x94>)
 8000924:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000926:	4b21      	ldr	r3, [pc, #132]	; (80009ac <MX_USART3_UART_Init+0x90>)
 8000928:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800092c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800092e:	4b1f      	ldr	r3, [pc, #124]	; (80009ac <MX_USART3_UART_Init+0x90>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000934:	4b1d      	ldr	r3, [pc, #116]	; (80009ac <MX_USART3_UART_Init+0x90>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800093a:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <MX_USART3_UART_Init+0x90>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000940:	4b1a      	ldr	r3, [pc, #104]	; (80009ac <MX_USART3_UART_Init+0x90>)
 8000942:	220c      	movs	r2, #12
 8000944:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000946:	4b19      	ldr	r3, [pc, #100]	; (80009ac <MX_USART3_UART_Init+0x90>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800094c:	4b17      	ldr	r3, [pc, #92]	; (80009ac <MX_USART3_UART_Init+0x90>)
 800094e:	2200      	movs	r2, #0
 8000950:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000952:	4b16      	ldr	r3, [pc, #88]	; (80009ac <MX_USART3_UART_Init+0x90>)
 8000954:	2200      	movs	r2, #0
 8000956:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000958:	4b14      	ldr	r3, [pc, #80]	; (80009ac <MX_USART3_UART_Init+0x90>)
 800095a:	2200      	movs	r2, #0
 800095c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800095e:	4b13      	ldr	r3, [pc, #76]	; (80009ac <MX_USART3_UART_Init+0x90>)
 8000960:	2200      	movs	r2, #0
 8000962:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000964:	4811      	ldr	r0, [pc, #68]	; (80009ac <MX_USART3_UART_Init+0x90>)
 8000966:	f004 f9fd 	bl	8004d64 <HAL_UART_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000970:	f000 f98c 	bl	8000c8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000974:	2100      	movs	r1, #0
 8000976:	480d      	ldr	r0, [pc, #52]	; (80009ac <MX_USART3_UART_Init+0x90>)
 8000978:	f006 ff1d 	bl	80077b6 <HAL_UARTEx_SetTxFifoThreshold>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000982:	f000 f983 	bl	8000c8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000986:	2100      	movs	r1, #0
 8000988:	4808      	ldr	r0, [pc, #32]	; (80009ac <MX_USART3_UART_Init+0x90>)
 800098a:	f006 ff52 	bl	8007832 <HAL_UARTEx_SetRxFifoThreshold>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000994:	f000 f97a 	bl	8000c8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000998:	4804      	ldr	r0, [pc, #16]	; (80009ac <MX_USART3_UART_Init+0x90>)
 800099a:	f006 fed3 	bl	8007744 <HAL_UARTEx_DisableFifoMode>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009a4:	f000 f972 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	24000138 	.word	0x24000138
 80009b0:	40004800 	.word	0x40004800

080009b4 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
	...

080009c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08e      	sub	sp, #56	; 0x38
 80009c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
 80009d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009da:	4b80      	ldr	r3, [pc, #512]	; (8000bdc <MX_GPIO_Init+0x218>)
 80009dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009e0:	4a7e      	ldr	r2, [pc, #504]	; (8000bdc <MX_GPIO_Init+0x218>)
 80009e2:	f043 0304 	orr.w	r3, r3, #4
 80009e6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009ea:	4b7c      	ldr	r3, [pc, #496]	; (8000bdc <MX_GPIO_Init+0x218>)
 80009ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009f0:	f003 0304 	and.w	r3, r3, #4
 80009f4:	623b      	str	r3, [r7, #32]
 80009f6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009f8:	4b78      	ldr	r3, [pc, #480]	; (8000bdc <MX_GPIO_Init+0x218>)
 80009fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009fe:	4a77      	ldr	r2, [pc, #476]	; (8000bdc <MX_GPIO_Init+0x218>)
 8000a00:	f043 0320 	orr.w	r3, r3, #32
 8000a04:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a08:	4b74      	ldr	r3, [pc, #464]	; (8000bdc <MX_GPIO_Init+0x218>)
 8000a0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a0e:	f003 0320 	and.w	r3, r3, #32
 8000a12:	61fb      	str	r3, [r7, #28]
 8000a14:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a16:	4b71      	ldr	r3, [pc, #452]	; (8000bdc <MX_GPIO_Init+0x218>)
 8000a18:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a1c:	4a6f      	ldr	r2, [pc, #444]	; (8000bdc <MX_GPIO_Init+0x218>)
 8000a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a22:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a26:	4b6d      	ldr	r3, [pc, #436]	; (8000bdc <MX_GPIO_Init+0x218>)
 8000a28:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a30:	61bb      	str	r3, [r7, #24]
 8000a32:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a34:	4b69      	ldr	r3, [pc, #420]	; (8000bdc <MX_GPIO_Init+0x218>)
 8000a36:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a3a:	4a68      	ldr	r2, [pc, #416]	; (8000bdc <MX_GPIO_Init+0x218>)
 8000a3c:	f043 0302 	orr.w	r3, r3, #2
 8000a40:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a44:	4b65      	ldr	r3, [pc, #404]	; (8000bdc <MX_GPIO_Init+0x218>)
 8000a46:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a4a:	f003 0302 	and.w	r3, r3, #2
 8000a4e:	617b      	str	r3, [r7, #20]
 8000a50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a52:	4b62      	ldr	r3, [pc, #392]	; (8000bdc <MX_GPIO_Init+0x218>)
 8000a54:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a58:	4a60      	ldr	r2, [pc, #384]	; (8000bdc <MX_GPIO_Init+0x218>)
 8000a5a:	f043 0308 	orr.w	r3, r3, #8
 8000a5e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a62:	4b5e      	ldr	r3, [pc, #376]	; (8000bdc <MX_GPIO_Init+0x218>)
 8000a64:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a68:	f003 0308 	and.w	r3, r3, #8
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a70:	4b5a      	ldr	r3, [pc, #360]	; (8000bdc <MX_GPIO_Init+0x218>)
 8000a72:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a76:	4a59      	ldr	r2, [pc, #356]	; (8000bdc <MX_GPIO_Init+0x218>)
 8000a78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a7c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a80:	4b56      	ldr	r3, [pc, #344]	; (8000bdc <MX_GPIO_Init+0x218>)
 8000a82:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	4b53      	ldr	r3, [pc, #332]	; (8000bdc <MX_GPIO_Init+0x218>)
 8000a90:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a94:	4a51      	ldr	r2, [pc, #324]	; (8000bdc <MX_GPIO_Init+0x218>)
 8000a96:	f043 0301 	orr.w	r3, r3, #1
 8000a9a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a9e:	4b4f      	ldr	r3, [pc, #316]	; (8000bdc <MX_GPIO_Init+0x218>)
 8000aa0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000aa4:	f003 0301 	and.w	r3, r3, #1
 8000aa8:	60bb      	str	r3, [r7, #8]
 8000aaa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aac:	4b4b      	ldr	r3, [pc, #300]	; (8000bdc <MX_GPIO_Init+0x218>)
 8000aae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ab2:	4a4a      	ldr	r2, [pc, #296]	; (8000bdc <MX_GPIO_Init+0x218>)
 8000ab4:	f043 0310 	orr.w	r3, r3, #16
 8000ab8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000abc:	4b47      	ldr	r3, [pc, #284]	; (8000bdc <MX_GPIO_Init+0x218>)
 8000abe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ac2:	f003 0310 	and.w	r3, r3, #16
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ad0:	4843      	ldr	r0, [pc, #268]	; (8000be0 <MX_GPIO_Init+0x21c>)
 8000ad2:	f001 fb35 	bl	8002140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f244 0101 	movw	r1, #16385	; 0x4001
 8000adc:	4841      	ldr	r0, [pc, #260]	; (8000be4 <MX_GPIO_Init+0x220>)
 8000ade:	f001 fb2f 	bl	8002140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2102      	movs	r1, #2
 8000ae6:	4840      	ldr	r0, [pc, #256]	; (8000be8 <MX_GPIO_Init+0x224>)
 8000ae8:	f001 fb2a 	bl	8002140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afe:	4619      	mov	r1, r3
 8000b00:	483a      	ldr	r0, [pc, #232]	; (8000bec <MX_GPIO_Init+0x228>)
 8000b02:	f001 f955 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000b06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b14:	2300      	movs	r3, #0
 8000b16:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4830      	ldr	r0, [pc, #192]	; (8000be0 <MX_GPIO_Init+0x21c>)
 8000b20:	f001 f946 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000b24:	f244 0301 	movw	r3, #16385	; 0x4001
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4829      	ldr	r0, [pc, #164]	; (8000be4 <MX_GPIO_Init+0x220>)
 8000b3e:	f001 f937 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000b42:	2380      	movs	r3, #128	; 0x80
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b46:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b54:	4619      	mov	r1, r3
 8000b56:	4826      	ldr	r0, [pc, #152]	; (8000bf0 <MX_GPIO_Init+0x22c>)
 8000b58:	f001 f92a 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000b5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b62:	2300      	movs	r3, #0
 8000b64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4820      	ldr	r0, [pc, #128]	; (8000bf4 <MX_GPIO_Init+0x230>)
 8000b72:	f001 f91d 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000b76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	2300      	movs	r3, #0
 8000b86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000b88:	230a      	movs	r3, #10
 8000b8a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b90:	4619      	mov	r1, r3
 8000b92:	4818      	ldr	r0, [pc, #96]	; (8000bf4 <MX_GPIO_Init+0x230>)
 8000b94:	f001 f90c 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000b98:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4810      	ldr	r0, [pc, #64]	; (8000bf4 <MX_GPIO_Init+0x230>)
 8000bb2:	f001 f8fd 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4806      	ldr	r0, [pc, #24]	; (8000be8 <MX_GPIO_Init+0x224>)
 8000bce:	f001 f8ef 	bl	8001db0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd2:	bf00      	nop
 8000bd4:	3738      	adds	r7, #56	; 0x38
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	58024400 	.word	0x58024400
 8000be0:	58021400 	.word	0x58021400
 8000be4:	58020400 	.word	0x58020400
 8000be8:	58021000 	.word	0x58021000
 8000bec:	58020800 	.word	0x58020800
 8000bf0:	58021800 	.word	0x58021800
 8000bf4:	58020000 	.word	0x58020000

08000bf8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// UART recieve interrupt fuggveny definialasa
// ez a fuggveny kerul meghivasra, ha az adatfgadas sikeres volt
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	// csak interrupt modban hasznaljuk
	if(mode == IT){
 8000c00:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <HAL_UART_RxCpltCallback+0x7c>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	d130      	bne.n	8000c6a <HAL_UART_RxCpltCallback+0x72>
		// csak akkor kapcsolja fel a LED2-t,
		// ha UART-on "1"-et kapott es a LED2 nem vilagit
		if(data[0] == '1' && HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin) == 0){
 8000c08:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <HAL_UART_RxCpltCallback+0x80>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b31      	cmp	r3, #49	; 0x31
 8000c0e:	d111      	bne.n	8000c34 <HAL_UART_RxCpltCallback+0x3c>
 8000c10:	2102      	movs	r1, #2
 8000c12:	481a      	ldr	r0, [pc, #104]	; (8000c7c <HAL_UART_RxCpltCallback+0x84>)
 8000c14:	f001 fa7c 	bl	8002110 <HAL_GPIO_ReadPin>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d10a      	bne.n	8000c34 <HAL_UART_RxCpltCallback+0x3c>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000c1e:	2201      	movs	r2, #1
 8000c20:	2102      	movs	r1, #2
 8000c22:	4816      	ldr	r0, [pc, #88]	; (8000c7c <HAL_UART_RxCpltCallback+0x84>)
 8000c24:	f001 fa8c 	bl	8002140 <HAL_GPIO_WritePin>
			HAL_UART_Transmit(&huart3, LED2ON, sizeof(LED2ON), 10);
 8000c28:	230a      	movs	r3, #10
 8000c2a:	220e      	movs	r2, #14
 8000c2c:	4914      	ldr	r1, [pc, #80]	; (8000c80 <HAL_UART_RxCpltCallback+0x88>)
 8000c2e:	4815      	ldr	r0, [pc, #84]	; (8000c84 <HAL_UART_RxCpltCallback+0x8c>)
 8000c30:	f004 f8e8 	bl	8004e04 <HAL_UART_Transmit>
		}
		// csak akkor kapcsolja le a LED2-t,
		// ha UART-on "0"-t kapott es a LED2 vilagit
		if(data[0] == '0' && HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin) == 1){
 8000c34:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <HAL_UART_RxCpltCallback+0x80>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b30      	cmp	r3, #48	; 0x30
 8000c3a:	d111      	bne.n	8000c60 <HAL_UART_RxCpltCallback+0x68>
 8000c3c:	2102      	movs	r1, #2
 8000c3e:	480f      	ldr	r0, [pc, #60]	; (8000c7c <HAL_UART_RxCpltCallback+0x84>)
 8000c40:	f001 fa66 	bl	8002110 <HAL_GPIO_ReadPin>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d10a      	bne.n	8000c60 <HAL_UART_RxCpltCallback+0x68>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2102      	movs	r1, #2
 8000c4e:	480b      	ldr	r0, [pc, #44]	; (8000c7c <HAL_UART_RxCpltCallback+0x84>)
 8000c50:	f001 fa76 	bl	8002140 <HAL_GPIO_WritePin>
			HAL_UART_Transmit(&huart3, LED2OFF, sizeof(LED2OFF), 10);
 8000c54:	230a      	movs	r3, #10
 8000c56:	220e      	movs	r2, #14
 8000c58:	490b      	ldr	r1, [pc, #44]	; (8000c88 <HAL_UART_RxCpltCallback+0x90>)
 8000c5a:	480a      	ldr	r0, [pc, #40]	; (8000c84 <HAL_UART_RxCpltCallback+0x8c>)
 8000c5c:	f004 f8d2 	bl	8004e04 <HAL_UART_Transmit>
		}
		// adatfogado interrupt fuggveny ujboli meghivasa
		HAL_UART_Receive_IT(&huart3, data, 1);
 8000c60:	2201      	movs	r2, #1
 8000c62:	4905      	ldr	r1, [pc, #20]	; (8000c78 <HAL_UART_RxCpltCallback+0x80>)
 8000c64:	4807      	ldr	r0, [pc, #28]	; (8000c84 <HAL_UART_RxCpltCallback+0x8c>)
 8000c66:	f004 fa23 	bl	80050b0 <HAL_UART_Receive_IT>
	}
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	24000108 	.word	0x24000108
 8000c78:	24000100 	.word	0x24000100
 8000c7c:	58021000 	.word	0x58021000
 8000c80:	2400009c 	.word	0x2400009c
 8000c84:	24000138 	.word	0x24000138
 8000c88:	240000ac 	.word	0x240000ac

08000c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c90:	b672      	cpsid	i
}
 8000c92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <Error_Handler+0x8>
	...

08000c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <HAL_MspInit+0x30>)
 8000ca0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ca4:	4a08      	ldr	r2, [pc, #32]	; (8000cc8 <HAL_MspInit+0x30>)
 8000ca6:	f043 0302 	orr.w	r3, r3, #2
 8000caa:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_MspInit+0x30>)
 8000cb0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000cb4:	f003 0302 	and.w	r3, r3, #2
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	58024400 	.word	0x58024400

08000ccc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b0ba      	sub	sp, #232	; 0xe8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ce4:	f107 0310 	add.w	r3, r7, #16
 8000ce8:	22c0      	movs	r2, #192	; 0xc0
 8000cea:	2100      	movs	r1, #0
 8000cec:	4618      	mov	r0, r3
 8000cee:	f006 fe2d 	bl	800794c <memset>
  if(huart->Instance==USART3)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a2b      	ldr	r2, [pc, #172]	; (8000da4 <HAL_UART_MspInit+0xd8>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d14e      	bne.n	8000d9a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cfc:	f04f 0202 	mov.w	r2, #2
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d0e:	f107 0310 	add.w	r3, r7, #16
 8000d12:	4618      	mov	r0, r3
 8000d14:	f002 fa46 	bl	80031a4 <HAL_RCCEx_PeriphCLKConfig>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000d1e:	f7ff ffb5 	bl	8000c8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d22:	4b21      	ldr	r3, [pc, #132]	; (8000da8 <HAL_UART_MspInit+0xdc>)
 8000d24:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000d28:	4a1f      	ldr	r2, [pc, #124]	; (8000da8 <HAL_UART_MspInit+0xdc>)
 8000d2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d2e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000d32:	4b1d      	ldr	r3, [pc, #116]	; (8000da8 <HAL_UART_MspInit+0xdc>)
 8000d34:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000d38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d40:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <HAL_UART_MspInit+0xdc>)
 8000d42:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d46:	4a18      	ldr	r2, [pc, #96]	; (8000da8 <HAL_UART_MspInit+0xdc>)
 8000d48:	f043 0308 	orr.w	r3, r3, #8
 8000d4c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d50:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <HAL_UART_MspInit+0xdc>)
 8000d52:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d56:	f003 0308 	and.w	r3, r3, #8
 8000d5a:	60bb      	str	r3, [r7, #8]
 8000d5c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d72:	2300      	movs	r3, #0
 8000d74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d78:	2307      	movs	r3, #7
 8000d7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d7e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d82:	4619      	mov	r1, r3
 8000d84:	4809      	ldr	r0, [pc, #36]	; (8000dac <HAL_UART_MspInit+0xe0>)
 8000d86:	f001 f813 	bl	8001db0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	2027      	movs	r0, #39	; 0x27
 8000d90:	f000 fa75 	bl	800127e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d94:	2027      	movs	r0, #39	; 0x27
 8000d96:	f000 fa8c 	bl	80012b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d9a:	bf00      	nop
 8000d9c:	37e8      	adds	r7, #232	; 0xe8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40004800 	.word	0x40004800
 8000da8:	58024400 	.word	0x58024400
 8000dac:	58020c00 	.word	0x58020c00

08000db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <NMI_Handler+0x4>

08000db6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dba:	e7fe      	b.n	8000dba <HardFault_Handler+0x4>

08000dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <MemManage_Handler+0x4>

08000dc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <BusFault_Handler+0x4>

08000dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <UsageFault_Handler+0x4>

08000dce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dfc:	f000 f920 	bl	8001040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e08:	4802      	ldr	r0, [pc, #8]	; (8000e14 <USART3_IRQHandler+0x10>)
 8000e0a:	f004 f99d 	bl	8005148 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	24000138 	.word	0x24000138

08000e18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e1c:	4b32      	ldr	r3, [pc, #200]	; (8000ee8 <SystemInit+0xd0>)
 8000e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e22:	4a31      	ldr	r2, [pc, #196]	; (8000ee8 <SystemInit+0xd0>)
 8000e24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e2c:	4b2f      	ldr	r3, [pc, #188]	; (8000eec <SystemInit+0xd4>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f003 030f 	and.w	r3, r3, #15
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d807      	bhi.n	8000e48 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e38:	4b2c      	ldr	r3, [pc, #176]	; (8000eec <SystemInit+0xd4>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f023 030f 	bic.w	r3, r3, #15
 8000e40:	4a2a      	ldr	r2, [pc, #168]	; (8000eec <SystemInit+0xd4>)
 8000e42:	f043 0303 	orr.w	r3, r3, #3
 8000e46:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e48:	4b29      	ldr	r3, [pc, #164]	; (8000ef0 <SystemInit+0xd8>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a28      	ldr	r2, [pc, #160]	; (8000ef0 <SystemInit+0xd8>)
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e54:	4b26      	ldr	r3, [pc, #152]	; (8000ef0 <SystemInit+0xd8>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e5a:	4b25      	ldr	r3, [pc, #148]	; (8000ef0 <SystemInit+0xd8>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	4924      	ldr	r1, [pc, #144]	; (8000ef0 <SystemInit+0xd8>)
 8000e60:	4b24      	ldr	r3, [pc, #144]	; (8000ef4 <SystemInit+0xdc>)
 8000e62:	4013      	ands	r3, r2
 8000e64:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e66:	4b21      	ldr	r3, [pc, #132]	; (8000eec <SystemInit+0xd4>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 030c 	and.w	r3, r3, #12
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d007      	beq.n	8000e82 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e72:	4b1e      	ldr	r3, [pc, #120]	; (8000eec <SystemInit+0xd4>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f023 030f 	bic.w	r3, r3, #15
 8000e7a:	4a1c      	ldr	r2, [pc, #112]	; (8000eec <SystemInit+0xd4>)
 8000e7c:	f043 0303 	orr.w	r3, r3, #3
 8000e80:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000e82:	4b1b      	ldr	r3, [pc, #108]	; (8000ef0 <SystemInit+0xd8>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000e88:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <SystemInit+0xd8>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000e8e:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <SystemInit+0xd8>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e94:	4b16      	ldr	r3, [pc, #88]	; (8000ef0 <SystemInit+0xd8>)
 8000e96:	4a18      	ldr	r2, [pc, #96]	; (8000ef8 <SystemInit+0xe0>)
 8000e98:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e9a:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <SystemInit+0xd8>)
 8000e9c:	4a17      	ldr	r2, [pc, #92]	; (8000efc <SystemInit+0xe4>)
 8000e9e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <SystemInit+0xd8>)
 8000ea2:	4a17      	ldr	r2, [pc, #92]	; (8000f00 <SystemInit+0xe8>)
 8000ea4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ea6:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <SystemInit+0xd8>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000eac:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <SystemInit+0xd8>)
 8000eae:	4a14      	ldr	r2, [pc, #80]	; (8000f00 <SystemInit+0xe8>)
 8000eb0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000eb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <SystemInit+0xd8>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000eb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <SystemInit+0xd8>)
 8000eba:	4a11      	ldr	r2, [pc, #68]	; (8000f00 <SystemInit+0xe8>)
 8000ebc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <SystemInit+0xd8>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ec4:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <SystemInit+0xd8>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a09      	ldr	r2, [pc, #36]	; (8000ef0 <SystemInit+0xd8>)
 8000eca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ece:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ed0:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <SystemInit+0xd8>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <SystemInit+0xec>)
 8000ed8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000edc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000ed00 	.word	0xe000ed00
 8000eec:	52002000 	.word	0x52002000
 8000ef0:	58024400 	.word	0x58024400
 8000ef4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ef8:	02020200 	.word	0x02020200
 8000efc:	01ff0000 	.word	0x01ff0000
 8000f00:	01010280 	.word	0x01010280
 8000f04:	52004000 	.word	0x52004000

08000f08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f40 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f0c:	f7ff ff84 	bl	8000e18 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f10:	480c      	ldr	r0, [pc, #48]	; (8000f44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f12:	490d      	ldr	r1, [pc, #52]	; (8000f48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f14:	4a0d      	ldr	r2, [pc, #52]	; (8000f4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f18:	e002      	b.n	8000f20 <LoopCopyDataInit>

08000f1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f1e:	3304      	adds	r3, #4

08000f20 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000f20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f24:	d3f9      	bcc.n	8000f1a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f26:	4a0a      	ldr	r2, [pc, #40]	; (8000f50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f28:	4c0a      	ldr	r4, [pc, #40]	; (8000f54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f2c:	e001      	b.n	8000f32 <LoopFillZerobss>

08000f2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f30:	3204      	adds	r2, #4

08000f32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f34:	d3fb      	bcc.n	8000f2e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f36:	f006 fd11 	bl	800795c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f3a:	f7ff fb55 	bl	80005e8 <main>
  bx  lr
 8000f3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f40:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000f44:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f48:	2400011c 	.word	0x2400011c
  ldr r2, =_sidata
 8000f4c:	08007a04 	.word	0x08007a04
  ldr r2, =_sbss
 8000f50:	2400011c 	.word	0x2400011c
  ldr r4, =_ebss
 8000f54:	240001d4 	.word	0x240001d4

08000f58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f58:	e7fe      	b.n	8000f58 <ADC_IRQHandler>
	...

08000f5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f62:	2003      	movs	r0, #3
 8000f64:	f000 f980 	bl	8001268 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000f68:	f001 ff46 	bl	8002df8 <HAL_RCC_GetSysClockFreq>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <HAL_Init+0x68>)
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	0a1b      	lsrs	r3, r3, #8
 8000f74:	f003 030f 	and.w	r3, r3, #15
 8000f78:	4913      	ldr	r1, [pc, #76]	; (8000fc8 <HAL_Init+0x6c>)
 8000f7a:	5ccb      	ldrb	r3, [r1, r3]
 8000f7c:	f003 031f 	and.w	r3, r3, #31
 8000f80:	fa22 f303 	lsr.w	r3, r2, r3
 8000f84:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000f86:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <HAL_Init+0x68>)
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	f003 030f 	and.w	r3, r3, #15
 8000f8e:	4a0e      	ldr	r2, [pc, #56]	; (8000fc8 <HAL_Init+0x6c>)
 8000f90:	5cd3      	ldrb	r3, [r2, r3]
 8000f92:	f003 031f 	and.w	r3, r3, #31
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	fa22 f303 	lsr.w	r3, r2, r3
 8000f9c:	4a0b      	ldr	r2, [pc, #44]	; (8000fcc <HAL_Init+0x70>)
 8000f9e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fa0:	4a0b      	ldr	r2, [pc, #44]	; (8000fd0 <HAL_Init+0x74>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f000 f814 	bl	8000fd4 <HAL_InitTick>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e002      	b.n	8000fbc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb6:	f7ff fe6f 	bl	8000c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fba:	2300      	movs	r3, #0
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	58024400 	.word	0x58024400
 8000fc8:	080079bc 	.word	0x080079bc
 8000fcc:	24000110 	.word	0x24000110
 8000fd0:	2400010c 	.word	0x2400010c

08000fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000fdc:	4b15      	ldr	r3, [pc, #84]	; (8001034 <HAL_InitTick+0x60>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d101      	bne.n	8000fe8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e021      	b.n	800102c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000fe8:	4b13      	ldr	r3, [pc, #76]	; (8001038 <HAL_InitTick+0x64>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b11      	ldr	r3, [pc, #68]	; (8001034 <HAL_InitTick+0x60>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 f965 	bl	80012ce <HAL_SYSTICK_Config>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e00e      	b.n	800102c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b0f      	cmp	r3, #15
 8001012:	d80a      	bhi.n	800102a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001014:	2200      	movs	r2, #0
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800101c:	f000 f92f 	bl	800127e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001020:	4a06      	ldr	r2, [pc, #24]	; (800103c <HAL_InitTick+0x68>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001026:	2300      	movs	r3, #0
 8001028:	e000      	b.n	800102c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	24000118 	.word	0x24000118
 8001038:	2400010c 	.word	0x2400010c
 800103c:	24000114 	.word	0x24000114

08001040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_IncTick+0x20>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_IncTick+0x24>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4413      	add	r3, r2
 8001050:	4a04      	ldr	r2, [pc, #16]	; (8001064 <HAL_IncTick+0x24>)
 8001052:	6013      	str	r3, [r2, #0]
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	24000118 	.word	0x24000118
 8001064:	240001d0 	.word	0x240001d0

08001068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return uwTick;
 800106c:	4b03      	ldr	r3, [pc, #12]	; (800107c <HAL_GetTick+0x14>)
 800106e:	681b      	ldr	r3, [r3, #0]
}
 8001070:	4618      	mov	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	240001d0 	.word	0x240001d0

08001080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001088:	f7ff ffee 	bl	8001068 <HAL_GetTick>
 800108c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001098:	d005      	beq.n	80010a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800109a:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <HAL_Delay+0x44>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4413      	add	r3, r2
 80010a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010a6:	bf00      	nop
 80010a8:	f7ff ffde 	bl	8001068 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d8f7      	bhi.n	80010a8 <HAL_Delay+0x28>
  {
  }
}
 80010b8:	bf00      	nop
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	24000118 	.word	0x24000118

080010c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <__NVIC_SetPriorityGrouping+0x40>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010de:	68ba      	ldr	r2, [r7, #8]
 80010e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e4:	4013      	ands	r3, r2
 80010e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <__NVIC_SetPriorityGrouping+0x44>)
 80010f2:	4313      	orrs	r3, r2
 80010f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f6:	4a04      	ldr	r2, [pc, #16]	; (8001108 <__NVIC_SetPriorityGrouping+0x40>)
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	60d3      	str	r3, [r2, #12]
}
 80010fc:	bf00      	nop
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000ed00 	.word	0xe000ed00
 800110c:	05fa0000 	.word	0x05fa0000

08001110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001114:	4b04      	ldr	r3, [pc, #16]	; (8001128 <__NVIC_GetPriorityGrouping+0x18>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	0a1b      	lsrs	r3, r3, #8
 800111a:	f003 0307 	and.w	r3, r3, #7
}
 800111e:	4618      	mov	r0, r3
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001136:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800113a:	2b00      	cmp	r3, #0
 800113c:	db0b      	blt.n	8001156 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800113e:	88fb      	ldrh	r3, [r7, #6]
 8001140:	f003 021f 	and.w	r2, r3, #31
 8001144:	4907      	ldr	r1, [pc, #28]	; (8001164 <__NVIC_EnableIRQ+0x38>)
 8001146:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800114a:	095b      	lsrs	r3, r3, #5
 800114c:	2001      	movs	r0, #1
 800114e:	fa00 f202 	lsl.w	r2, r0, r2
 8001152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000e100 	.word	0xe000e100

08001168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	6039      	str	r1, [r7, #0]
 8001172:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001174:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001178:	2b00      	cmp	r3, #0
 800117a:	db0a      	blt.n	8001192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	b2da      	uxtb	r2, r3
 8001180:	490c      	ldr	r1, [pc, #48]	; (80011b4 <__NVIC_SetPriority+0x4c>)
 8001182:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001186:	0112      	lsls	r2, r2, #4
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	440b      	add	r3, r1
 800118c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001190:	e00a      	b.n	80011a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4908      	ldr	r1, [pc, #32]	; (80011b8 <__NVIC_SetPriority+0x50>)
 8001198:	88fb      	ldrh	r3, [r7, #6]
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	3b04      	subs	r3, #4
 80011a0:	0112      	lsls	r2, r2, #4
 80011a2:	b2d2      	uxtb	r2, r2
 80011a4:	440b      	add	r3, r1
 80011a6:	761a      	strb	r2, [r3, #24]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000e100 	.word	0xe000e100
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011bc:	b480      	push	{r7}
 80011be:	b089      	sub	sp, #36	; 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f1c3 0307 	rsb	r3, r3, #7
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	bf28      	it	cs
 80011da:	2304      	movcs	r3, #4
 80011dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3304      	adds	r3, #4
 80011e2:	2b06      	cmp	r3, #6
 80011e4:	d902      	bls.n	80011ec <NVIC_EncodePriority+0x30>
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3b03      	subs	r3, #3
 80011ea:	e000      	b.n	80011ee <NVIC_EncodePriority+0x32>
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43da      	mvns	r2, r3
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	401a      	ands	r2, r3
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001204:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	fa01 f303 	lsl.w	r3, r1, r3
 800120e:	43d9      	mvns	r1, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	4313      	orrs	r3, r2
         );
}
 8001216:	4618      	mov	r0, r3
 8001218:	3724      	adds	r7, #36	; 0x24
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3b01      	subs	r3, #1
 8001230:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001234:	d301      	bcc.n	800123a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001236:	2301      	movs	r3, #1
 8001238:	e00f      	b.n	800125a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123a:	4a0a      	ldr	r2, [pc, #40]	; (8001264 <SysTick_Config+0x40>)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3b01      	subs	r3, #1
 8001240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001242:	210f      	movs	r1, #15
 8001244:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001248:	f7ff ff8e 	bl	8001168 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <SysTick_Config+0x40>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001252:	4b04      	ldr	r3, [pc, #16]	; (8001264 <SysTick_Config+0x40>)
 8001254:	2207      	movs	r2, #7
 8001256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	e000e010 	.word	0xe000e010

08001268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff ff29 	bl	80010c8 <__NVIC_SetPriorityGrouping>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b086      	sub	sp, #24
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	60b9      	str	r1, [r7, #8]
 8001288:	607a      	str	r2, [r7, #4]
 800128a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800128c:	f7ff ff40 	bl	8001110 <__NVIC_GetPriorityGrouping>
 8001290:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	68b9      	ldr	r1, [r7, #8]
 8001296:	6978      	ldr	r0, [r7, #20]
 8001298:	f7ff ff90 	bl	80011bc <NVIC_EncodePriority>
 800129c:	4602      	mov	r2, r0
 800129e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012a2:	4611      	mov	r1, r2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff5f 	bl	8001168 <__NVIC_SetPriority>
}
 80012aa:	bf00      	nop
 80012ac:	3718      	adds	r7, #24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	4603      	mov	r3, r0
 80012ba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff33 	bl	800112c <__NVIC_EnableIRQ>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff ffa4 	bl	8001224 <SysTick_Config>
 80012dc:	4603      	mov	r3, r0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80012f0:	f7ff feba 	bl	8001068 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d101      	bne.n	8001300 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e2dc      	b.n	80018ba <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001306:	b2db      	uxtb	r3, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d008      	beq.n	800131e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2280      	movs	r2, #128	; 0x80
 8001310:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e2cd      	b.n	80018ba <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a76      	ldr	r2, [pc, #472]	; (80014fc <HAL_DMA_Abort+0x214>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d04a      	beq.n	80013be <HAL_DMA_Abort+0xd6>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a74      	ldr	r2, [pc, #464]	; (8001500 <HAL_DMA_Abort+0x218>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d045      	beq.n	80013be <HAL_DMA_Abort+0xd6>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a73      	ldr	r2, [pc, #460]	; (8001504 <HAL_DMA_Abort+0x21c>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d040      	beq.n	80013be <HAL_DMA_Abort+0xd6>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a71      	ldr	r2, [pc, #452]	; (8001508 <HAL_DMA_Abort+0x220>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d03b      	beq.n	80013be <HAL_DMA_Abort+0xd6>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a70      	ldr	r2, [pc, #448]	; (800150c <HAL_DMA_Abort+0x224>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d036      	beq.n	80013be <HAL_DMA_Abort+0xd6>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a6e      	ldr	r2, [pc, #440]	; (8001510 <HAL_DMA_Abort+0x228>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d031      	beq.n	80013be <HAL_DMA_Abort+0xd6>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a6d      	ldr	r2, [pc, #436]	; (8001514 <HAL_DMA_Abort+0x22c>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d02c      	beq.n	80013be <HAL_DMA_Abort+0xd6>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a6b      	ldr	r2, [pc, #428]	; (8001518 <HAL_DMA_Abort+0x230>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d027      	beq.n	80013be <HAL_DMA_Abort+0xd6>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a6a      	ldr	r2, [pc, #424]	; (800151c <HAL_DMA_Abort+0x234>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d022      	beq.n	80013be <HAL_DMA_Abort+0xd6>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a68      	ldr	r2, [pc, #416]	; (8001520 <HAL_DMA_Abort+0x238>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d01d      	beq.n	80013be <HAL_DMA_Abort+0xd6>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a67      	ldr	r2, [pc, #412]	; (8001524 <HAL_DMA_Abort+0x23c>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d018      	beq.n	80013be <HAL_DMA_Abort+0xd6>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a65      	ldr	r2, [pc, #404]	; (8001528 <HAL_DMA_Abort+0x240>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d013      	beq.n	80013be <HAL_DMA_Abort+0xd6>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a64      	ldr	r2, [pc, #400]	; (800152c <HAL_DMA_Abort+0x244>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d00e      	beq.n	80013be <HAL_DMA_Abort+0xd6>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a62      	ldr	r2, [pc, #392]	; (8001530 <HAL_DMA_Abort+0x248>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d009      	beq.n	80013be <HAL_DMA_Abort+0xd6>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a61      	ldr	r2, [pc, #388]	; (8001534 <HAL_DMA_Abort+0x24c>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d004      	beq.n	80013be <HAL_DMA_Abort+0xd6>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a5f      	ldr	r2, [pc, #380]	; (8001538 <HAL_DMA_Abort+0x250>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d101      	bne.n	80013c2 <HAL_DMA_Abort+0xda>
 80013be:	2301      	movs	r3, #1
 80013c0:	e000      	b.n	80013c4 <HAL_DMA_Abort+0xdc>
 80013c2:	2300      	movs	r3, #0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d013      	beq.n	80013f0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f022 021e 	bic.w	r2, r2, #30
 80013d6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	695a      	ldr	r2, [r3, #20]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013e6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	617b      	str	r3, [r7, #20]
 80013ee:	e00a      	b.n	8001406 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 020e 	bic.w	r2, r2, #14
 80013fe:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a3c      	ldr	r2, [pc, #240]	; (80014fc <HAL_DMA_Abort+0x214>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d072      	beq.n	80014f6 <HAL_DMA_Abort+0x20e>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a3a      	ldr	r2, [pc, #232]	; (8001500 <HAL_DMA_Abort+0x218>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d06d      	beq.n	80014f6 <HAL_DMA_Abort+0x20e>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a39      	ldr	r2, [pc, #228]	; (8001504 <HAL_DMA_Abort+0x21c>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d068      	beq.n	80014f6 <HAL_DMA_Abort+0x20e>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a37      	ldr	r2, [pc, #220]	; (8001508 <HAL_DMA_Abort+0x220>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d063      	beq.n	80014f6 <HAL_DMA_Abort+0x20e>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a36      	ldr	r2, [pc, #216]	; (800150c <HAL_DMA_Abort+0x224>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d05e      	beq.n	80014f6 <HAL_DMA_Abort+0x20e>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a34      	ldr	r2, [pc, #208]	; (8001510 <HAL_DMA_Abort+0x228>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d059      	beq.n	80014f6 <HAL_DMA_Abort+0x20e>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a33      	ldr	r2, [pc, #204]	; (8001514 <HAL_DMA_Abort+0x22c>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d054      	beq.n	80014f6 <HAL_DMA_Abort+0x20e>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a31      	ldr	r2, [pc, #196]	; (8001518 <HAL_DMA_Abort+0x230>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d04f      	beq.n	80014f6 <HAL_DMA_Abort+0x20e>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a30      	ldr	r2, [pc, #192]	; (800151c <HAL_DMA_Abort+0x234>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d04a      	beq.n	80014f6 <HAL_DMA_Abort+0x20e>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a2e      	ldr	r2, [pc, #184]	; (8001520 <HAL_DMA_Abort+0x238>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d045      	beq.n	80014f6 <HAL_DMA_Abort+0x20e>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a2d      	ldr	r2, [pc, #180]	; (8001524 <HAL_DMA_Abort+0x23c>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d040      	beq.n	80014f6 <HAL_DMA_Abort+0x20e>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a2b      	ldr	r2, [pc, #172]	; (8001528 <HAL_DMA_Abort+0x240>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d03b      	beq.n	80014f6 <HAL_DMA_Abort+0x20e>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a2a      	ldr	r2, [pc, #168]	; (800152c <HAL_DMA_Abort+0x244>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d036      	beq.n	80014f6 <HAL_DMA_Abort+0x20e>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a28      	ldr	r2, [pc, #160]	; (8001530 <HAL_DMA_Abort+0x248>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d031      	beq.n	80014f6 <HAL_DMA_Abort+0x20e>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a27      	ldr	r2, [pc, #156]	; (8001534 <HAL_DMA_Abort+0x24c>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d02c      	beq.n	80014f6 <HAL_DMA_Abort+0x20e>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a25      	ldr	r2, [pc, #148]	; (8001538 <HAL_DMA_Abort+0x250>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d027      	beq.n	80014f6 <HAL_DMA_Abort+0x20e>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a24      	ldr	r2, [pc, #144]	; (800153c <HAL_DMA_Abort+0x254>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d022      	beq.n	80014f6 <HAL_DMA_Abort+0x20e>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a22      	ldr	r2, [pc, #136]	; (8001540 <HAL_DMA_Abort+0x258>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d01d      	beq.n	80014f6 <HAL_DMA_Abort+0x20e>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a21      	ldr	r2, [pc, #132]	; (8001544 <HAL_DMA_Abort+0x25c>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d018      	beq.n	80014f6 <HAL_DMA_Abort+0x20e>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a1f      	ldr	r2, [pc, #124]	; (8001548 <HAL_DMA_Abort+0x260>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d013      	beq.n	80014f6 <HAL_DMA_Abort+0x20e>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a1e      	ldr	r2, [pc, #120]	; (800154c <HAL_DMA_Abort+0x264>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d00e      	beq.n	80014f6 <HAL_DMA_Abort+0x20e>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a1c      	ldr	r2, [pc, #112]	; (8001550 <HAL_DMA_Abort+0x268>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d009      	beq.n	80014f6 <HAL_DMA_Abort+0x20e>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a1b      	ldr	r2, [pc, #108]	; (8001554 <HAL_DMA_Abort+0x26c>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d004      	beq.n	80014f6 <HAL_DMA_Abort+0x20e>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a19      	ldr	r2, [pc, #100]	; (8001558 <HAL_DMA_Abort+0x270>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d132      	bne.n	800155c <HAL_DMA_Abort+0x274>
 80014f6:	2301      	movs	r3, #1
 80014f8:	e031      	b.n	800155e <HAL_DMA_Abort+0x276>
 80014fa:	bf00      	nop
 80014fc:	40020010 	.word	0x40020010
 8001500:	40020028 	.word	0x40020028
 8001504:	40020040 	.word	0x40020040
 8001508:	40020058 	.word	0x40020058
 800150c:	40020070 	.word	0x40020070
 8001510:	40020088 	.word	0x40020088
 8001514:	400200a0 	.word	0x400200a0
 8001518:	400200b8 	.word	0x400200b8
 800151c:	40020410 	.word	0x40020410
 8001520:	40020428 	.word	0x40020428
 8001524:	40020440 	.word	0x40020440
 8001528:	40020458 	.word	0x40020458
 800152c:	40020470 	.word	0x40020470
 8001530:	40020488 	.word	0x40020488
 8001534:	400204a0 	.word	0x400204a0
 8001538:	400204b8 	.word	0x400204b8
 800153c:	58025408 	.word	0x58025408
 8001540:	5802541c 	.word	0x5802541c
 8001544:	58025430 	.word	0x58025430
 8001548:	58025444 	.word	0x58025444
 800154c:	58025458 	.word	0x58025458
 8001550:	5802546c 	.word	0x5802546c
 8001554:	58025480 	.word	0x58025480
 8001558:	58025494 	.word	0x58025494
 800155c:	2300      	movs	r3, #0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d007      	beq.n	8001572 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800156c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001570:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a6d      	ldr	r2, [pc, #436]	; (800172c <HAL_DMA_Abort+0x444>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d04a      	beq.n	8001612 <HAL_DMA_Abort+0x32a>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a6b      	ldr	r2, [pc, #428]	; (8001730 <HAL_DMA_Abort+0x448>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d045      	beq.n	8001612 <HAL_DMA_Abort+0x32a>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a6a      	ldr	r2, [pc, #424]	; (8001734 <HAL_DMA_Abort+0x44c>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d040      	beq.n	8001612 <HAL_DMA_Abort+0x32a>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a68      	ldr	r2, [pc, #416]	; (8001738 <HAL_DMA_Abort+0x450>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d03b      	beq.n	8001612 <HAL_DMA_Abort+0x32a>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a67      	ldr	r2, [pc, #412]	; (800173c <HAL_DMA_Abort+0x454>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d036      	beq.n	8001612 <HAL_DMA_Abort+0x32a>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a65      	ldr	r2, [pc, #404]	; (8001740 <HAL_DMA_Abort+0x458>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d031      	beq.n	8001612 <HAL_DMA_Abort+0x32a>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a64      	ldr	r2, [pc, #400]	; (8001744 <HAL_DMA_Abort+0x45c>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d02c      	beq.n	8001612 <HAL_DMA_Abort+0x32a>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a62      	ldr	r2, [pc, #392]	; (8001748 <HAL_DMA_Abort+0x460>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d027      	beq.n	8001612 <HAL_DMA_Abort+0x32a>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a61      	ldr	r2, [pc, #388]	; (800174c <HAL_DMA_Abort+0x464>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d022      	beq.n	8001612 <HAL_DMA_Abort+0x32a>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a5f      	ldr	r2, [pc, #380]	; (8001750 <HAL_DMA_Abort+0x468>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d01d      	beq.n	8001612 <HAL_DMA_Abort+0x32a>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a5e      	ldr	r2, [pc, #376]	; (8001754 <HAL_DMA_Abort+0x46c>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d018      	beq.n	8001612 <HAL_DMA_Abort+0x32a>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a5c      	ldr	r2, [pc, #368]	; (8001758 <HAL_DMA_Abort+0x470>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d013      	beq.n	8001612 <HAL_DMA_Abort+0x32a>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a5b      	ldr	r2, [pc, #364]	; (800175c <HAL_DMA_Abort+0x474>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d00e      	beq.n	8001612 <HAL_DMA_Abort+0x32a>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a59      	ldr	r2, [pc, #356]	; (8001760 <HAL_DMA_Abort+0x478>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d009      	beq.n	8001612 <HAL_DMA_Abort+0x32a>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a58      	ldr	r2, [pc, #352]	; (8001764 <HAL_DMA_Abort+0x47c>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d004      	beq.n	8001612 <HAL_DMA_Abort+0x32a>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a56      	ldr	r2, [pc, #344]	; (8001768 <HAL_DMA_Abort+0x480>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d108      	bne.n	8001624 <HAL_DMA_Abort+0x33c>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 0201 	bic.w	r2, r2, #1
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	e007      	b.n	8001634 <HAL_DMA_Abort+0x34c>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 0201 	bic.w	r2, r2, #1
 8001632:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001634:	e013      	b.n	800165e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001636:	f7ff fd17 	bl	8001068 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b05      	cmp	r3, #5
 8001642:	d90c      	bls.n	800165e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2220      	movs	r2, #32
 8001648:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2203      	movs	r2, #3
 800164e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e12d      	b.n	80018ba <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1e5      	bne.n	8001636 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a2f      	ldr	r2, [pc, #188]	; (800172c <HAL_DMA_Abort+0x444>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d04a      	beq.n	800170a <HAL_DMA_Abort+0x422>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a2d      	ldr	r2, [pc, #180]	; (8001730 <HAL_DMA_Abort+0x448>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d045      	beq.n	800170a <HAL_DMA_Abort+0x422>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a2c      	ldr	r2, [pc, #176]	; (8001734 <HAL_DMA_Abort+0x44c>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d040      	beq.n	800170a <HAL_DMA_Abort+0x422>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a2a      	ldr	r2, [pc, #168]	; (8001738 <HAL_DMA_Abort+0x450>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d03b      	beq.n	800170a <HAL_DMA_Abort+0x422>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a29      	ldr	r2, [pc, #164]	; (800173c <HAL_DMA_Abort+0x454>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d036      	beq.n	800170a <HAL_DMA_Abort+0x422>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a27      	ldr	r2, [pc, #156]	; (8001740 <HAL_DMA_Abort+0x458>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d031      	beq.n	800170a <HAL_DMA_Abort+0x422>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a26      	ldr	r2, [pc, #152]	; (8001744 <HAL_DMA_Abort+0x45c>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d02c      	beq.n	800170a <HAL_DMA_Abort+0x422>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a24      	ldr	r2, [pc, #144]	; (8001748 <HAL_DMA_Abort+0x460>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d027      	beq.n	800170a <HAL_DMA_Abort+0x422>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a23      	ldr	r2, [pc, #140]	; (800174c <HAL_DMA_Abort+0x464>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d022      	beq.n	800170a <HAL_DMA_Abort+0x422>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a21      	ldr	r2, [pc, #132]	; (8001750 <HAL_DMA_Abort+0x468>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d01d      	beq.n	800170a <HAL_DMA_Abort+0x422>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a20      	ldr	r2, [pc, #128]	; (8001754 <HAL_DMA_Abort+0x46c>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d018      	beq.n	800170a <HAL_DMA_Abort+0x422>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a1e      	ldr	r2, [pc, #120]	; (8001758 <HAL_DMA_Abort+0x470>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d013      	beq.n	800170a <HAL_DMA_Abort+0x422>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a1d      	ldr	r2, [pc, #116]	; (800175c <HAL_DMA_Abort+0x474>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d00e      	beq.n	800170a <HAL_DMA_Abort+0x422>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a1b      	ldr	r2, [pc, #108]	; (8001760 <HAL_DMA_Abort+0x478>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d009      	beq.n	800170a <HAL_DMA_Abort+0x422>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a1a      	ldr	r2, [pc, #104]	; (8001764 <HAL_DMA_Abort+0x47c>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d004      	beq.n	800170a <HAL_DMA_Abort+0x422>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a18      	ldr	r2, [pc, #96]	; (8001768 <HAL_DMA_Abort+0x480>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d101      	bne.n	800170e <HAL_DMA_Abort+0x426>
 800170a:	2301      	movs	r3, #1
 800170c:	e000      	b.n	8001710 <HAL_DMA_Abort+0x428>
 800170e:	2300      	movs	r3, #0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d02b      	beq.n	800176c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001718:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800171e:	f003 031f 	and.w	r3, r3, #31
 8001722:	223f      	movs	r2, #63	; 0x3f
 8001724:	409a      	lsls	r2, r3
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	e02a      	b.n	8001782 <HAL_DMA_Abort+0x49a>
 800172c:	40020010 	.word	0x40020010
 8001730:	40020028 	.word	0x40020028
 8001734:	40020040 	.word	0x40020040
 8001738:	40020058 	.word	0x40020058
 800173c:	40020070 	.word	0x40020070
 8001740:	40020088 	.word	0x40020088
 8001744:	400200a0 	.word	0x400200a0
 8001748:	400200b8 	.word	0x400200b8
 800174c:	40020410 	.word	0x40020410
 8001750:	40020428 	.word	0x40020428
 8001754:	40020440 	.word	0x40020440
 8001758:	40020458 	.word	0x40020458
 800175c:	40020470 	.word	0x40020470
 8001760:	40020488 	.word	0x40020488
 8001764:	400204a0 	.word	0x400204a0
 8001768:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001770:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001776:	f003 031f 	and.w	r3, r3, #31
 800177a:	2201      	movs	r2, #1
 800177c:	409a      	lsls	r2, r3
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a4f      	ldr	r2, [pc, #316]	; (80018c4 <HAL_DMA_Abort+0x5dc>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d072      	beq.n	8001872 <HAL_DMA_Abort+0x58a>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a4d      	ldr	r2, [pc, #308]	; (80018c8 <HAL_DMA_Abort+0x5e0>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d06d      	beq.n	8001872 <HAL_DMA_Abort+0x58a>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a4c      	ldr	r2, [pc, #304]	; (80018cc <HAL_DMA_Abort+0x5e4>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d068      	beq.n	8001872 <HAL_DMA_Abort+0x58a>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a4a      	ldr	r2, [pc, #296]	; (80018d0 <HAL_DMA_Abort+0x5e8>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d063      	beq.n	8001872 <HAL_DMA_Abort+0x58a>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a49      	ldr	r2, [pc, #292]	; (80018d4 <HAL_DMA_Abort+0x5ec>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d05e      	beq.n	8001872 <HAL_DMA_Abort+0x58a>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a47      	ldr	r2, [pc, #284]	; (80018d8 <HAL_DMA_Abort+0x5f0>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d059      	beq.n	8001872 <HAL_DMA_Abort+0x58a>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a46      	ldr	r2, [pc, #280]	; (80018dc <HAL_DMA_Abort+0x5f4>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d054      	beq.n	8001872 <HAL_DMA_Abort+0x58a>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a44      	ldr	r2, [pc, #272]	; (80018e0 <HAL_DMA_Abort+0x5f8>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d04f      	beq.n	8001872 <HAL_DMA_Abort+0x58a>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a43      	ldr	r2, [pc, #268]	; (80018e4 <HAL_DMA_Abort+0x5fc>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d04a      	beq.n	8001872 <HAL_DMA_Abort+0x58a>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a41      	ldr	r2, [pc, #260]	; (80018e8 <HAL_DMA_Abort+0x600>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d045      	beq.n	8001872 <HAL_DMA_Abort+0x58a>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a40      	ldr	r2, [pc, #256]	; (80018ec <HAL_DMA_Abort+0x604>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d040      	beq.n	8001872 <HAL_DMA_Abort+0x58a>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a3e      	ldr	r2, [pc, #248]	; (80018f0 <HAL_DMA_Abort+0x608>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d03b      	beq.n	8001872 <HAL_DMA_Abort+0x58a>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a3d      	ldr	r2, [pc, #244]	; (80018f4 <HAL_DMA_Abort+0x60c>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d036      	beq.n	8001872 <HAL_DMA_Abort+0x58a>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a3b      	ldr	r2, [pc, #236]	; (80018f8 <HAL_DMA_Abort+0x610>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d031      	beq.n	8001872 <HAL_DMA_Abort+0x58a>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a3a      	ldr	r2, [pc, #232]	; (80018fc <HAL_DMA_Abort+0x614>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d02c      	beq.n	8001872 <HAL_DMA_Abort+0x58a>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a38      	ldr	r2, [pc, #224]	; (8001900 <HAL_DMA_Abort+0x618>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d027      	beq.n	8001872 <HAL_DMA_Abort+0x58a>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a37      	ldr	r2, [pc, #220]	; (8001904 <HAL_DMA_Abort+0x61c>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d022      	beq.n	8001872 <HAL_DMA_Abort+0x58a>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a35      	ldr	r2, [pc, #212]	; (8001908 <HAL_DMA_Abort+0x620>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d01d      	beq.n	8001872 <HAL_DMA_Abort+0x58a>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a34      	ldr	r2, [pc, #208]	; (800190c <HAL_DMA_Abort+0x624>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d018      	beq.n	8001872 <HAL_DMA_Abort+0x58a>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a32      	ldr	r2, [pc, #200]	; (8001910 <HAL_DMA_Abort+0x628>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d013      	beq.n	8001872 <HAL_DMA_Abort+0x58a>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a31      	ldr	r2, [pc, #196]	; (8001914 <HAL_DMA_Abort+0x62c>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d00e      	beq.n	8001872 <HAL_DMA_Abort+0x58a>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a2f      	ldr	r2, [pc, #188]	; (8001918 <HAL_DMA_Abort+0x630>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d009      	beq.n	8001872 <HAL_DMA_Abort+0x58a>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a2e      	ldr	r2, [pc, #184]	; (800191c <HAL_DMA_Abort+0x634>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d004      	beq.n	8001872 <HAL_DMA_Abort+0x58a>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a2c      	ldr	r2, [pc, #176]	; (8001920 <HAL_DMA_Abort+0x638>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d101      	bne.n	8001876 <HAL_DMA_Abort+0x58e>
 8001872:	2301      	movs	r3, #1
 8001874:	e000      	b.n	8001878 <HAL_DMA_Abort+0x590>
 8001876:	2300      	movs	r3, #0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d015      	beq.n	80018a8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001884:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00c      	beq.n	80018a8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001898:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800189c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80018a6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3718      	adds	r7, #24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40020010 	.word	0x40020010
 80018c8:	40020028 	.word	0x40020028
 80018cc:	40020040 	.word	0x40020040
 80018d0:	40020058 	.word	0x40020058
 80018d4:	40020070 	.word	0x40020070
 80018d8:	40020088 	.word	0x40020088
 80018dc:	400200a0 	.word	0x400200a0
 80018e0:	400200b8 	.word	0x400200b8
 80018e4:	40020410 	.word	0x40020410
 80018e8:	40020428 	.word	0x40020428
 80018ec:	40020440 	.word	0x40020440
 80018f0:	40020458 	.word	0x40020458
 80018f4:	40020470 	.word	0x40020470
 80018f8:	40020488 	.word	0x40020488
 80018fc:	400204a0 	.word	0x400204a0
 8001900:	400204b8 	.word	0x400204b8
 8001904:	58025408 	.word	0x58025408
 8001908:	5802541c 	.word	0x5802541c
 800190c:	58025430 	.word	0x58025430
 8001910:	58025444 	.word	0x58025444
 8001914:	58025458 	.word	0x58025458
 8001918:	5802546c 	.word	0x5802546c
 800191c:	58025480 	.word	0x58025480
 8001920:	58025494 	.word	0x58025494

08001924 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e237      	b.n	8001da6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d004      	beq.n	800194c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2280      	movs	r2, #128	; 0x80
 8001946:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e22c      	b.n	8001da6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a5c      	ldr	r2, [pc, #368]	; (8001ac4 <HAL_DMA_Abort_IT+0x1a0>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d04a      	beq.n	80019ec <HAL_DMA_Abort_IT+0xc8>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a5b      	ldr	r2, [pc, #364]	; (8001ac8 <HAL_DMA_Abort_IT+0x1a4>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d045      	beq.n	80019ec <HAL_DMA_Abort_IT+0xc8>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a59      	ldr	r2, [pc, #356]	; (8001acc <HAL_DMA_Abort_IT+0x1a8>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d040      	beq.n	80019ec <HAL_DMA_Abort_IT+0xc8>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a58      	ldr	r2, [pc, #352]	; (8001ad0 <HAL_DMA_Abort_IT+0x1ac>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d03b      	beq.n	80019ec <HAL_DMA_Abort_IT+0xc8>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a56      	ldr	r2, [pc, #344]	; (8001ad4 <HAL_DMA_Abort_IT+0x1b0>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d036      	beq.n	80019ec <HAL_DMA_Abort_IT+0xc8>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a55      	ldr	r2, [pc, #340]	; (8001ad8 <HAL_DMA_Abort_IT+0x1b4>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d031      	beq.n	80019ec <HAL_DMA_Abort_IT+0xc8>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a53      	ldr	r2, [pc, #332]	; (8001adc <HAL_DMA_Abort_IT+0x1b8>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d02c      	beq.n	80019ec <HAL_DMA_Abort_IT+0xc8>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a52      	ldr	r2, [pc, #328]	; (8001ae0 <HAL_DMA_Abort_IT+0x1bc>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d027      	beq.n	80019ec <HAL_DMA_Abort_IT+0xc8>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a50      	ldr	r2, [pc, #320]	; (8001ae4 <HAL_DMA_Abort_IT+0x1c0>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d022      	beq.n	80019ec <HAL_DMA_Abort_IT+0xc8>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a4f      	ldr	r2, [pc, #316]	; (8001ae8 <HAL_DMA_Abort_IT+0x1c4>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d01d      	beq.n	80019ec <HAL_DMA_Abort_IT+0xc8>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a4d      	ldr	r2, [pc, #308]	; (8001aec <HAL_DMA_Abort_IT+0x1c8>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d018      	beq.n	80019ec <HAL_DMA_Abort_IT+0xc8>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a4c      	ldr	r2, [pc, #304]	; (8001af0 <HAL_DMA_Abort_IT+0x1cc>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d013      	beq.n	80019ec <HAL_DMA_Abort_IT+0xc8>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a4a      	ldr	r2, [pc, #296]	; (8001af4 <HAL_DMA_Abort_IT+0x1d0>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d00e      	beq.n	80019ec <HAL_DMA_Abort_IT+0xc8>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a49      	ldr	r2, [pc, #292]	; (8001af8 <HAL_DMA_Abort_IT+0x1d4>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d009      	beq.n	80019ec <HAL_DMA_Abort_IT+0xc8>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a47      	ldr	r2, [pc, #284]	; (8001afc <HAL_DMA_Abort_IT+0x1d8>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d004      	beq.n	80019ec <HAL_DMA_Abort_IT+0xc8>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a46      	ldr	r2, [pc, #280]	; (8001b00 <HAL_DMA_Abort_IT+0x1dc>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d101      	bne.n	80019f0 <HAL_DMA_Abort_IT+0xcc>
 80019ec:	2301      	movs	r3, #1
 80019ee:	e000      	b.n	80019f2 <HAL_DMA_Abort_IT+0xce>
 80019f0:	2300      	movs	r3, #0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f000 8086 	beq.w	8001b04 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2204      	movs	r2, #4
 80019fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a2f      	ldr	r2, [pc, #188]	; (8001ac4 <HAL_DMA_Abort_IT+0x1a0>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d04a      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0x17c>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a2e      	ldr	r2, [pc, #184]	; (8001ac8 <HAL_DMA_Abort_IT+0x1a4>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d045      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0x17c>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a2c      	ldr	r2, [pc, #176]	; (8001acc <HAL_DMA_Abort_IT+0x1a8>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d040      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0x17c>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a2b      	ldr	r2, [pc, #172]	; (8001ad0 <HAL_DMA_Abort_IT+0x1ac>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d03b      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0x17c>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a29      	ldr	r2, [pc, #164]	; (8001ad4 <HAL_DMA_Abort_IT+0x1b0>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d036      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0x17c>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a28      	ldr	r2, [pc, #160]	; (8001ad8 <HAL_DMA_Abort_IT+0x1b4>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d031      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0x17c>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a26      	ldr	r2, [pc, #152]	; (8001adc <HAL_DMA_Abort_IT+0x1b8>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d02c      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0x17c>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a25      	ldr	r2, [pc, #148]	; (8001ae0 <HAL_DMA_Abort_IT+0x1bc>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d027      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0x17c>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a23      	ldr	r2, [pc, #140]	; (8001ae4 <HAL_DMA_Abort_IT+0x1c0>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d022      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0x17c>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a22      	ldr	r2, [pc, #136]	; (8001ae8 <HAL_DMA_Abort_IT+0x1c4>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d01d      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0x17c>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a20      	ldr	r2, [pc, #128]	; (8001aec <HAL_DMA_Abort_IT+0x1c8>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d018      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0x17c>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a1f      	ldr	r2, [pc, #124]	; (8001af0 <HAL_DMA_Abort_IT+0x1cc>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d013      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0x17c>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a1d      	ldr	r2, [pc, #116]	; (8001af4 <HAL_DMA_Abort_IT+0x1d0>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d00e      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0x17c>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a1c      	ldr	r2, [pc, #112]	; (8001af8 <HAL_DMA_Abort_IT+0x1d4>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d009      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0x17c>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a1a      	ldr	r2, [pc, #104]	; (8001afc <HAL_DMA_Abort_IT+0x1d8>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d004      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0x17c>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a19      	ldr	r2, [pc, #100]	; (8001b00 <HAL_DMA_Abort_IT+0x1dc>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d108      	bne.n	8001ab2 <HAL_DMA_Abort_IT+0x18e>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f022 0201 	bic.w	r2, r2, #1
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	e178      	b.n	8001da4 <HAL_DMA_Abort_IT+0x480>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 0201 	bic.w	r2, r2, #1
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	e16f      	b.n	8001da4 <HAL_DMA_Abort_IT+0x480>
 8001ac4:	40020010 	.word	0x40020010
 8001ac8:	40020028 	.word	0x40020028
 8001acc:	40020040 	.word	0x40020040
 8001ad0:	40020058 	.word	0x40020058
 8001ad4:	40020070 	.word	0x40020070
 8001ad8:	40020088 	.word	0x40020088
 8001adc:	400200a0 	.word	0x400200a0
 8001ae0:	400200b8 	.word	0x400200b8
 8001ae4:	40020410 	.word	0x40020410
 8001ae8:	40020428 	.word	0x40020428
 8001aec:	40020440 	.word	0x40020440
 8001af0:	40020458 	.word	0x40020458
 8001af4:	40020470 	.word	0x40020470
 8001af8:	40020488 	.word	0x40020488
 8001afc:	400204a0 	.word	0x400204a0
 8001b00:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 020e 	bic.w	r2, r2, #14
 8001b12:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a6c      	ldr	r2, [pc, #432]	; (8001ccc <HAL_DMA_Abort_IT+0x3a8>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d04a      	beq.n	8001bb4 <HAL_DMA_Abort_IT+0x290>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a6b      	ldr	r2, [pc, #428]	; (8001cd0 <HAL_DMA_Abort_IT+0x3ac>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d045      	beq.n	8001bb4 <HAL_DMA_Abort_IT+0x290>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a69      	ldr	r2, [pc, #420]	; (8001cd4 <HAL_DMA_Abort_IT+0x3b0>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d040      	beq.n	8001bb4 <HAL_DMA_Abort_IT+0x290>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a68      	ldr	r2, [pc, #416]	; (8001cd8 <HAL_DMA_Abort_IT+0x3b4>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d03b      	beq.n	8001bb4 <HAL_DMA_Abort_IT+0x290>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a66      	ldr	r2, [pc, #408]	; (8001cdc <HAL_DMA_Abort_IT+0x3b8>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d036      	beq.n	8001bb4 <HAL_DMA_Abort_IT+0x290>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a65      	ldr	r2, [pc, #404]	; (8001ce0 <HAL_DMA_Abort_IT+0x3bc>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d031      	beq.n	8001bb4 <HAL_DMA_Abort_IT+0x290>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a63      	ldr	r2, [pc, #396]	; (8001ce4 <HAL_DMA_Abort_IT+0x3c0>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d02c      	beq.n	8001bb4 <HAL_DMA_Abort_IT+0x290>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a62      	ldr	r2, [pc, #392]	; (8001ce8 <HAL_DMA_Abort_IT+0x3c4>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d027      	beq.n	8001bb4 <HAL_DMA_Abort_IT+0x290>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a60      	ldr	r2, [pc, #384]	; (8001cec <HAL_DMA_Abort_IT+0x3c8>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d022      	beq.n	8001bb4 <HAL_DMA_Abort_IT+0x290>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a5f      	ldr	r2, [pc, #380]	; (8001cf0 <HAL_DMA_Abort_IT+0x3cc>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d01d      	beq.n	8001bb4 <HAL_DMA_Abort_IT+0x290>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a5d      	ldr	r2, [pc, #372]	; (8001cf4 <HAL_DMA_Abort_IT+0x3d0>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d018      	beq.n	8001bb4 <HAL_DMA_Abort_IT+0x290>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a5c      	ldr	r2, [pc, #368]	; (8001cf8 <HAL_DMA_Abort_IT+0x3d4>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d013      	beq.n	8001bb4 <HAL_DMA_Abort_IT+0x290>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a5a      	ldr	r2, [pc, #360]	; (8001cfc <HAL_DMA_Abort_IT+0x3d8>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d00e      	beq.n	8001bb4 <HAL_DMA_Abort_IT+0x290>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a59      	ldr	r2, [pc, #356]	; (8001d00 <HAL_DMA_Abort_IT+0x3dc>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d009      	beq.n	8001bb4 <HAL_DMA_Abort_IT+0x290>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a57      	ldr	r2, [pc, #348]	; (8001d04 <HAL_DMA_Abort_IT+0x3e0>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d004      	beq.n	8001bb4 <HAL_DMA_Abort_IT+0x290>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a56      	ldr	r2, [pc, #344]	; (8001d08 <HAL_DMA_Abort_IT+0x3e4>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d108      	bne.n	8001bc6 <HAL_DMA_Abort_IT+0x2a2>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 0201 	bic.w	r2, r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	e007      	b.n	8001bd6 <HAL_DMA_Abort_IT+0x2b2>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f022 0201 	bic.w	r2, r2, #1
 8001bd4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a3c      	ldr	r2, [pc, #240]	; (8001ccc <HAL_DMA_Abort_IT+0x3a8>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d072      	beq.n	8001cc6 <HAL_DMA_Abort_IT+0x3a2>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a3a      	ldr	r2, [pc, #232]	; (8001cd0 <HAL_DMA_Abort_IT+0x3ac>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d06d      	beq.n	8001cc6 <HAL_DMA_Abort_IT+0x3a2>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a39      	ldr	r2, [pc, #228]	; (8001cd4 <HAL_DMA_Abort_IT+0x3b0>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d068      	beq.n	8001cc6 <HAL_DMA_Abort_IT+0x3a2>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a37      	ldr	r2, [pc, #220]	; (8001cd8 <HAL_DMA_Abort_IT+0x3b4>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d063      	beq.n	8001cc6 <HAL_DMA_Abort_IT+0x3a2>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a36      	ldr	r2, [pc, #216]	; (8001cdc <HAL_DMA_Abort_IT+0x3b8>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d05e      	beq.n	8001cc6 <HAL_DMA_Abort_IT+0x3a2>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a34      	ldr	r2, [pc, #208]	; (8001ce0 <HAL_DMA_Abort_IT+0x3bc>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d059      	beq.n	8001cc6 <HAL_DMA_Abort_IT+0x3a2>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a33      	ldr	r2, [pc, #204]	; (8001ce4 <HAL_DMA_Abort_IT+0x3c0>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d054      	beq.n	8001cc6 <HAL_DMA_Abort_IT+0x3a2>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a31      	ldr	r2, [pc, #196]	; (8001ce8 <HAL_DMA_Abort_IT+0x3c4>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d04f      	beq.n	8001cc6 <HAL_DMA_Abort_IT+0x3a2>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a30      	ldr	r2, [pc, #192]	; (8001cec <HAL_DMA_Abort_IT+0x3c8>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d04a      	beq.n	8001cc6 <HAL_DMA_Abort_IT+0x3a2>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a2e      	ldr	r2, [pc, #184]	; (8001cf0 <HAL_DMA_Abort_IT+0x3cc>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d045      	beq.n	8001cc6 <HAL_DMA_Abort_IT+0x3a2>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a2d      	ldr	r2, [pc, #180]	; (8001cf4 <HAL_DMA_Abort_IT+0x3d0>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d040      	beq.n	8001cc6 <HAL_DMA_Abort_IT+0x3a2>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a2b      	ldr	r2, [pc, #172]	; (8001cf8 <HAL_DMA_Abort_IT+0x3d4>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d03b      	beq.n	8001cc6 <HAL_DMA_Abort_IT+0x3a2>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a2a      	ldr	r2, [pc, #168]	; (8001cfc <HAL_DMA_Abort_IT+0x3d8>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d036      	beq.n	8001cc6 <HAL_DMA_Abort_IT+0x3a2>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a28      	ldr	r2, [pc, #160]	; (8001d00 <HAL_DMA_Abort_IT+0x3dc>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d031      	beq.n	8001cc6 <HAL_DMA_Abort_IT+0x3a2>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a27      	ldr	r2, [pc, #156]	; (8001d04 <HAL_DMA_Abort_IT+0x3e0>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d02c      	beq.n	8001cc6 <HAL_DMA_Abort_IT+0x3a2>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a25      	ldr	r2, [pc, #148]	; (8001d08 <HAL_DMA_Abort_IT+0x3e4>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d027      	beq.n	8001cc6 <HAL_DMA_Abort_IT+0x3a2>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a24      	ldr	r2, [pc, #144]	; (8001d0c <HAL_DMA_Abort_IT+0x3e8>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d022      	beq.n	8001cc6 <HAL_DMA_Abort_IT+0x3a2>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a22      	ldr	r2, [pc, #136]	; (8001d10 <HAL_DMA_Abort_IT+0x3ec>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d01d      	beq.n	8001cc6 <HAL_DMA_Abort_IT+0x3a2>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a21      	ldr	r2, [pc, #132]	; (8001d14 <HAL_DMA_Abort_IT+0x3f0>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d018      	beq.n	8001cc6 <HAL_DMA_Abort_IT+0x3a2>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a1f      	ldr	r2, [pc, #124]	; (8001d18 <HAL_DMA_Abort_IT+0x3f4>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d013      	beq.n	8001cc6 <HAL_DMA_Abort_IT+0x3a2>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a1e      	ldr	r2, [pc, #120]	; (8001d1c <HAL_DMA_Abort_IT+0x3f8>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d00e      	beq.n	8001cc6 <HAL_DMA_Abort_IT+0x3a2>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a1c      	ldr	r2, [pc, #112]	; (8001d20 <HAL_DMA_Abort_IT+0x3fc>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d009      	beq.n	8001cc6 <HAL_DMA_Abort_IT+0x3a2>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a1b      	ldr	r2, [pc, #108]	; (8001d24 <HAL_DMA_Abort_IT+0x400>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d004      	beq.n	8001cc6 <HAL_DMA_Abort_IT+0x3a2>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a19      	ldr	r2, [pc, #100]	; (8001d28 <HAL_DMA_Abort_IT+0x404>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d132      	bne.n	8001d2c <HAL_DMA_Abort_IT+0x408>
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e031      	b.n	8001d2e <HAL_DMA_Abort_IT+0x40a>
 8001cca:	bf00      	nop
 8001ccc:	40020010 	.word	0x40020010
 8001cd0:	40020028 	.word	0x40020028
 8001cd4:	40020040 	.word	0x40020040
 8001cd8:	40020058 	.word	0x40020058
 8001cdc:	40020070 	.word	0x40020070
 8001ce0:	40020088 	.word	0x40020088
 8001ce4:	400200a0 	.word	0x400200a0
 8001ce8:	400200b8 	.word	0x400200b8
 8001cec:	40020410 	.word	0x40020410
 8001cf0:	40020428 	.word	0x40020428
 8001cf4:	40020440 	.word	0x40020440
 8001cf8:	40020458 	.word	0x40020458
 8001cfc:	40020470 	.word	0x40020470
 8001d00:	40020488 	.word	0x40020488
 8001d04:	400204a0 	.word	0x400204a0
 8001d08:	400204b8 	.word	0x400204b8
 8001d0c:	58025408 	.word	0x58025408
 8001d10:	5802541c 	.word	0x5802541c
 8001d14:	58025430 	.word	0x58025430
 8001d18:	58025444 	.word	0x58025444
 8001d1c:	58025458 	.word	0x58025458
 8001d20:	5802546c 	.word	0x5802546c
 8001d24:	58025480 	.word	0x58025480
 8001d28:	58025494 	.word	0x58025494
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d028      	beq.n	8001d84 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d40:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d46:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d4c:	f003 031f 	and.w	r3, r3, #31
 8001d50:	2201      	movs	r2, #1
 8001d52:	409a      	lsls	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001d60:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00c      	beq.n	8001d84 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d78:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001d82:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop

08001db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b089      	sub	sp, #36	; 0x24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001dbe:	4b89      	ldr	r3, [pc, #548]	; (8001fe4 <HAL_GPIO_Init+0x234>)
 8001dc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001dc2:	e194      	b.n	80020ee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	2101      	movs	r1, #1
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 8186 	beq.w	80020e8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 0303 	and.w	r3, r3, #3
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d005      	beq.n	8001df4 <HAL_GPIO_Init+0x44>
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 0303 	and.w	r3, r3, #3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d130      	bne.n	8001e56 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	2203      	movs	r2, #3
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	68da      	ldr	r2, [r3, #12]
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4013      	ands	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	091b      	lsrs	r3, r3, #4
 8001e40:	f003 0201 	and.w	r2, r3, #1
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	2b03      	cmp	r3, #3
 8001e60:	d017      	beq.n	8001e92 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	2203      	movs	r2, #3
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43db      	mvns	r3, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4013      	ands	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	689a      	ldr	r2, [r3, #8]
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d123      	bne.n	8001ee6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	08da      	lsrs	r2, r3, #3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3208      	adds	r2, #8
 8001ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	220f      	movs	r2, #15
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	691a      	ldr	r2, [r3, #16]
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	08da      	lsrs	r2, r3, #3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3208      	adds	r2, #8
 8001ee0:	69b9      	ldr	r1, [r7, #24]
 8001ee2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	2203      	movs	r2, #3
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4013      	ands	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f003 0203 	and.w	r2, r3, #3
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f000 80e0 	beq.w	80020e8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f28:	4b2f      	ldr	r3, [pc, #188]	; (8001fe8 <HAL_GPIO_Init+0x238>)
 8001f2a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001f2e:	4a2e      	ldr	r2, [pc, #184]	; (8001fe8 <HAL_GPIO_Init+0x238>)
 8001f30:	f043 0302 	orr.w	r3, r3, #2
 8001f34:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001f38:	4b2b      	ldr	r3, [pc, #172]	; (8001fe8 <HAL_GPIO_Init+0x238>)
 8001f3a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f46:	4a29      	ldr	r2, [pc, #164]	; (8001fec <HAL_GPIO_Init+0x23c>)
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	089b      	lsrs	r3, r3, #2
 8001f4c:	3302      	adds	r3, #2
 8001f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	220f      	movs	r2, #15
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43db      	mvns	r3, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4013      	ands	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a20      	ldr	r2, [pc, #128]	; (8001ff0 <HAL_GPIO_Init+0x240>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d052      	beq.n	8002018 <HAL_GPIO_Init+0x268>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a1f      	ldr	r2, [pc, #124]	; (8001ff4 <HAL_GPIO_Init+0x244>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d031      	beq.n	8001fde <HAL_GPIO_Init+0x22e>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a1e      	ldr	r2, [pc, #120]	; (8001ff8 <HAL_GPIO_Init+0x248>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d02b      	beq.n	8001fda <HAL_GPIO_Init+0x22a>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a1d      	ldr	r2, [pc, #116]	; (8001ffc <HAL_GPIO_Init+0x24c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d025      	beq.n	8001fd6 <HAL_GPIO_Init+0x226>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a1c      	ldr	r2, [pc, #112]	; (8002000 <HAL_GPIO_Init+0x250>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d01f      	beq.n	8001fd2 <HAL_GPIO_Init+0x222>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a1b      	ldr	r2, [pc, #108]	; (8002004 <HAL_GPIO_Init+0x254>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d019      	beq.n	8001fce <HAL_GPIO_Init+0x21e>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a1a      	ldr	r2, [pc, #104]	; (8002008 <HAL_GPIO_Init+0x258>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d013      	beq.n	8001fca <HAL_GPIO_Init+0x21a>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a19      	ldr	r2, [pc, #100]	; (800200c <HAL_GPIO_Init+0x25c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d00d      	beq.n	8001fc6 <HAL_GPIO_Init+0x216>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a18      	ldr	r2, [pc, #96]	; (8002010 <HAL_GPIO_Init+0x260>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d007      	beq.n	8001fc2 <HAL_GPIO_Init+0x212>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a17      	ldr	r2, [pc, #92]	; (8002014 <HAL_GPIO_Init+0x264>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d101      	bne.n	8001fbe <HAL_GPIO_Init+0x20e>
 8001fba:	2309      	movs	r3, #9
 8001fbc:	e02d      	b.n	800201a <HAL_GPIO_Init+0x26a>
 8001fbe:	230a      	movs	r3, #10
 8001fc0:	e02b      	b.n	800201a <HAL_GPIO_Init+0x26a>
 8001fc2:	2308      	movs	r3, #8
 8001fc4:	e029      	b.n	800201a <HAL_GPIO_Init+0x26a>
 8001fc6:	2307      	movs	r3, #7
 8001fc8:	e027      	b.n	800201a <HAL_GPIO_Init+0x26a>
 8001fca:	2306      	movs	r3, #6
 8001fcc:	e025      	b.n	800201a <HAL_GPIO_Init+0x26a>
 8001fce:	2305      	movs	r3, #5
 8001fd0:	e023      	b.n	800201a <HAL_GPIO_Init+0x26a>
 8001fd2:	2304      	movs	r3, #4
 8001fd4:	e021      	b.n	800201a <HAL_GPIO_Init+0x26a>
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e01f      	b.n	800201a <HAL_GPIO_Init+0x26a>
 8001fda:	2302      	movs	r3, #2
 8001fdc:	e01d      	b.n	800201a <HAL_GPIO_Init+0x26a>
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e01b      	b.n	800201a <HAL_GPIO_Init+0x26a>
 8001fe2:	bf00      	nop
 8001fe4:	58000080 	.word	0x58000080
 8001fe8:	58024400 	.word	0x58024400
 8001fec:	58000400 	.word	0x58000400
 8001ff0:	58020000 	.word	0x58020000
 8001ff4:	58020400 	.word	0x58020400
 8001ff8:	58020800 	.word	0x58020800
 8001ffc:	58020c00 	.word	0x58020c00
 8002000:	58021000 	.word	0x58021000
 8002004:	58021400 	.word	0x58021400
 8002008:	58021800 	.word	0x58021800
 800200c:	58021c00 	.word	0x58021c00
 8002010:	58022000 	.word	0x58022000
 8002014:	58022400 	.word	0x58022400
 8002018:	2300      	movs	r3, #0
 800201a:	69fa      	ldr	r2, [r7, #28]
 800201c:	f002 0203 	and.w	r2, r2, #3
 8002020:	0092      	lsls	r2, r2, #2
 8002022:	4093      	lsls	r3, r2
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4313      	orrs	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800202a:	4938      	ldr	r1, [pc, #224]	; (800210c <HAL_GPIO_Init+0x35c>)
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	089b      	lsrs	r3, r3, #2
 8002030:	3302      	adds	r3, #2
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	4313      	orrs	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800205e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	43db      	mvns	r3, r3
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4013      	ands	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d003      	beq.n	800208c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	4313      	orrs	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800208c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	43db      	mvns	r3, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4013      	ands	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	43db      	mvns	r3, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4013      	ands	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	3301      	adds	r3, #1
 80020ec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	fa22 f303 	lsr.w	r3, r2, r3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f47f ae63 	bne.w	8001dc4 <HAL_GPIO_Init+0x14>
  }
}
 80020fe:	bf00      	nop
 8002100:	bf00      	nop
 8002102:	3724      	adds	r7, #36	; 0x24
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	58000400 	.word	0x58000400

08002110 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	460b      	mov	r3, r1
 800211a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691a      	ldr	r2, [r3, #16]
 8002120:	887b      	ldrh	r3, [r7, #2]
 8002122:	4013      	ands	r3, r2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d002      	beq.n	800212e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002128:	2301      	movs	r3, #1
 800212a:	73fb      	strb	r3, [r7, #15]
 800212c:	e001      	b.n	8002132 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800212e:	2300      	movs	r3, #0
 8002130:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002132:	7bfb      	ldrb	r3, [r7, #15]
}
 8002134:	4618      	mov	r0, r3
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	460b      	mov	r3, r1
 800214a:	807b      	strh	r3, [r7, #2]
 800214c:	4613      	mov	r3, r2
 800214e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002150:	787b      	ldrb	r3, [r7, #1]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002156:	887a      	ldrh	r2, [r7, #2]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800215c:	e003      	b.n	8002166 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800215e:	887b      	ldrh	r3, [r7, #2]
 8002160:	041a      	lsls	r2, r3, #16
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	619a      	str	r2, [r3, #24]
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
	...

08002174 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800217c:	4b29      	ldr	r3, [pc, #164]	; (8002224 <HAL_PWREx_ConfigSupply+0xb0>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	2b06      	cmp	r3, #6
 8002186:	d00a      	beq.n	800219e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002188:	4b26      	ldr	r3, [pc, #152]	; (8002224 <HAL_PWREx_ConfigSupply+0xb0>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	429a      	cmp	r2, r3
 8002194:	d001      	beq.n	800219a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e040      	b.n	800221c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	e03e      	b.n	800221c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800219e:	4b21      	ldr	r3, [pc, #132]	; (8002224 <HAL_PWREx_ConfigSupply+0xb0>)
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80021a6:	491f      	ldr	r1, [pc, #124]	; (8002224 <HAL_PWREx_ConfigSupply+0xb0>)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80021ae:	f7fe ff5b 	bl	8001068 <HAL_GetTick>
 80021b2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80021b4:	e009      	b.n	80021ca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80021b6:	f7fe ff57 	bl	8001068 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021c4:	d901      	bls.n	80021ca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e028      	b.n	800221c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80021ca:	4b16      	ldr	r3, [pc, #88]	; (8002224 <HAL_PWREx_ConfigSupply+0xb0>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021d6:	d1ee      	bne.n	80021b6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b1e      	cmp	r3, #30
 80021dc:	d008      	beq.n	80021f0 <HAL_PWREx_ConfigSupply+0x7c>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b2e      	cmp	r3, #46	; 0x2e
 80021e2:	d005      	beq.n	80021f0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b1d      	cmp	r3, #29
 80021e8:	d002      	beq.n	80021f0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b2d      	cmp	r3, #45	; 0x2d
 80021ee:	d114      	bne.n	800221a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80021f0:	f7fe ff3a 	bl	8001068 <HAL_GetTick>
 80021f4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80021f6:	e009      	b.n	800220c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80021f8:	f7fe ff36 	bl	8001068 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002206:	d901      	bls.n	800220c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e007      	b.n	800221c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800220c:	4b05      	ldr	r3, [pc, #20]	; (8002224 <HAL_PWREx_ConfigSupply+0xb0>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002218:	d1ee      	bne.n	80021f8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	58024800 	.word	0x58024800

08002228 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b08c      	sub	sp, #48	; 0x30
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d102      	bne.n	800223c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	f000 bc1f 	b.w	8002a7a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 80b3 	beq.w	80023b0 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800224a:	4b95      	ldr	r3, [pc, #596]	; (80024a0 <HAL_RCC_OscConfig+0x278>)
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002252:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002254:	4b92      	ldr	r3, [pc, #584]	; (80024a0 <HAL_RCC_OscConfig+0x278>)
 8002256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002258:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800225a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800225c:	2b10      	cmp	r3, #16
 800225e:	d007      	beq.n	8002270 <HAL_RCC_OscConfig+0x48>
 8002260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002262:	2b18      	cmp	r3, #24
 8002264:	d112      	bne.n	800228c <HAL_RCC_OscConfig+0x64>
 8002266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002268:	f003 0303 	and.w	r3, r3, #3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d10d      	bne.n	800228c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002270:	4b8b      	ldr	r3, [pc, #556]	; (80024a0 <HAL_RCC_OscConfig+0x278>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 8098 	beq.w	80023ae <HAL_RCC_OscConfig+0x186>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	f040 8093 	bne.w	80023ae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e3f6      	b.n	8002a7a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002294:	d106      	bne.n	80022a4 <HAL_RCC_OscConfig+0x7c>
 8002296:	4b82      	ldr	r3, [pc, #520]	; (80024a0 <HAL_RCC_OscConfig+0x278>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a81      	ldr	r2, [pc, #516]	; (80024a0 <HAL_RCC_OscConfig+0x278>)
 800229c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	e058      	b.n	8002356 <HAL_RCC_OscConfig+0x12e>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d112      	bne.n	80022d2 <HAL_RCC_OscConfig+0xaa>
 80022ac:	4b7c      	ldr	r3, [pc, #496]	; (80024a0 <HAL_RCC_OscConfig+0x278>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a7b      	ldr	r2, [pc, #492]	; (80024a0 <HAL_RCC_OscConfig+0x278>)
 80022b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	4b79      	ldr	r3, [pc, #484]	; (80024a0 <HAL_RCC_OscConfig+0x278>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a78      	ldr	r2, [pc, #480]	; (80024a0 <HAL_RCC_OscConfig+0x278>)
 80022be:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80022c2:	6013      	str	r3, [r2, #0]
 80022c4:	4b76      	ldr	r3, [pc, #472]	; (80024a0 <HAL_RCC_OscConfig+0x278>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a75      	ldr	r2, [pc, #468]	; (80024a0 <HAL_RCC_OscConfig+0x278>)
 80022ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ce:	6013      	str	r3, [r2, #0]
 80022d0:	e041      	b.n	8002356 <HAL_RCC_OscConfig+0x12e>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022da:	d112      	bne.n	8002302 <HAL_RCC_OscConfig+0xda>
 80022dc:	4b70      	ldr	r3, [pc, #448]	; (80024a0 <HAL_RCC_OscConfig+0x278>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a6f      	ldr	r2, [pc, #444]	; (80024a0 <HAL_RCC_OscConfig+0x278>)
 80022e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022e6:	6013      	str	r3, [r2, #0]
 80022e8:	4b6d      	ldr	r3, [pc, #436]	; (80024a0 <HAL_RCC_OscConfig+0x278>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a6c      	ldr	r2, [pc, #432]	; (80024a0 <HAL_RCC_OscConfig+0x278>)
 80022ee:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80022f2:	6013      	str	r3, [r2, #0]
 80022f4:	4b6a      	ldr	r3, [pc, #424]	; (80024a0 <HAL_RCC_OscConfig+0x278>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a69      	ldr	r2, [pc, #420]	; (80024a0 <HAL_RCC_OscConfig+0x278>)
 80022fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022fe:	6013      	str	r3, [r2, #0]
 8002300:	e029      	b.n	8002356 <HAL_RCC_OscConfig+0x12e>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800230a:	d112      	bne.n	8002332 <HAL_RCC_OscConfig+0x10a>
 800230c:	4b64      	ldr	r3, [pc, #400]	; (80024a0 <HAL_RCC_OscConfig+0x278>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a63      	ldr	r2, [pc, #396]	; (80024a0 <HAL_RCC_OscConfig+0x278>)
 8002312:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002316:	6013      	str	r3, [r2, #0]
 8002318:	4b61      	ldr	r3, [pc, #388]	; (80024a0 <HAL_RCC_OscConfig+0x278>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a60      	ldr	r2, [pc, #384]	; (80024a0 <HAL_RCC_OscConfig+0x278>)
 800231e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002322:	6013      	str	r3, [r2, #0]
 8002324:	4b5e      	ldr	r3, [pc, #376]	; (80024a0 <HAL_RCC_OscConfig+0x278>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a5d      	ldr	r2, [pc, #372]	; (80024a0 <HAL_RCC_OscConfig+0x278>)
 800232a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800232e:	6013      	str	r3, [r2, #0]
 8002330:	e011      	b.n	8002356 <HAL_RCC_OscConfig+0x12e>
 8002332:	4b5b      	ldr	r3, [pc, #364]	; (80024a0 <HAL_RCC_OscConfig+0x278>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a5a      	ldr	r2, [pc, #360]	; (80024a0 <HAL_RCC_OscConfig+0x278>)
 8002338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800233c:	6013      	str	r3, [r2, #0]
 800233e:	4b58      	ldr	r3, [pc, #352]	; (80024a0 <HAL_RCC_OscConfig+0x278>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a57      	ldr	r2, [pc, #348]	; (80024a0 <HAL_RCC_OscConfig+0x278>)
 8002344:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	4b55      	ldr	r3, [pc, #340]	; (80024a0 <HAL_RCC_OscConfig+0x278>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a54      	ldr	r2, [pc, #336]	; (80024a0 <HAL_RCC_OscConfig+0x278>)
 8002350:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002354:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d013      	beq.n	8002386 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235e:	f7fe fe83 	bl	8001068 <HAL_GetTick>
 8002362:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002364:	e008      	b.n	8002378 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002366:	f7fe fe7f 	bl	8001068 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b64      	cmp	r3, #100	; 0x64
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e380      	b.n	8002a7a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002378:	4b49      	ldr	r3, [pc, #292]	; (80024a0 <HAL_RCC_OscConfig+0x278>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0f0      	beq.n	8002366 <HAL_RCC_OscConfig+0x13e>
 8002384:	e014      	b.n	80023b0 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002386:	f7fe fe6f 	bl	8001068 <HAL_GetTick>
 800238a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800238e:	f7fe fe6b 	bl	8001068 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b64      	cmp	r3, #100	; 0x64
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e36c      	b.n	8002a7a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023a0:	4b3f      	ldr	r3, [pc, #252]	; (80024a0 <HAL_RCC_OscConfig+0x278>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1f0      	bne.n	800238e <HAL_RCC_OscConfig+0x166>
 80023ac:	e000      	b.n	80023b0 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ae:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 808c 	beq.w	80024d6 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023be:	4b38      	ldr	r3, [pc, #224]	; (80024a0 <HAL_RCC_OscConfig+0x278>)
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023c6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023c8:	4b35      	ldr	r3, [pc, #212]	; (80024a0 <HAL_RCC_OscConfig+0x278>)
 80023ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023cc:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80023ce:	6a3b      	ldr	r3, [r7, #32]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d007      	beq.n	80023e4 <HAL_RCC_OscConfig+0x1bc>
 80023d4:	6a3b      	ldr	r3, [r7, #32]
 80023d6:	2b18      	cmp	r3, #24
 80023d8:	d137      	bne.n	800244a <HAL_RCC_OscConfig+0x222>
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	f003 0303 	and.w	r3, r3, #3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d132      	bne.n	800244a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023e4:	4b2e      	ldr	r3, [pc, #184]	; (80024a0 <HAL_RCC_OscConfig+0x278>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d005      	beq.n	80023fc <HAL_RCC_OscConfig+0x1d4>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e33e      	b.n	8002a7a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80023fc:	4b28      	ldr	r3, [pc, #160]	; (80024a0 <HAL_RCC_OscConfig+0x278>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f023 0219 	bic.w	r2, r3, #25
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	4925      	ldr	r1, [pc, #148]	; (80024a0 <HAL_RCC_OscConfig+0x278>)
 800240a:	4313      	orrs	r3, r2
 800240c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240e:	f7fe fe2b 	bl	8001068 <HAL_GetTick>
 8002412:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002416:	f7fe fe27 	bl	8001068 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e328      	b.n	8002a7a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002428:	4b1d      	ldr	r3, [pc, #116]	; (80024a0 <HAL_RCC_OscConfig+0x278>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0f0      	beq.n	8002416 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002434:	4b1a      	ldr	r3, [pc, #104]	; (80024a0 <HAL_RCC_OscConfig+0x278>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	061b      	lsls	r3, r3, #24
 8002442:	4917      	ldr	r1, [pc, #92]	; (80024a0 <HAL_RCC_OscConfig+0x278>)
 8002444:	4313      	orrs	r3, r2
 8002446:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002448:	e045      	b.n	80024d6 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d028      	beq.n	80024a4 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002452:	4b13      	ldr	r3, [pc, #76]	; (80024a0 <HAL_RCC_OscConfig+0x278>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f023 0219 	bic.w	r2, r3, #25
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	4910      	ldr	r1, [pc, #64]	; (80024a0 <HAL_RCC_OscConfig+0x278>)
 8002460:	4313      	orrs	r3, r2
 8002462:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002464:	f7fe fe00 	bl	8001068 <HAL_GetTick>
 8002468:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800246c:	f7fe fdfc 	bl	8001068 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e2fd      	b.n	8002a7a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800247e:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <HAL_RCC_OscConfig+0x278>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0304 	and.w	r3, r3, #4
 8002486:	2b00      	cmp	r3, #0
 8002488:	d0f0      	beq.n	800246c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248a:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <HAL_RCC_OscConfig+0x278>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	061b      	lsls	r3, r3, #24
 8002498:	4901      	ldr	r1, [pc, #4]	; (80024a0 <HAL_RCC_OscConfig+0x278>)
 800249a:	4313      	orrs	r3, r2
 800249c:	604b      	str	r3, [r1, #4]
 800249e:	e01a      	b.n	80024d6 <HAL_RCC_OscConfig+0x2ae>
 80024a0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024a4:	4b97      	ldr	r3, [pc, #604]	; (8002704 <HAL_RCC_OscConfig+0x4dc>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a96      	ldr	r2, [pc, #600]	; (8002704 <HAL_RCC_OscConfig+0x4dc>)
 80024aa:	f023 0301 	bic.w	r3, r3, #1
 80024ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b0:	f7fe fdda 	bl	8001068 <HAL_GetTick>
 80024b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024b8:	f7fe fdd6 	bl	8001068 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e2d7      	b.n	8002a7a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024ca:	4b8e      	ldr	r3, [pc, #568]	; (8002704 <HAL_RCC_OscConfig+0x4dc>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0304 	and.w	r3, r3, #4
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f0      	bne.n	80024b8 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0310 	and.w	r3, r3, #16
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d06a      	beq.n	80025b8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024e2:	4b88      	ldr	r3, [pc, #544]	; (8002704 <HAL_RCC_OscConfig+0x4dc>)
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024ea:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024ec:	4b85      	ldr	r3, [pc, #532]	; (8002704 <HAL_RCC_OscConfig+0x4dc>)
 80024ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	2b08      	cmp	r3, #8
 80024f6:	d007      	beq.n	8002508 <HAL_RCC_OscConfig+0x2e0>
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	2b18      	cmp	r3, #24
 80024fc:	d11b      	bne.n	8002536 <HAL_RCC_OscConfig+0x30e>
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	f003 0303 	and.w	r3, r3, #3
 8002504:	2b01      	cmp	r3, #1
 8002506:	d116      	bne.n	8002536 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002508:	4b7e      	ldr	r3, [pc, #504]	; (8002704 <HAL_RCC_OscConfig+0x4dc>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002510:	2b00      	cmp	r3, #0
 8002512:	d005      	beq.n	8002520 <HAL_RCC_OscConfig+0x2f8>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	69db      	ldr	r3, [r3, #28]
 8002518:	2b80      	cmp	r3, #128	; 0x80
 800251a:	d001      	beq.n	8002520 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e2ac      	b.n	8002a7a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002520:	4b78      	ldr	r3, [pc, #480]	; (8002704 <HAL_RCC_OscConfig+0x4dc>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	061b      	lsls	r3, r3, #24
 800252e:	4975      	ldr	r1, [pc, #468]	; (8002704 <HAL_RCC_OscConfig+0x4dc>)
 8002530:	4313      	orrs	r3, r2
 8002532:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002534:	e040      	b.n	80025b8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d023      	beq.n	8002586 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800253e:	4b71      	ldr	r3, [pc, #452]	; (8002704 <HAL_RCC_OscConfig+0x4dc>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a70      	ldr	r2, [pc, #448]	; (8002704 <HAL_RCC_OscConfig+0x4dc>)
 8002544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002548:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254a:	f7fe fd8d 	bl	8001068 <HAL_GetTick>
 800254e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002552:	f7fe fd89 	bl	8001068 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e28a      	b.n	8002a7a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002564:	4b67      	ldr	r3, [pc, #412]	; (8002704 <HAL_RCC_OscConfig+0x4dc>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0f0      	beq.n	8002552 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002570:	4b64      	ldr	r3, [pc, #400]	; (8002704 <HAL_RCC_OscConfig+0x4dc>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	061b      	lsls	r3, r3, #24
 800257e:	4961      	ldr	r1, [pc, #388]	; (8002704 <HAL_RCC_OscConfig+0x4dc>)
 8002580:	4313      	orrs	r3, r2
 8002582:	60cb      	str	r3, [r1, #12]
 8002584:	e018      	b.n	80025b8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002586:	4b5f      	ldr	r3, [pc, #380]	; (8002704 <HAL_RCC_OscConfig+0x4dc>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a5e      	ldr	r2, [pc, #376]	; (8002704 <HAL_RCC_OscConfig+0x4dc>)
 800258c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002592:	f7fe fd69 	bl	8001068 <HAL_GetTick>
 8002596:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800259a:	f7fe fd65 	bl	8001068 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e266      	b.n	8002a7a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80025ac:	4b55      	ldr	r3, [pc, #340]	; (8002704 <HAL_RCC_OscConfig+0x4dc>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1f0      	bne.n	800259a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d036      	beq.n	8002632 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d019      	beq.n	8002600 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025cc:	4b4d      	ldr	r3, [pc, #308]	; (8002704 <HAL_RCC_OscConfig+0x4dc>)
 80025ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025d0:	4a4c      	ldr	r2, [pc, #304]	; (8002704 <HAL_RCC_OscConfig+0x4dc>)
 80025d2:	f043 0301 	orr.w	r3, r3, #1
 80025d6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d8:	f7fe fd46 	bl	8001068 <HAL_GetTick>
 80025dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e0:	f7fe fd42 	bl	8001068 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e243      	b.n	8002a7a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80025f2:	4b44      	ldr	r3, [pc, #272]	; (8002704 <HAL_RCC_OscConfig+0x4dc>)
 80025f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0x3b8>
 80025fe:	e018      	b.n	8002632 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002600:	4b40      	ldr	r3, [pc, #256]	; (8002704 <HAL_RCC_OscConfig+0x4dc>)
 8002602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002604:	4a3f      	ldr	r2, [pc, #252]	; (8002704 <HAL_RCC_OscConfig+0x4dc>)
 8002606:	f023 0301 	bic.w	r3, r3, #1
 800260a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260c:	f7fe fd2c 	bl	8001068 <HAL_GetTick>
 8002610:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002614:	f7fe fd28 	bl	8001068 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e229      	b.n	8002a7a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002626:	4b37      	ldr	r3, [pc, #220]	; (8002704 <HAL_RCC_OscConfig+0x4dc>)
 8002628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f0      	bne.n	8002614 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0320 	and.w	r3, r3, #32
 800263a:	2b00      	cmp	r3, #0
 800263c:	d036      	beq.n	80026ac <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d019      	beq.n	800267a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002646:	4b2f      	ldr	r3, [pc, #188]	; (8002704 <HAL_RCC_OscConfig+0x4dc>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a2e      	ldr	r2, [pc, #184]	; (8002704 <HAL_RCC_OscConfig+0x4dc>)
 800264c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002650:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002652:	f7fe fd09 	bl	8001068 <HAL_GetTick>
 8002656:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800265a:	f7fe fd05 	bl	8001068 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e206      	b.n	8002a7a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800266c:	4b25      	ldr	r3, [pc, #148]	; (8002704 <HAL_RCC_OscConfig+0x4dc>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0f0      	beq.n	800265a <HAL_RCC_OscConfig+0x432>
 8002678:	e018      	b.n	80026ac <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800267a:	4b22      	ldr	r3, [pc, #136]	; (8002704 <HAL_RCC_OscConfig+0x4dc>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a21      	ldr	r2, [pc, #132]	; (8002704 <HAL_RCC_OscConfig+0x4dc>)
 8002680:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002684:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002686:	f7fe fcef 	bl	8001068 <HAL_GetTick>
 800268a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800268e:	f7fe fceb 	bl	8001068 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e1ec      	b.n	8002a7a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80026a0:	4b18      	ldr	r3, [pc, #96]	; (8002704 <HAL_RCC_OscConfig+0x4dc>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1f0      	bne.n	800268e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 80af 	beq.w	8002818 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80026ba:	4b13      	ldr	r3, [pc, #76]	; (8002708 <HAL_RCC_OscConfig+0x4e0>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a12      	ldr	r2, [pc, #72]	; (8002708 <HAL_RCC_OscConfig+0x4e0>)
 80026c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026c6:	f7fe fccf 	bl	8001068 <HAL_GetTick>
 80026ca:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ce:	f7fe fccb 	bl	8001068 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b64      	cmp	r3, #100	; 0x64
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e1cc      	b.n	8002a7a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026e0:	4b09      	ldr	r3, [pc, #36]	; (8002708 <HAL_RCC_OscConfig+0x4e0>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0f0      	beq.n	80026ce <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d10b      	bne.n	800270c <HAL_RCC_OscConfig+0x4e4>
 80026f4:	4b03      	ldr	r3, [pc, #12]	; (8002704 <HAL_RCC_OscConfig+0x4dc>)
 80026f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f8:	4a02      	ldr	r2, [pc, #8]	; (8002704 <HAL_RCC_OscConfig+0x4dc>)
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002700:	e05b      	b.n	80027ba <HAL_RCC_OscConfig+0x592>
 8002702:	bf00      	nop
 8002704:	58024400 	.word	0x58024400
 8002708:	58024800 	.word	0x58024800
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d112      	bne.n	800273a <HAL_RCC_OscConfig+0x512>
 8002714:	4b9d      	ldr	r3, [pc, #628]	; (800298c <HAL_RCC_OscConfig+0x764>)
 8002716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002718:	4a9c      	ldr	r2, [pc, #624]	; (800298c <HAL_RCC_OscConfig+0x764>)
 800271a:	f023 0301 	bic.w	r3, r3, #1
 800271e:	6713      	str	r3, [r2, #112]	; 0x70
 8002720:	4b9a      	ldr	r3, [pc, #616]	; (800298c <HAL_RCC_OscConfig+0x764>)
 8002722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002724:	4a99      	ldr	r2, [pc, #612]	; (800298c <HAL_RCC_OscConfig+0x764>)
 8002726:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800272a:	6713      	str	r3, [r2, #112]	; 0x70
 800272c:	4b97      	ldr	r3, [pc, #604]	; (800298c <HAL_RCC_OscConfig+0x764>)
 800272e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002730:	4a96      	ldr	r2, [pc, #600]	; (800298c <HAL_RCC_OscConfig+0x764>)
 8002732:	f023 0304 	bic.w	r3, r3, #4
 8002736:	6713      	str	r3, [r2, #112]	; 0x70
 8002738:	e03f      	b.n	80027ba <HAL_RCC_OscConfig+0x592>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	2b05      	cmp	r3, #5
 8002740:	d112      	bne.n	8002768 <HAL_RCC_OscConfig+0x540>
 8002742:	4b92      	ldr	r3, [pc, #584]	; (800298c <HAL_RCC_OscConfig+0x764>)
 8002744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002746:	4a91      	ldr	r2, [pc, #580]	; (800298c <HAL_RCC_OscConfig+0x764>)
 8002748:	f043 0304 	orr.w	r3, r3, #4
 800274c:	6713      	str	r3, [r2, #112]	; 0x70
 800274e:	4b8f      	ldr	r3, [pc, #572]	; (800298c <HAL_RCC_OscConfig+0x764>)
 8002750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002752:	4a8e      	ldr	r2, [pc, #568]	; (800298c <HAL_RCC_OscConfig+0x764>)
 8002754:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002758:	6713      	str	r3, [r2, #112]	; 0x70
 800275a:	4b8c      	ldr	r3, [pc, #560]	; (800298c <HAL_RCC_OscConfig+0x764>)
 800275c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275e:	4a8b      	ldr	r2, [pc, #556]	; (800298c <HAL_RCC_OscConfig+0x764>)
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	6713      	str	r3, [r2, #112]	; 0x70
 8002766:	e028      	b.n	80027ba <HAL_RCC_OscConfig+0x592>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2b85      	cmp	r3, #133	; 0x85
 800276e:	d112      	bne.n	8002796 <HAL_RCC_OscConfig+0x56e>
 8002770:	4b86      	ldr	r3, [pc, #536]	; (800298c <HAL_RCC_OscConfig+0x764>)
 8002772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002774:	4a85      	ldr	r2, [pc, #532]	; (800298c <HAL_RCC_OscConfig+0x764>)
 8002776:	f043 0304 	orr.w	r3, r3, #4
 800277a:	6713      	str	r3, [r2, #112]	; 0x70
 800277c:	4b83      	ldr	r3, [pc, #524]	; (800298c <HAL_RCC_OscConfig+0x764>)
 800277e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002780:	4a82      	ldr	r2, [pc, #520]	; (800298c <HAL_RCC_OscConfig+0x764>)
 8002782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002786:	6713      	str	r3, [r2, #112]	; 0x70
 8002788:	4b80      	ldr	r3, [pc, #512]	; (800298c <HAL_RCC_OscConfig+0x764>)
 800278a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278c:	4a7f      	ldr	r2, [pc, #508]	; (800298c <HAL_RCC_OscConfig+0x764>)
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	6713      	str	r3, [r2, #112]	; 0x70
 8002794:	e011      	b.n	80027ba <HAL_RCC_OscConfig+0x592>
 8002796:	4b7d      	ldr	r3, [pc, #500]	; (800298c <HAL_RCC_OscConfig+0x764>)
 8002798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279a:	4a7c      	ldr	r2, [pc, #496]	; (800298c <HAL_RCC_OscConfig+0x764>)
 800279c:	f023 0301 	bic.w	r3, r3, #1
 80027a0:	6713      	str	r3, [r2, #112]	; 0x70
 80027a2:	4b7a      	ldr	r3, [pc, #488]	; (800298c <HAL_RCC_OscConfig+0x764>)
 80027a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a6:	4a79      	ldr	r2, [pc, #484]	; (800298c <HAL_RCC_OscConfig+0x764>)
 80027a8:	f023 0304 	bic.w	r3, r3, #4
 80027ac:	6713      	str	r3, [r2, #112]	; 0x70
 80027ae:	4b77      	ldr	r3, [pc, #476]	; (800298c <HAL_RCC_OscConfig+0x764>)
 80027b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b2:	4a76      	ldr	r2, [pc, #472]	; (800298c <HAL_RCC_OscConfig+0x764>)
 80027b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d015      	beq.n	80027ee <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c2:	f7fe fc51 	bl	8001068 <HAL_GetTick>
 80027c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027c8:	e00a      	b.n	80027e0 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ca:	f7fe fc4d 	bl	8001068 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d8:	4293      	cmp	r3, r2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e14c      	b.n	8002a7a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027e0:	4b6a      	ldr	r3, [pc, #424]	; (800298c <HAL_RCC_OscConfig+0x764>)
 80027e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0ee      	beq.n	80027ca <HAL_RCC_OscConfig+0x5a2>
 80027ec:	e014      	b.n	8002818 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ee:	f7fe fc3b 	bl	8001068 <HAL_GetTick>
 80027f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80027f4:	e00a      	b.n	800280c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027f6:	f7fe fc37 	bl	8001068 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	f241 3288 	movw	r2, #5000	; 0x1388
 8002804:	4293      	cmp	r3, r2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e136      	b.n	8002a7a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800280c:	4b5f      	ldr	r3, [pc, #380]	; (800298c <HAL_RCC_OscConfig+0x764>)
 800280e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1ee      	bne.n	80027f6 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 812b 	beq.w	8002a78 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002822:	4b5a      	ldr	r3, [pc, #360]	; (800298c <HAL_RCC_OscConfig+0x764>)
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800282a:	2b18      	cmp	r3, #24
 800282c:	f000 80bb 	beq.w	80029a6 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	2b02      	cmp	r3, #2
 8002836:	f040 8095 	bne.w	8002964 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800283a:	4b54      	ldr	r3, [pc, #336]	; (800298c <HAL_RCC_OscConfig+0x764>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a53      	ldr	r2, [pc, #332]	; (800298c <HAL_RCC_OscConfig+0x764>)
 8002840:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002844:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002846:	f7fe fc0f 	bl	8001068 <HAL_GetTick>
 800284a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800284c:	e008      	b.n	8002860 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800284e:	f7fe fc0b 	bl	8001068 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e10c      	b.n	8002a7a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002860:	4b4a      	ldr	r3, [pc, #296]	; (800298c <HAL_RCC_OscConfig+0x764>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1f0      	bne.n	800284e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800286c:	4b47      	ldr	r3, [pc, #284]	; (800298c <HAL_RCC_OscConfig+0x764>)
 800286e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002870:	4b47      	ldr	r3, [pc, #284]	; (8002990 <HAL_RCC_OscConfig+0x768>)
 8002872:	4013      	ands	r3, r2
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800287c:	0112      	lsls	r2, r2, #4
 800287e:	430a      	orrs	r2, r1
 8002880:	4942      	ldr	r1, [pc, #264]	; (800298c <HAL_RCC_OscConfig+0x764>)
 8002882:	4313      	orrs	r3, r2
 8002884:	628b      	str	r3, [r1, #40]	; 0x28
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	3b01      	subs	r3, #1
 800288c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002894:	3b01      	subs	r3, #1
 8002896:	025b      	lsls	r3, r3, #9
 8002898:	b29b      	uxth	r3, r3
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a0:	3b01      	subs	r3, #1
 80028a2:	041b      	lsls	r3, r3, #16
 80028a4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ae:	3b01      	subs	r3, #1
 80028b0:	061b      	lsls	r3, r3, #24
 80028b2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80028b6:	4935      	ldr	r1, [pc, #212]	; (800298c <HAL_RCC_OscConfig+0x764>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80028bc:	4b33      	ldr	r3, [pc, #204]	; (800298c <HAL_RCC_OscConfig+0x764>)
 80028be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c0:	4a32      	ldr	r2, [pc, #200]	; (800298c <HAL_RCC_OscConfig+0x764>)
 80028c2:	f023 0301 	bic.w	r3, r3, #1
 80028c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80028c8:	4b30      	ldr	r3, [pc, #192]	; (800298c <HAL_RCC_OscConfig+0x764>)
 80028ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028cc:	4b31      	ldr	r3, [pc, #196]	; (8002994 <HAL_RCC_OscConfig+0x76c>)
 80028ce:	4013      	ands	r3, r2
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80028d4:	00d2      	lsls	r2, r2, #3
 80028d6:	492d      	ldr	r1, [pc, #180]	; (800298c <HAL_RCC_OscConfig+0x764>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80028dc:	4b2b      	ldr	r3, [pc, #172]	; (800298c <HAL_RCC_OscConfig+0x764>)
 80028de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e0:	f023 020c 	bic.w	r2, r3, #12
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e8:	4928      	ldr	r1, [pc, #160]	; (800298c <HAL_RCC_OscConfig+0x764>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80028ee:	4b27      	ldr	r3, [pc, #156]	; (800298c <HAL_RCC_OscConfig+0x764>)
 80028f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f2:	f023 0202 	bic.w	r2, r3, #2
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fa:	4924      	ldr	r1, [pc, #144]	; (800298c <HAL_RCC_OscConfig+0x764>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002900:	4b22      	ldr	r3, [pc, #136]	; (800298c <HAL_RCC_OscConfig+0x764>)
 8002902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002904:	4a21      	ldr	r2, [pc, #132]	; (800298c <HAL_RCC_OscConfig+0x764>)
 8002906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800290a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800290c:	4b1f      	ldr	r3, [pc, #124]	; (800298c <HAL_RCC_OscConfig+0x764>)
 800290e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002910:	4a1e      	ldr	r2, [pc, #120]	; (800298c <HAL_RCC_OscConfig+0x764>)
 8002912:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002916:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002918:	4b1c      	ldr	r3, [pc, #112]	; (800298c <HAL_RCC_OscConfig+0x764>)
 800291a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291c:	4a1b      	ldr	r2, [pc, #108]	; (800298c <HAL_RCC_OscConfig+0x764>)
 800291e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002922:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002924:	4b19      	ldr	r3, [pc, #100]	; (800298c <HAL_RCC_OscConfig+0x764>)
 8002926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002928:	4a18      	ldr	r2, [pc, #96]	; (800298c <HAL_RCC_OscConfig+0x764>)
 800292a:	f043 0301 	orr.w	r3, r3, #1
 800292e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002930:	4b16      	ldr	r3, [pc, #88]	; (800298c <HAL_RCC_OscConfig+0x764>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a15      	ldr	r2, [pc, #84]	; (800298c <HAL_RCC_OscConfig+0x764>)
 8002936:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800293a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293c:	f7fe fb94 	bl	8001068 <HAL_GetTick>
 8002940:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002944:	f7fe fb90 	bl	8001068 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e091      	b.n	8002a7a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002956:	4b0d      	ldr	r3, [pc, #52]	; (800298c <HAL_RCC_OscConfig+0x764>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0f0      	beq.n	8002944 <HAL_RCC_OscConfig+0x71c>
 8002962:	e089      	b.n	8002a78 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002964:	4b09      	ldr	r3, [pc, #36]	; (800298c <HAL_RCC_OscConfig+0x764>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a08      	ldr	r2, [pc, #32]	; (800298c <HAL_RCC_OscConfig+0x764>)
 800296a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800296e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002970:	f7fe fb7a 	bl	8001068 <HAL_GetTick>
 8002974:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002976:	e00f      	b.n	8002998 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002978:	f7fe fb76 	bl	8001068 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d908      	bls.n	8002998 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e077      	b.n	8002a7a <HAL_RCC_OscConfig+0x852>
 800298a:	bf00      	nop
 800298c:	58024400 	.word	0x58024400
 8002990:	fffffc0c 	.word	0xfffffc0c
 8002994:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002998:	4b3a      	ldr	r3, [pc, #232]	; (8002a84 <HAL_RCC_OscConfig+0x85c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1e9      	bne.n	8002978 <HAL_RCC_OscConfig+0x750>
 80029a4:	e068      	b.n	8002a78 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80029a6:	4b37      	ldr	r3, [pc, #220]	; (8002a84 <HAL_RCC_OscConfig+0x85c>)
 80029a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029aa:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80029ac:	4b35      	ldr	r3, [pc, #212]	; (8002a84 <HAL_RCC_OscConfig+0x85c>)
 80029ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b0:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d031      	beq.n	8002a1e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	f003 0203 	and.w	r2, r3, #3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d12a      	bne.n	8002a1e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	091b      	lsrs	r3, r3, #4
 80029cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d122      	bne.n	8002a1e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d11a      	bne.n	8002a1e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	0a5b      	lsrs	r3, r3, #9
 80029ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d111      	bne.n	8002a1e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	0c1b      	lsrs	r3, r3, #16
 80029fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a06:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d108      	bne.n	8002a1e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	0e1b      	lsrs	r3, r3, #24
 8002a10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a18:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d001      	beq.n	8002a22 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e02b      	b.n	8002a7a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002a22:	4b18      	ldr	r3, [pc, #96]	; (8002a84 <HAL_RCC_OscConfig+0x85c>)
 8002a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a26:	08db      	lsrs	r3, r3, #3
 8002a28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a2c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d01f      	beq.n	8002a78 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002a38:	4b12      	ldr	r3, [pc, #72]	; (8002a84 <HAL_RCC_OscConfig+0x85c>)
 8002a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3c:	4a11      	ldr	r2, [pc, #68]	; (8002a84 <HAL_RCC_OscConfig+0x85c>)
 8002a3e:	f023 0301 	bic.w	r3, r3, #1
 8002a42:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a44:	f7fe fb10 	bl	8001068 <HAL_GetTick>
 8002a48:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002a4a:	bf00      	nop
 8002a4c:	f7fe fb0c 	bl	8001068 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d0f9      	beq.n	8002a4c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a58:	4b0a      	ldr	r3, [pc, #40]	; (8002a84 <HAL_RCC_OscConfig+0x85c>)
 8002a5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a5c:	4b0a      	ldr	r3, [pc, #40]	; (8002a88 <HAL_RCC_OscConfig+0x860>)
 8002a5e:	4013      	ands	r3, r2
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a64:	00d2      	lsls	r2, r2, #3
 8002a66:	4907      	ldr	r1, [pc, #28]	; (8002a84 <HAL_RCC_OscConfig+0x85c>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002a6c:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <HAL_RCC_OscConfig+0x85c>)
 8002a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a70:	4a04      	ldr	r2, [pc, #16]	; (8002a84 <HAL_RCC_OscConfig+0x85c>)
 8002a72:	f043 0301 	orr.w	r3, r3, #1
 8002a76:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3730      	adds	r7, #48	; 0x30
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	58024400 	.word	0x58024400
 8002a88:	ffff0007 	.word	0xffff0007

08002a8c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e19c      	b.n	8002dda <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002aa0:	4b8a      	ldr	r3, [pc, #552]	; (8002ccc <HAL_RCC_ClockConfig+0x240>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 030f 	and.w	r3, r3, #15
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d910      	bls.n	8002ad0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aae:	4b87      	ldr	r3, [pc, #540]	; (8002ccc <HAL_RCC_ClockConfig+0x240>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f023 020f 	bic.w	r2, r3, #15
 8002ab6:	4985      	ldr	r1, [pc, #532]	; (8002ccc <HAL_RCC_ClockConfig+0x240>)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002abe:	4b83      	ldr	r3, [pc, #524]	; (8002ccc <HAL_RCC_ClockConfig+0x240>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d001      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e184      	b.n	8002dda <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d010      	beq.n	8002afe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	691a      	ldr	r2, [r3, #16]
 8002ae0:	4b7b      	ldr	r3, [pc, #492]	; (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d908      	bls.n	8002afe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002aec:	4b78      	ldr	r3, [pc, #480]	; (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	4975      	ldr	r1, [pc, #468]	; (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0308 	and.w	r3, r3, #8
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d010      	beq.n	8002b2c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	695a      	ldr	r2, [r3, #20]
 8002b0e:	4b70      	ldr	r3, [pc, #448]	; (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d908      	bls.n	8002b2c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b1a:	4b6d      	ldr	r3, [pc, #436]	; (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	496a      	ldr	r1, [pc, #424]	; (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0310 	and.w	r3, r3, #16
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d010      	beq.n	8002b5a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	699a      	ldr	r2, [r3, #24]
 8002b3c:	4b64      	ldr	r3, [pc, #400]	; (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d908      	bls.n	8002b5a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b48:	4b61      	ldr	r3, [pc, #388]	; (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	495e      	ldr	r1, [pc, #376]	; (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0320 	and.w	r3, r3, #32
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d010      	beq.n	8002b88 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69da      	ldr	r2, [r3, #28]
 8002b6a:	4b59      	ldr	r3, [pc, #356]	; (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d908      	bls.n	8002b88 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002b76:	4b56      	ldr	r3, [pc, #344]	; (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	4953      	ldr	r1, [pc, #332]	; (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d010      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68da      	ldr	r2, [r3, #12]
 8002b98:	4b4d      	ldr	r3, [pc, #308]	; (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	f003 030f 	and.w	r3, r3, #15
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d908      	bls.n	8002bb6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ba4:	4b4a      	ldr	r3, [pc, #296]	; (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	f023 020f 	bic.w	r2, r3, #15
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	4947      	ldr	r1, [pc, #284]	; (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d055      	beq.n	8002c6e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002bc2:	4b43      	ldr	r3, [pc, #268]	; (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	4940      	ldr	r1, [pc, #256]	; (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d107      	bne.n	8002bec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bdc:	4b3c      	ldr	r3, [pc, #240]	; (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d121      	bne.n	8002c2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e0f6      	b.n	8002dda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	2b03      	cmp	r3, #3
 8002bf2:	d107      	bne.n	8002c04 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bf4:	4b36      	ldr	r3, [pc, #216]	; (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d115      	bne.n	8002c2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e0ea      	b.n	8002dda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d107      	bne.n	8002c1c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c0c:	4b30      	ldr	r3, [pc, #192]	; (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d109      	bne.n	8002c2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e0de      	b.n	8002dda <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c1c:	4b2c      	ldr	r3, [pc, #176]	; (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e0d6      	b.n	8002dda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c2c:	4b28      	ldr	r3, [pc, #160]	; (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	f023 0207 	bic.w	r2, r3, #7
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	4925      	ldr	r1, [pc, #148]	; (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c3e:	f7fe fa13 	bl	8001068 <HAL_GetTick>
 8002c42:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c44:	e00a      	b.n	8002c5c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c46:	f7fe fa0f 	bl	8001068 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e0be      	b.n	8002dda <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5c:	4b1c      	ldr	r3, [pc, #112]	; (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d1eb      	bne.n	8002c46 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d010      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68da      	ldr	r2, [r3, #12]
 8002c7e:	4b14      	ldr	r3, [pc, #80]	; (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d208      	bcs.n	8002c9c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c8a:	4b11      	ldr	r3, [pc, #68]	; (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	f023 020f 	bic.w	r2, r3, #15
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	490e      	ldr	r1, [pc, #56]	; (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ccc <HAL_RCC_ClockConfig+0x240>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 030f 	and.w	r3, r3, #15
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d214      	bcs.n	8002cd4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002caa:	4b08      	ldr	r3, [pc, #32]	; (8002ccc <HAL_RCC_ClockConfig+0x240>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f023 020f 	bic.w	r2, r3, #15
 8002cb2:	4906      	ldr	r1, [pc, #24]	; (8002ccc <HAL_RCC_ClockConfig+0x240>)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cba:	4b04      	ldr	r3, [pc, #16]	; (8002ccc <HAL_RCC_ClockConfig+0x240>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 030f 	and.w	r3, r3, #15
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d005      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e086      	b.n	8002dda <HAL_RCC_ClockConfig+0x34e>
 8002ccc:	52002000 	.word	0x52002000
 8002cd0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0304 	and.w	r3, r3, #4
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d010      	beq.n	8002d02 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	691a      	ldr	r2, [r3, #16]
 8002ce4:	4b3f      	ldr	r3, [pc, #252]	; (8002de4 <HAL_RCC_ClockConfig+0x358>)
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d208      	bcs.n	8002d02 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002cf0:	4b3c      	ldr	r3, [pc, #240]	; (8002de4 <HAL_RCC_ClockConfig+0x358>)
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	4939      	ldr	r1, [pc, #228]	; (8002de4 <HAL_RCC_ClockConfig+0x358>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0308 	and.w	r3, r3, #8
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d010      	beq.n	8002d30 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	695a      	ldr	r2, [r3, #20]
 8002d12:	4b34      	ldr	r3, [pc, #208]	; (8002de4 <HAL_RCC_ClockConfig+0x358>)
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d208      	bcs.n	8002d30 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d1e:	4b31      	ldr	r3, [pc, #196]	; (8002de4 <HAL_RCC_ClockConfig+0x358>)
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	492e      	ldr	r1, [pc, #184]	; (8002de4 <HAL_RCC_ClockConfig+0x358>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0310 	and.w	r3, r3, #16
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d010      	beq.n	8002d5e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	699a      	ldr	r2, [r3, #24]
 8002d40:	4b28      	ldr	r3, [pc, #160]	; (8002de4 <HAL_RCC_ClockConfig+0x358>)
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d208      	bcs.n	8002d5e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d4c:	4b25      	ldr	r3, [pc, #148]	; (8002de4 <HAL_RCC_ClockConfig+0x358>)
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	4922      	ldr	r1, [pc, #136]	; (8002de4 <HAL_RCC_ClockConfig+0x358>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0320 	and.w	r3, r3, #32
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d010      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	69da      	ldr	r2, [r3, #28]
 8002d6e:	4b1d      	ldr	r3, [pc, #116]	; (8002de4 <HAL_RCC_ClockConfig+0x358>)
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d208      	bcs.n	8002d8c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d7a:	4b1a      	ldr	r3, [pc, #104]	; (8002de4 <HAL_RCC_ClockConfig+0x358>)
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	4917      	ldr	r1, [pc, #92]	; (8002de4 <HAL_RCC_ClockConfig+0x358>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002d8c:	f000 f834 	bl	8002df8 <HAL_RCC_GetSysClockFreq>
 8002d90:	4602      	mov	r2, r0
 8002d92:	4b14      	ldr	r3, [pc, #80]	; (8002de4 <HAL_RCC_ClockConfig+0x358>)
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	0a1b      	lsrs	r3, r3, #8
 8002d98:	f003 030f 	and.w	r3, r3, #15
 8002d9c:	4912      	ldr	r1, [pc, #72]	; (8002de8 <HAL_RCC_ClockConfig+0x35c>)
 8002d9e:	5ccb      	ldrb	r3, [r1, r3]
 8002da0:	f003 031f 	and.w	r3, r3, #31
 8002da4:	fa22 f303 	lsr.w	r3, r2, r3
 8002da8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002daa:	4b0e      	ldr	r3, [pc, #56]	; (8002de4 <HAL_RCC_ClockConfig+0x358>)
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	4a0d      	ldr	r2, [pc, #52]	; (8002de8 <HAL_RCC_ClockConfig+0x35c>)
 8002db4:	5cd3      	ldrb	r3, [r2, r3]
 8002db6:	f003 031f 	and.w	r3, r3, #31
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc0:	4a0a      	ldr	r2, [pc, #40]	; (8002dec <HAL_RCC_ClockConfig+0x360>)
 8002dc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002dc4:	4a0a      	ldr	r2, [pc, #40]	; (8002df0 <HAL_RCC_ClockConfig+0x364>)
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002dca:	4b0a      	ldr	r3, [pc, #40]	; (8002df4 <HAL_RCC_ClockConfig+0x368>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fe f900 	bl	8000fd4 <HAL_InitTick>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	58024400 	.word	0x58024400
 8002de8:	080079bc 	.word	0x080079bc
 8002dec:	24000110 	.word	0x24000110
 8002df0:	2400010c 	.word	0x2400010c
 8002df4:	24000114 	.word	0x24000114

08002df8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b089      	sub	sp, #36	; 0x24
 8002dfc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dfe:	4bb3      	ldr	r3, [pc, #716]	; (80030cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e06:	2b18      	cmp	r3, #24
 8002e08:	f200 8155 	bhi.w	80030b6 <HAL_RCC_GetSysClockFreq+0x2be>
 8002e0c:	a201      	add	r2, pc, #4	; (adr r2, 8002e14 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e12:	bf00      	nop
 8002e14:	08002e79 	.word	0x08002e79
 8002e18:	080030b7 	.word	0x080030b7
 8002e1c:	080030b7 	.word	0x080030b7
 8002e20:	080030b7 	.word	0x080030b7
 8002e24:	080030b7 	.word	0x080030b7
 8002e28:	080030b7 	.word	0x080030b7
 8002e2c:	080030b7 	.word	0x080030b7
 8002e30:	080030b7 	.word	0x080030b7
 8002e34:	08002e9f 	.word	0x08002e9f
 8002e38:	080030b7 	.word	0x080030b7
 8002e3c:	080030b7 	.word	0x080030b7
 8002e40:	080030b7 	.word	0x080030b7
 8002e44:	080030b7 	.word	0x080030b7
 8002e48:	080030b7 	.word	0x080030b7
 8002e4c:	080030b7 	.word	0x080030b7
 8002e50:	080030b7 	.word	0x080030b7
 8002e54:	08002ea5 	.word	0x08002ea5
 8002e58:	080030b7 	.word	0x080030b7
 8002e5c:	080030b7 	.word	0x080030b7
 8002e60:	080030b7 	.word	0x080030b7
 8002e64:	080030b7 	.word	0x080030b7
 8002e68:	080030b7 	.word	0x080030b7
 8002e6c:	080030b7 	.word	0x080030b7
 8002e70:	080030b7 	.word	0x080030b7
 8002e74:	08002eab 	.word	0x08002eab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e78:	4b94      	ldr	r3, [pc, #592]	; (80030cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0320 	and.w	r3, r3, #32
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d009      	beq.n	8002e98 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e84:	4b91      	ldr	r3, [pc, #580]	; (80030cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	08db      	lsrs	r3, r3, #3
 8002e8a:	f003 0303 	and.w	r3, r3, #3
 8002e8e:	4a90      	ldr	r2, [pc, #576]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e90:	fa22 f303 	lsr.w	r3, r2, r3
 8002e94:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002e96:	e111      	b.n	80030bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002e98:	4b8d      	ldr	r3, [pc, #564]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e9a:	61bb      	str	r3, [r7, #24]
      break;
 8002e9c:	e10e      	b.n	80030bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002e9e:	4b8d      	ldr	r3, [pc, #564]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ea0:	61bb      	str	r3, [r7, #24]
      break;
 8002ea2:	e10b      	b.n	80030bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002ea4:	4b8c      	ldr	r3, [pc, #560]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002ea6:	61bb      	str	r3, [r7, #24]
      break;
 8002ea8:	e108      	b.n	80030bc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002eaa:	4b88      	ldr	r3, [pc, #544]	; (80030cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002eb4:	4b85      	ldr	r3, [pc, #532]	; (80030cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb8:	091b      	lsrs	r3, r3, #4
 8002eba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ebe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002ec0:	4b82      	ldr	r3, [pc, #520]	; (80030cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002eca:	4b80      	ldr	r3, [pc, #512]	; (80030cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ece:	08db      	lsrs	r3, r3, #3
 8002ed0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	fb02 f303 	mul.w	r3, r2, r3
 8002eda:	ee07 3a90 	vmov	s15, r3
 8002ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ee2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 80e1 	beq.w	80030b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	f000 8083 	beq.w	8002ffc <HAL_RCC_GetSysClockFreq+0x204>
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	f200 80a1 	bhi.w	8003040 <HAL_RCC_GetSysClockFreq+0x248>
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <HAL_RCC_GetSysClockFreq+0x114>
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d056      	beq.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002f0a:	e099      	b.n	8003040 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f0c:	4b6f      	ldr	r3, [pc, #444]	; (80030cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0320 	and.w	r3, r3, #32
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d02d      	beq.n	8002f74 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002f18:	4b6c      	ldr	r3, [pc, #432]	; (80030cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	08db      	lsrs	r3, r3, #3
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	4a6b      	ldr	r2, [pc, #428]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f24:	fa22 f303 	lsr.w	r3, r2, r3
 8002f28:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	ee07 3a90 	vmov	s15, r3
 8002f30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	ee07 3a90 	vmov	s15, r3
 8002f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f42:	4b62      	ldr	r3, [pc, #392]	; (80030cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f4a:	ee07 3a90 	vmov	s15, r3
 8002f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f52:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f56:	eddf 5a61 	vldr	s11, [pc, #388]	; 80030dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f6e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002f72:	e087      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	ee07 3a90 	vmov	s15, r3
 8002f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f7e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80030e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f86:	4b51      	ldr	r3, [pc, #324]	; (80030cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f8e:	ee07 3a90 	vmov	s15, r3
 8002f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f96:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f9a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80030dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002fb6:	e065      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	ee07 3a90 	vmov	s15, r3
 8002fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fc2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80030e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fca:	4b40      	ldr	r3, [pc, #256]	; (80030cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fd2:	ee07 3a90 	vmov	s15, r3
 8002fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fda:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fde:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80030dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ff6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ffa:	e043      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	ee07 3a90 	vmov	s15, r3
 8003002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003006:	eddf 6a38 	vldr	s13, [pc, #224]	; 80030e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800300a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800300e:	4b2f      	ldr	r3, [pc, #188]	; (80030cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003016:	ee07 3a90 	vmov	s15, r3
 800301a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800301e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003022:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80030dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800302a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800302e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800303a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800303e:	e021      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	ee07 3a90 	vmov	s15, r3
 8003046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800304a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80030e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800304e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003052:	4b1e      	ldr	r3, [pc, #120]	; (80030cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800305a:	ee07 3a90 	vmov	s15, r3
 800305e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003062:	ed97 6a02 	vldr	s12, [r7, #8]
 8003066:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80030dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800306a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800306e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003072:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800307a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800307e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003082:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003084:	4b11      	ldr	r3, [pc, #68]	; (80030cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003088:	0a5b      	lsrs	r3, r3, #9
 800308a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800308e:	3301      	adds	r3, #1
 8003090:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	ee07 3a90 	vmov	s15, r3
 8003098:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800309c:	edd7 6a07 	vldr	s13, [r7, #28]
 80030a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030a8:	ee17 3a90 	vmov	r3, s15
 80030ac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80030ae:	e005      	b.n	80030bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	61bb      	str	r3, [r7, #24]
      break;
 80030b4:	e002      	b.n	80030bc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80030b6:	4b07      	ldr	r3, [pc, #28]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80030b8:	61bb      	str	r3, [r7, #24]
      break;
 80030ba:	bf00      	nop
  }

  return sysclockfreq;
 80030bc:	69bb      	ldr	r3, [r7, #24]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3724      	adds	r7, #36	; 0x24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	58024400 	.word	0x58024400
 80030d0:	03d09000 	.word	0x03d09000
 80030d4:	003d0900 	.word	0x003d0900
 80030d8:	007a1200 	.word	0x007a1200
 80030dc:	46000000 	.word	0x46000000
 80030e0:	4c742400 	.word	0x4c742400
 80030e4:	4a742400 	.word	0x4a742400
 80030e8:	4af42400 	.word	0x4af42400

080030ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80030f2:	f7ff fe81 	bl	8002df8 <HAL_RCC_GetSysClockFreq>
 80030f6:	4602      	mov	r2, r0
 80030f8:	4b10      	ldr	r3, [pc, #64]	; (800313c <HAL_RCC_GetHCLKFreq+0x50>)
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	0a1b      	lsrs	r3, r3, #8
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	490f      	ldr	r1, [pc, #60]	; (8003140 <HAL_RCC_GetHCLKFreq+0x54>)
 8003104:	5ccb      	ldrb	r3, [r1, r3]
 8003106:	f003 031f 	and.w	r3, r3, #31
 800310a:	fa22 f303 	lsr.w	r3, r2, r3
 800310e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003110:	4b0a      	ldr	r3, [pc, #40]	; (800313c <HAL_RCC_GetHCLKFreq+0x50>)
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	f003 030f 	and.w	r3, r3, #15
 8003118:	4a09      	ldr	r2, [pc, #36]	; (8003140 <HAL_RCC_GetHCLKFreq+0x54>)
 800311a:	5cd3      	ldrb	r3, [r2, r3]
 800311c:	f003 031f 	and.w	r3, r3, #31
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	fa22 f303 	lsr.w	r3, r2, r3
 8003126:	4a07      	ldr	r2, [pc, #28]	; (8003144 <HAL_RCC_GetHCLKFreq+0x58>)
 8003128:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800312a:	4a07      	ldr	r2, [pc, #28]	; (8003148 <HAL_RCC_GetHCLKFreq+0x5c>)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003130:	4b04      	ldr	r3, [pc, #16]	; (8003144 <HAL_RCC_GetHCLKFreq+0x58>)
 8003132:	681b      	ldr	r3, [r3, #0]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	58024400 	.word	0x58024400
 8003140:	080079bc 	.word	0x080079bc
 8003144:	24000110 	.word	0x24000110
 8003148:	2400010c 	.word	0x2400010c

0800314c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003150:	f7ff ffcc 	bl	80030ec <HAL_RCC_GetHCLKFreq>
 8003154:	4602      	mov	r2, r0
 8003156:	4b06      	ldr	r3, [pc, #24]	; (8003170 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	091b      	lsrs	r3, r3, #4
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	4904      	ldr	r1, [pc, #16]	; (8003174 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003162:	5ccb      	ldrb	r3, [r1, r3]
 8003164:	f003 031f 	and.w	r3, r3, #31
 8003168:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800316c:	4618      	mov	r0, r3
 800316e:	bd80      	pop	{r7, pc}
 8003170:	58024400 	.word	0x58024400
 8003174:	080079bc 	.word	0x080079bc

08003178 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800317c:	f7ff ffb6 	bl	80030ec <HAL_RCC_GetHCLKFreq>
 8003180:	4602      	mov	r2, r0
 8003182:	4b06      	ldr	r3, [pc, #24]	; (800319c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	0a1b      	lsrs	r3, r3, #8
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	4904      	ldr	r1, [pc, #16]	; (80031a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800318e:	5ccb      	ldrb	r3, [r1, r3]
 8003190:	f003 031f 	and.w	r3, r3, #31
 8003194:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003198:	4618      	mov	r0, r3
 800319a:	bd80      	pop	{r7, pc}
 800319c:	58024400 	.word	0x58024400
 80031a0:	080079bc 	.word	0x080079bc

080031a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031a8:	b0c8      	sub	sp, #288	; 0x120
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031b0:	2300      	movs	r3, #0
 80031b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031b6:	2300      	movs	r3, #0
 80031b8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80031c8:	2500      	movs	r5, #0
 80031ca:	ea54 0305 	orrs.w	r3, r4, r5
 80031ce:	d049      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80031d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80031da:	d02f      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80031dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80031e0:	d828      	bhi.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80031e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031e6:	d01a      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80031e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031ec:	d822      	bhi.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80031f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031f6:	d007      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80031f8:	e01c      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031fa:	4ba7      	ldr	r3, [pc, #668]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fe:	4aa6      	ldr	r2, [pc, #664]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003204:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003206:	e01a      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003208:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800320c:	3308      	adds	r3, #8
 800320e:	2102      	movs	r1, #2
 8003210:	4618      	mov	r0, r3
 8003212:	f001 fc43 	bl	8004a9c <RCCEx_PLL2_Config>
 8003216:	4603      	mov	r3, r0
 8003218:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800321c:	e00f      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800321e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003222:	3328      	adds	r3, #40	; 0x28
 8003224:	2102      	movs	r1, #2
 8003226:	4618      	mov	r0, r3
 8003228:	f001 fcea 	bl	8004c00 <RCCEx_PLL3_Config>
 800322c:	4603      	mov	r3, r0
 800322e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003232:	e004      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800323a:	e000      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800323c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800323e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10a      	bne.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003246:	4b94      	ldr	r3, [pc, #592]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800324a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800324e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003254:	4a90      	ldr	r2, [pc, #576]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003256:	430b      	orrs	r3, r1
 8003258:	6513      	str	r3, [r2, #80]	; 0x50
 800325a:	e003      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800325c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003260:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003264:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800326c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003270:	f04f 0900 	mov.w	r9, #0
 8003274:	ea58 0309 	orrs.w	r3, r8, r9
 8003278:	d047      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800327a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800327e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003280:	2b04      	cmp	r3, #4
 8003282:	d82a      	bhi.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003284:	a201      	add	r2, pc, #4	; (adr r2, 800328c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328a:	bf00      	nop
 800328c:	080032a1 	.word	0x080032a1
 8003290:	080032af 	.word	0x080032af
 8003294:	080032c5 	.word	0x080032c5
 8003298:	080032e3 	.word	0x080032e3
 800329c:	080032e3 	.word	0x080032e3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032a0:	4b7d      	ldr	r3, [pc, #500]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a4:	4a7c      	ldr	r2, [pc, #496]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032ac:	e01a      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032b2:	3308      	adds	r3, #8
 80032b4:	2100      	movs	r1, #0
 80032b6:	4618      	mov	r0, r3
 80032b8:	f001 fbf0 	bl	8004a9c <RCCEx_PLL2_Config>
 80032bc:	4603      	mov	r3, r0
 80032be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032c2:	e00f      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80032c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032c8:	3328      	adds	r3, #40	; 0x28
 80032ca:	2100      	movs	r1, #0
 80032cc:	4618      	mov	r0, r3
 80032ce:	f001 fc97 	bl	8004c00 <RCCEx_PLL3_Config>
 80032d2:	4603      	mov	r3, r0
 80032d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032d8:	e004      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80032e0:	e000      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80032e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10a      	bne.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032ec:	4b6a      	ldr	r3, [pc, #424]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032f0:	f023 0107 	bic.w	r1, r3, #7
 80032f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fa:	4a67      	ldr	r2, [pc, #412]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032fc:	430b      	orrs	r3, r1
 80032fe:	6513      	str	r3, [r2, #80]	; 0x50
 8003300:	e003      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003302:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003306:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800330a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800330e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003312:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003316:	f04f 0b00 	mov.w	fp, #0
 800331a:	ea5a 030b 	orrs.w	r3, sl, fp
 800331e:	d054      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8003320:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003326:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800332a:	d036      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800332c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003330:	d82f      	bhi.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003336:	d032      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003338:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800333c:	d829      	bhi.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800333e:	2bc0      	cmp	r3, #192	; 0xc0
 8003340:	d02f      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003342:	2bc0      	cmp	r3, #192	; 0xc0
 8003344:	d825      	bhi.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003346:	2b80      	cmp	r3, #128	; 0x80
 8003348:	d018      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800334a:	2b80      	cmp	r3, #128	; 0x80
 800334c:	d821      	bhi.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800334e:	2b00      	cmp	r3, #0
 8003350:	d002      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003352:	2b40      	cmp	r3, #64	; 0x40
 8003354:	d007      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003356:	e01c      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003358:	4b4f      	ldr	r3, [pc, #316]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800335a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335c:	4a4e      	ldr	r2, [pc, #312]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800335e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003362:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003364:	e01e      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003366:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800336a:	3308      	adds	r3, #8
 800336c:	2100      	movs	r1, #0
 800336e:	4618      	mov	r0, r3
 8003370:	f001 fb94 	bl	8004a9c <RCCEx_PLL2_Config>
 8003374:	4603      	mov	r3, r0
 8003376:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800337a:	e013      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800337c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003380:	3328      	adds	r3, #40	; 0x28
 8003382:	2100      	movs	r1, #0
 8003384:	4618      	mov	r0, r3
 8003386:	f001 fc3b 	bl	8004c00 <RCCEx_PLL3_Config>
 800338a:	4603      	mov	r3, r0
 800338c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003390:	e008      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003398:	e004      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800339a:	bf00      	nop
 800339c:	e002      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800339e:	bf00      	nop
 80033a0:	e000      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80033a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10a      	bne.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80033ac:	4b3a      	ldr	r3, [pc, #232]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033b0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80033b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ba:	4a37      	ldr	r2, [pc, #220]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033bc:	430b      	orrs	r3, r1
 80033be:	6513      	str	r3, [r2, #80]	; 0x50
 80033c0:	e003      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033c6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80033ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80033d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80033da:	2300      	movs	r3, #0
 80033dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80033e0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80033e4:	460b      	mov	r3, r1
 80033e6:	4313      	orrs	r3, r2
 80033e8:	d05c      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80033ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033f0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80033f4:	d03b      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80033f6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80033fa:	d834      	bhi.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80033fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003400:	d037      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8003402:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003406:	d82e      	bhi.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003408:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800340c:	d033      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800340e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003412:	d828      	bhi.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003414:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003418:	d01a      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800341a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800341e:	d822      	bhi.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003428:	d007      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800342a:	e01c      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800342c:	4b1a      	ldr	r3, [pc, #104]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800342e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003430:	4a19      	ldr	r2, [pc, #100]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003432:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003436:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003438:	e01e      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800343a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800343e:	3308      	adds	r3, #8
 8003440:	2100      	movs	r1, #0
 8003442:	4618      	mov	r0, r3
 8003444:	f001 fb2a 	bl	8004a9c <RCCEx_PLL2_Config>
 8003448:	4603      	mov	r3, r0
 800344a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800344e:	e013      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003450:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003454:	3328      	adds	r3, #40	; 0x28
 8003456:	2100      	movs	r1, #0
 8003458:	4618      	mov	r0, r3
 800345a:	f001 fbd1 	bl	8004c00 <RCCEx_PLL3_Config>
 800345e:	4603      	mov	r3, r0
 8003460:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003464:	e008      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800346c:	e004      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800346e:	bf00      	nop
 8003470:	e002      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003472:	bf00      	nop
 8003474:	e000      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003476:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003478:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10d      	bne.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003480:	4b05      	ldr	r3, [pc, #20]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003484:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8003488:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800348c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800348e:	4a02      	ldr	r2, [pc, #8]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003490:	430b      	orrs	r3, r1
 8003492:	6513      	str	r3, [r2, #80]	; 0x50
 8003494:	e006      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003496:	bf00      	nop
 8003498:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800349c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034a0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80034a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ac:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80034b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80034b4:	2300      	movs	r3, #0
 80034b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80034ba:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80034be:	460b      	mov	r3, r1
 80034c0:	4313      	orrs	r3, r2
 80034c2:	d03a      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80034c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ca:	2b30      	cmp	r3, #48	; 0x30
 80034cc:	d01f      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80034ce:	2b30      	cmp	r3, #48	; 0x30
 80034d0:	d819      	bhi.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80034d2:	2b20      	cmp	r3, #32
 80034d4:	d00c      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80034d6:	2b20      	cmp	r3, #32
 80034d8:	d815      	bhi.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d019      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80034de:	2b10      	cmp	r3, #16
 80034e0:	d111      	bne.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034e2:	4bae      	ldr	r3, [pc, #696]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e6:	4aad      	ldr	r2, [pc, #692]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80034ee:	e011      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80034f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034f4:	3308      	adds	r3, #8
 80034f6:	2102      	movs	r1, #2
 80034f8:	4618      	mov	r0, r3
 80034fa:	f001 facf 	bl	8004a9c <RCCEx_PLL2_Config>
 80034fe:	4603      	mov	r3, r0
 8003500:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003504:	e006      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800350c:	e002      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800350e:	bf00      	nop
 8003510:	e000      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003512:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003514:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10a      	bne.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800351c:	4b9f      	ldr	r3, [pc, #636]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800351e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003520:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003524:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800352a:	4a9c      	ldr	r2, [pc, #624]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800352c:	430b      	orrs	r3, r1
 800352e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003530:	e003      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003532:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003536:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800353a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800353e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003542:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003546:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800354a:	2300      	movs	r3, #0
 800354c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003550:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003554:	460b      	mov	r3, r1
 8003556:	4313      	orrs	r3, r2
 8003558:	d051      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800355a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800355e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003560:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003564:	d035      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003566:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800356a:	d82e      	bhi.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x426>
 800356c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003570:	d031      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003572:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003576:	d828      	bhi.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003578:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800357c:	d01a      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800357e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003582:	d822      	bhi.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800358c:	d007      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800358e:	e01c      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003590:	4b82      	ldr	r3, [pc, #520]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003594:	4a81      	ldr	r2, [pc, #516]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003596:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800359a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800359c:	e01c      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800359e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035a2:	3308      	adds	r3, #8
 80035a4:	2100      	movs	r1, #0
 80035a6:	4618      	mov	r0, r3
 80035a8:	f001 fa78 	bl	8004a9c <RCCEx_PLL2_Config>
 80035ac:	4603      	mov	r3, r0
 80035ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80035b2:	e011      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035b8:	3328      	adds	r3, #40	; 0x28
 80035ba:	2100      	movs	r1, #0
 80035bc:	4618      	mov	r0, r3
 80035be:	f001 fb1f 	bl	8004c00 <RCCEx_PLL3_Config>
 80035c2:	4603      	mov	r3, r0
 80035c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80035c8:	e006      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80035d0:	e002      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80035d2:	bf00      	nop
 80035d4:	e000      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80035d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10a      	bne.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80035e0:	4b6e      	ldr	r3, [pc, #440]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80035e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035ee:	4a6b      	ldr	r2, [pc, #428]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035f0:	430b      	orrs	r3, r1
 80035f2:	6513      	str	r3, [r2, #80]	; 0x50
 80035f4:	e003      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035fa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80035fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003606:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800360a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800360e:	2300      	movs	r3, #0
 8003610:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003614:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003618:	460b      	mov	r3, r1
 800361a:	4313      	orrs	r3, r2
 800361c:	d053      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800361e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003622:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003624:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003628:	d033      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800362a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800362e:	d82c      	bhi.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003630:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003634:	d02f      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003636:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800363a:	d826      	bhi.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800363c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003640:	d02b      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003642:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003646:	d820      	bhi.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003648:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800364c:	d012      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800364e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003652:	d81a      	bhi.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003654:	2b00      	cmp	r3, #0
 8003656:	d022      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800365c:	d115      	bne.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800365e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003662:	3308      	adds	r3, #8
 8003664:	2101      	movs	r1, #1
 8003666:	4618      	mov	r0, r3
 8003668:	f001 fa18 	bl	8004a9c <RCCEx_PLL2_Config>
 800366c:	4603      	mov	r3, r0
 800366e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003672:	e015      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003674:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003678:	3328      	adds	r3, #40	; 0x28
 800367a:	2101      	movs	r1, #1
 800367c:	4618      	mov	r0, r3
 800367e:	f001 fabf 	bl	8004c00 <RCCEx_PLL3_Config>
 8003682:	4603      	mov	r3, r0
 8003684:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003688:	e00a      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003690:	e006      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003692:	bf00      	nop
 8003694:	e004      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003696:	bf00      	nop
 8003698:	e002      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800369a:	bf00      	nop
 800369c:	e000      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800369e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10a      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80036a8:	4b3c      	ldr	r3, [pc, #240]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ac:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80036b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036b6:	4a39      	ldr	r2, [pc, #228]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036b8:	430b      	orrs	r3, r1
 80036ba:	6513      	str	r3, [r2, #80]	; 0x50
 80036bc:	e003      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036be:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036c2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80036c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ce:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80036d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80036d6:	2300      	movs	r3, #0
 80036d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80036dc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80036e0:	460b      	mov	r3, r1
 80036e2:	4313      	orrs	r3, r2
 80036e4:	d060      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80036e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80036ee:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80036f2:	d039      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80036f4:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80036f8:	d832      	bhi.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80036fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036fe:	d035      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003700:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003704:	d82c      	bhi.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800370a:	d031      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800370c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003710:	d826      	bhi.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003712:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003716:	d02d      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003718:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800371c:	d820      	bhi.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800371e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003722:	d012      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003724:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003728:	d81a      	bhi.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800372a:	2b00      	cmp	r3, #0
 800372c:	d024      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800372e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003732:	d115      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003734:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003738:	3308      	adds	r3, #8
 800373a:	2101      	movs	r1, #1
 800373c:	4618      	mov	r0, r3
 800373e:	f001 f9ad 	bl	8004a9c <RCCEx_PLL2_Config>
 8003742:	4603      	mov	r3, r0
 8003744:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003748:	e017      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800374a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800374e:	3328      	adds	r3, #40	; 0x28
 8003750:	2101      	movs	r1, #1
 8003752:	4618      	mov	r0, r3
 8003754:	f001 fa54 	bl	8004c00 <RCCEx_PLL3_Config>
 8003758:	4603      	mov	r3, r0
 800375a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800375e:	e00c      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003766:	e008      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003768:	bf00      	nop
 800376a:	e006      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800376c:	bf00      	nop
 800376e:	e004      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003770:	bf00      	nop
 8003772:	e002      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003774:	bf00      	nop
 8003776:	e000      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003778:	bf00      	nop
    }

    if (ret == HAL_OK)
 800377a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10e      	bne.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003782:	4b06      	ldr	r3, [pc, #24]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003786:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800378a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800378e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003792:	4a02      	ldr	r2, [pc, #8]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003794:	430b      	orrs	r3, r1
 8003796:	6593      	str	r3, [r2, #88]	; 0x58
 8003798:	e006      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800379a:	bf00      	nop
 800379c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037a4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80037a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80037b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80037b8:	2300      	movs	r3, #0
 80037ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80037be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80037c2:	460b      	mov	r3, r1
 80037c4:	4313      	orrs	r3, r2
 80037c6:	d037      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80037c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037d2:	d00e      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80037d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037d8:	d816      	bhi.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d018      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80037de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037e2:	d111      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037e4:	4bc4      	ldr	r3, [pc, #784]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e8:	4ac3      	ldr	r2, [pc, #780]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80037f0:	e00f      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037f6:	3308      	adds	r3, #8
 80037f8:	2101      	movs	r1, #1
 80037fa:	4618      	mov	r0, r3
 80037fc:	f001 f94e 	bl	8004a9c <RCCEx_PLL2_Config>
 8003800:	4603      	mov	r3, r0
 8003802:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003806:	e004      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800380e:	e000      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003810:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003812:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10a      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800381a:	4bb7      	ldr	r3, [pc, #732]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800381c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800381e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003822:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003826:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003828:	4ab3      	ldr	r2, [pc, #716]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800382a:	430b      	orrs	r3, r1
 800382c:	6513      	str	r3, [r2, #80]	; 0x50
 800382e:	e003      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003830:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003834:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003838:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800383c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003840:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003844:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003848:	2300      	movs	r3, #0
 800384a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800384e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003852:	460b      	mov	r3, r1
 8003854:	4313      	orrs	r3, r2
 8003856:	d039      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003858:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800385c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800385e:	2b03      	cmp	r3, #3
 8003860:	d81c      	bhi.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003862:	a201      	add	r2, pc, #4	; (adr r2, 8003868 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003868:	080038a5 	.word	0x080038a5
 800386c:	08003879 	.word	0x08003879
 8003870:	08003887 	.word	0x08003887
 8003874:	080038a5 	.word	0x080038a5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003878:	4b9f      	ldr	r3, [pc, #636]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800387a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387c:	4a9e      	ldr	r2, [pc, #632]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800387e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003882:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003884:	e00f      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003886:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800388a:	3308      	adds	r3, #8
 800388c:	2102      	movs	r1, #2
 800388e:	4618      	mov	r0, r3
 8003890:	f001 f904 	bl	8004a9c <RCCEx_PLL2_Config>
 8003894:	4603      	mov	r3, r0
 8003896:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800389a:	e004      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80038a2:	e000      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80038a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038a6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10a      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80038ae:	4b92      	ldr	r3, [pc, #584]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038b2:	f023 0103 	bic.w	r1, r3, #3
 80038b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038bc:	4a8e      	ldr	r2, [pc, #568]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038be:	430b      	orrs	r3, r1
 80038c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038c2:	e003      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038c8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80038d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038dc:	2300      	movs	r3, #0
 80038de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80038e2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80038e6:	460b      	mov	r3, r1
 80038e8:	4313      	orrs	r3, r2
 80038ea:	f000 8099 	beq.w	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038ee:	4b83      	ldr	r3, [pc, #524]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a82      	ldr	r2, [pc, #520]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80038f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038fa:	f7fd fbb5 	bl	8001068 <HAL_GetTick>
 80038fe:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003902:	e00b      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003904:	f7fd fbb0 	bl	8001068 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b64      	cmp	r3, #100	; 0x64
 8003912:	d903      	bls.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800391a:	e005      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800391c:	4b77      	ldr	r3, [pc, #476]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0ed      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003928:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800392c:	2b00      	cmp	r3, #0
 800392e:	d173      	bne.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003930:	4b71      	ldr	r3, [pc, #452]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003932:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003934:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003938:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800393c:	4053      	eors	r3, r2
 800393e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003942:	2b00      	cmp	r3, #0
 8003944:	d015      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003946:	4b6c      	ldr	r3, [pc, #432]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800394e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003952:	4b69      	ldr	r3, [pc, #420]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003956:	4a68      	ldr	r2, [pc, #416]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800395c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800395e:	4b66      	ldr	r3, [pc, #408]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003962:	4a65      	ldr	r2, [pc, #404]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003964:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003968:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800396a:	4a63      	ldr	r2, [pc, #396]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800396c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003970:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003972:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003976:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800397a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800397e:	d118      	bne.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003980:	f7fd fb72 	bl	8001068 <HAL_GetTick>
 8003984:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003988:	e00d      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800398a:	f7fd fb6d 	bl	8001068 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003994:	1ad2      	subs	r2, r2, r3
 8003996:	f241 3388 	movw	r3, #5000	; 0x1388
 800399a:	429a      	cmp	r2, r3
 800399c:	d903      	bls.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 80039a4:	e005      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039a6:	4b54      	ldr	r3, [pc, #336]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d0eb      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80039b2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d129      	bne.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80039c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039ca:	d10e      	bne.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x846>
 80039cc:	4b4a      	ldr	r3, [pc, #296]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80039d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80039dc:	091a      	lsrs	r2, r3, #4
 80039de:	4b48      	ldr	r3, [pc, #288]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80039e0:	4013      	ands	r3, r2
 80039e2:	4a45      	ldr	r2, [pc, #276]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039e4:	430b      	orrs	r3, r1
 80039e6:	6113      	str	r3, [r2, #16]
 80039e8:	e005      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80039ea:	4b43      	ldr	r3, [pc, #268]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	4a42      	ldr	r2, [pc, #264]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039f0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80039f4:	6113      	str	r3, [r2, #16]
 80039f6:	4b40      	ldr	r3, [pc, #256]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039f8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80039fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003a02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a06:	4a3c      	ldr	r2, [pc, #240]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a08:	430b      	orrs	r3, r1
 8003a0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a0c:	e008      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a0e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a12:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8003a16:	e003      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a18:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a1c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003a20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a28:	f002 0301 	and.w	r3, r2, #1
 8003a2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a30:	2300      	movs	r3, #0
 8003a32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a36:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	f000 8090 	beq.w	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003a42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a4a:	2b28      	cmp	r3, #40	; 0x28
 8003a4c:	d870      	bhi.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003a4e:	a201      	add	r2, pc, #4	; (adr r2, 8003a54 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a54:	08003b39 	.word	0x08003b39
 8003a58:	08003b31 	.word	0x08003b31
 8003a5c:	08003b31 	.word	0x08003b31
 8003a60:	08003b31 	.word	0x08003b31
 8003a64:	08003b31 	.word	0x08003b31
 8003a68:	08003b31 	.word	0x08003b31
 8003a6c:	08003b31 	.word	0x08003b31
 8003a70:	08003b31 	.word	0x08003b31
 8003a74:	08003b05 	.word	0x08003b05
 8003a78:	08003b31 	.word	0x08003b31
 8003a7c:	08003b31 	.word	0x08003b31
 8003a80:	08003b31 	.word	0x08003b31
 8003a84:	08003b31 	.word	0x08003b31
 8003a88:	08003b31 	.word	0x08003b31
 8003a8c:	08003b31 	.word	0x08003b31
 8003a90:	08003b31 	.word	0x08003b31
 8003a94:	08003b1b 	.word	0x08003b1b
 8003a98:	08003b31 	.word	0x08003b31
 8003a9c:	08003b31 	.word	0x08003b31
 8003aa0:	08003b31 	.word	0x08003b31
 8003aa4:	08003b31 	.word	0x08003b31
 8003aa8:	08003b31 	.word	0x08003b31
 8003aac:	08003b31 	.word	0x08003b31
 8003ab0:	08003b31 	.word	0x08003b31
 8003ab4:	08003b39 	.word	0x08003b39
 8003ab8:	08003b31 	.word	0x08003b31
 8003abc:	08003b31 	.word	0x08003b31
 8003ac0:	08003b31 	.word	0x08003b31
 8003ac4:	08003b31 	.word	0x08003b31
 8003ac8:	08003b31 	.word	0x08003b31
 8003acc:	08003b31 	.word	0x08003b31
 8003ad0:	08003b31 	.word	0x08003b31
 8003ad4:	08003b39 	.word	0x08003b39
 8003ad8:	08003b31 	.word	0x08003b31
 8003adc:	08003b31 	.word	0x08003b31
 8003ae0:	08003b31 	.word	0x08003b31
 8003ae4:	08003b31 	.word	0x08003b31
 8003ae8:	08003b31 	.word	0x08003b31
 8003aec:	08003b31 	.word	0x08003b31
 8003af0:	08003b31 	.word	0x08003b31
 8003af4:	08003b39 	.word	0x08003b39
 8003af8:	58024400 	.word	0x58024400
 8003afc:	58024800 	.word	0x58024800
 8003b00:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b08:	3308      	adds	r3, #8
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 ffc5 	bl	8004a9c <RCCEx_PLL2_Config>
 8003b12:	4603      	mov	r3, r0
 8003b14:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003b18:	e00f      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b1e:	3328      	adds	r3, #40	; 0x28
 8003b20:	2101      	movs	r1, #1
 8003b22:	4618      	mov	r0, r3
 8003b24:	f001 f86c 	bl	8004c00 <RCCEx_PLL3_Config>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003b2e:	e004      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003b36:	e000      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003b38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b3a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10b      	bne.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003b42:	4bc0      	ldr	r3, [pc, #768]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b46:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003b4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b52:	4abc      	ldr	r2, [pc, #752]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003b54:	430b      	orrs	r3, r1
 8003b56:	6553      	str	r3, [r2, #84]	; 0x54
 8003b58:	e003      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b5a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b5e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003b62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6a:	f002 0302 	and.w	r3, r2, #2
 8003b6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b72:	2300      	movs	r3, #0
 8003b74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003b78:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	d043      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003b82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b8a:	2b05      	cmp	r3, #5
 8003b8c:	d824      	bhi.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8003b8e:	a201      	add	r2, pc, #4	; (adr r2, 8003b94 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b94:	08003be1 	.word	0x08003be1
 8003b98:	08003bad 	.word	0x08003bad
 8003b9c:	08003bc3 	.word	0x08003bc3
 8003ba0:	08003be1 	.word	0x08003be1
 8003ba4:	08003be1 	.word	0x08003be1
 8003ba8:	08003be1 	.word	0x08003be1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bb0:	3308      	adds	r3, #8
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f000 ff71 	bl	8004a9c <RCCEx_PLL2_Config>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003bc0:	e00f      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003bc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bc6:	3328      	adds	r3, #40	; 0x28
 8003bc8:	2101      	movs	r1, #1
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f001 f818 	bl	8004c00 <RCCEx_PLL3_Config>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003bd6:	e004      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003bde:	e000      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8003be0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003be2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10b      	bne.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003bea:	4b96      	ldr	r3, [pc, #600]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bee:	f023 0107 	bic.w	r1, r3, #7
 8003bf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bfa:	4a92      	ldr	r2, [pc, #584]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003bfc:	430b      	orrs	r3, r1
 8003bfe:	6553      	str	r3, [r2, #84]	; 0x54
 8003c00:	e003      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c02:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c06:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c12:	f002 0304 	and.w	r3, r2, #4
 8003c16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c20:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003c24:	460b      	mov	r3, r1
 8003c26:	4313      	orrs	r3, r2
 8003c28:	d043      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003c2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c32:	2b05      	cmp	r3, #5
 8003c34:	d824      	bhi.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003c36:	a201      	add	r2, pc, #4	; (adr r2, 8003c3c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8003c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3c:	08003c89 	.word	0x08003c89
 8003c40:	08003c55 	.word	0x08003c55
 8003c44:	08003c6b 	.word	0x08003c6b
 8003c48:	08003c89 	.word	0x08003c89
 8003c4c:	08003c89 	.word	0x08003c89
 8003c50:	08003c89 	.word	0x08003c89
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c58:	3308      	adds	r3, #8
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f000 ff1d 	bl	8004a9c <RCCEx_PLL2_Config>
 8003c62:	4603      	mov	r3, r0
 8003c64:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003c68:	e00f      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c6e:	3328      	adds	r3, #40	; 0x28
 8003c70:	2101      	movs	r1, #1
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 ffc4 	bl	8004c00 <RCCEx_PLL3_Config>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003c7e:	e004      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003c86:	e000      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8003c88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c8a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10b      	bne.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c92:	4b6c      	ldr	r3, [pc, #432]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c96:	f023 0107 	bic.w	r1, r3, #7
 8003c9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ca2:	4a68      	ldr	r2, [pc, #416]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003ca4:	430b      	orrs	r3, r1
 8003ca6:	6593      	str	r3, [r2, #88]	; 0x58
 8003ca8:	e003      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003caa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003cb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cba:	f002 0320 	and.w	r3, r2, #32
 8003cbe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003cc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ccc:	460b      	mov	r3, r1
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	d055      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003cd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cde:	d033      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003ce0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ce4:	d82c      	bhi.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cea:	d02f      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cf0:	d826      	bhi.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003cf2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003cf6:	d02b      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003cf8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003cfc:	d820      	bhi.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003cfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d02:	d012      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003d04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d08:	d81a      	bhi.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d022      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003d0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d12:	d115      	bne.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d18:	3308      	adds	r3, #8
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 febd 	bl	8004a9c <RCCEx_PLL2_Config>
 8003d22:	4603      	mov	r3, r0
 8003d24:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003d28:	e015      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d2e:	3328      	adds	r3, #40	; 0x28
 8003d30:	2102      	movs	r1, #2
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 ff64 	bl	8004c00 <RCCEx_PLL3_Config>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003d3e:	e00a      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003d46:	e006      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003d48:	bf00      	nop
 8003d4a:	e004      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003d4c:	bf00      	nop
 8003d4e:	e002      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003d50:	bf00      	nop
 8003d52:	e000      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003d54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d56:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10b      	bne.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d5e:	4b39      	ldr	r3, [pc, #228]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d62:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003d66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d6e:	4a35      	ldr	r2, [pc, #212]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003d70:	430b      	orrs	r3, r1
 8003d72:	6553      	str	r3, [r2, #84]	; 0x54
 8003d74:	e003      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d76:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d7a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003d7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d86:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003d8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d8e:	2300      	movs	r3, #0
 8003d90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003d94:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003d98:	460b      	mov	r3, r1
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	d058      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003d9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003da2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003da6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003daa:	d033      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003dac:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003db0:	d82c      	bhi.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003db6:	d02f      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dbc:	d826      	bhi.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003dbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dc2:	d02b      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003dc4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dc8:	d820      	bhi.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003dca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dce:	d012      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003dd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dd4:	d81a      	bhi.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d022      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8003dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dde:	d115      	bne.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003de0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003de4:	3308      	adds	r3, #8
 8003de6:	2100      	movs	r1, #0
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 fe57 	bl	8004a9c <RCCEx_PLL2_Config>
 8003dee:	4603      	mov	r3, r0
 8003df0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003df4:	e015      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dfa:	3328      	adds	r3, #40	; 0x28
 8003dfc:	2102      	movs	r1, #2
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 fefe 	bl	8004c00 <RCCEx_PLL3_Config>
 8003e04:	4603      	mov	r3, r0
 8003e06:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003e0a:	e00a      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003e12:	e006      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003e14:	bf00      	nop
 8003e16:	e004      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003e18:	bf00      	nop
 8003e1a:	e002      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003e1c:	bf00      	nop
 8003e1e:	e000      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003e20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e22:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10e      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e2a:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e2e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003e32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e3a:	4a02      	ldr	r2, [pc, #8]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003e3c:	430b      	orrs	r3, r1
 8003e3e:	6593      	str	r3, [r2, #88]	; 0x58
 8003e40:	e006      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8003e42:	bf00      	nop
 8003e44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e48:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e4c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003e50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e58:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003e5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e60:	2300      	movs	r3, #0
 8003e62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e66:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	d055      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003e70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e74:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e78:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003e7c:	d033      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003e7e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003e82:	d82c      	bhi.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003e84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e88:	d02f      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003e8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e8e:	d826      	bhi.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003e90:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003e94:	d02b      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003e96:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003e9a:	d820      	bhi.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003e9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ea0:	d012      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8003ea2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ea6:	d81a      	bhi.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d022      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003eac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eb0:	d115      	bne.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003eb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eb6:	3308      	adds	r3, #8
 8003eb8:	2100      	movs	r1, #0
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 fdee 	bl	8004a9c <RCCEx_PLL2_Config>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003ec6:	e015      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ecc:	3328      	adds	r3, #40	; 0x28
 8003ece:	2102      	movs	r1, #2
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 fe95 	bl	8004c00 <RCCEx_PLL3_Config>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003edc:	e00a      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003ee4:	e006      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003ee6:	bf00      	nop
 8003ee8:	e004      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003eea:	bf00      	nop
 8003eec:	e002      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003eee:	bf00      	nop
 8003ef0:	e000      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003ef2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ef4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10b      	bne.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003efc:	4ba1      	ldr	r3, [pc, #644]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f00:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003f04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f08:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003f0c:	4a9d      	ldr	r2, [pc, #628]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003f0e:	430b      	orrs	r3, r1
 8003f10:	6593      	str	r3, [r2, #88]	; 0x58
 8003f12:	e003      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f14:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f18:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003f1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f24:	f002 0308 	and.w	r3, r2, #8
 8003f28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003f32:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003f36:	460b      	mov	r3, r1
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	d01e      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003f3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f48:	d10c      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003f4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f4e:	3328      	adds	r3, #40	; 0x28
 8003f50:	2102      	movs	r1, #2
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 fe54 	bl	8004c00 <RCCEx_PLL3_Config>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d002      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003f64:	4b87      	ldr	r3, [pc, #540]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f68:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f74:	4a83      	ldr	r2, [pc, #524]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003f76:	430b      	orrs	r3, r1
 8003f78:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f82:	f002 0310 	and.w	r3, r2, #16
 8003f86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003f90:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003f94:	460b      	mov	r3, r1
 8003f96:	4313      	orrs	r3, r2
 8003f98:	d01e      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003f9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f9e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fa6:	d10c      	bne.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003fa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fac:	3328      	adds	r3, #40	; 0x28
 8003fae:	2102      	movs	r1, #2
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f000 fe25 	bl	8004c00 <RCCEx_PLL3_Config>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d002      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fc2:	4b70      	ldr	r3, [pc, #448]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003fca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003fd2:	4a6c      	ldr	r2, [pc, #432]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003fd4:	430b      	orrs	r3, r1
 8003fd6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003fe4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003fe8:	2300      	movs	r3, #0
 8003fea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003fee:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	d03e      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003ff8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ffc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004000:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004004:	d022      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8004006:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800400a:	d81b      	bhi.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800400c:	2b00      	cmp	r3, #0
 800400e:	d003      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004014:	d00b      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8004016:	e015      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004018:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800401c:	3308      	adds	r3, #8
 800401e:	2100      	movs	r1, #0
 8004020:	4618      	mov	r0, r3
 8004022:	f000 fd3b 	bl	8004a9c <RCCEx_PLL2_Config>
 8004026:	4603      	mov	r3, r0
 8004028:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800402c:	e00f      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800402e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004032:	3328      	adds	r3, #40	; 0x28
 8004034:	2102      	movs	r1, #2
 8004036:	4618      	mov	r0, r3
 8004038:	f000 fde2 	bl	8004c00 <RCCEx_PLL3_Config>
 800403c:	4603      	mov	r3, r0
 800403e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004042:	e004      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800404a:	e000      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800404c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800404e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10b      	bne.n	800406e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004056:	4b4b      	ldr	r3, [pc, #300]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800405a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800405e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004062:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004066:	4a47      	ldr	r2, [pc, #284]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004068:	430b      	orrs	r3, r1
 800406a:	6593      	str	r3, [r2, #88]	; 0x58
 800406c:	e003      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800406e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004072:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004076:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800407a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004082:	67bb      	str	r3, [r7, #120]	; 0x78
 8004084:	2300      	movs	r3, #0
 8004086:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004088:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800408c:	460b      	mov	r3, r1
 800408e:	4313      	orrs	r3, r2
 8004090:	d03b      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004092:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800409e:	d01f      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80040a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040a4:	d818      	bhi.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80040a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040aa:	d003      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80040ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040b0:	d007      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80040b2:	e011      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040b4:	4b33      	ldr	r3, [pc, #204]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80040b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b8:	4a32      	ldr	r2, [pc, #200]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80040ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80040c0:	e00f      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040c6:	3328      	adds	r3, #40	; 0x28
 80040c8:	2101      	movs	r1, #1
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 fd98 	bl	8004c00 <RCCEx_PLL3_Config>
 80040d0:	4603      	mov	r3, r0
 80040d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80040d6:	e004      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80040de:	e000      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80040e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10b      	bne.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040ea:	4b26      	ldr	r3, [pc, #152]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80040ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ee:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80040f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fa:	4a22      	ldr	r2, [pc, #136]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80040fc:	430b      	orrs	r3, r1
 80040fe:	6553      	str	r3, [r2, #84]	; 0x54
 8004100:	e003      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004102:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004106:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800410a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800410e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004112:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004116:	673b      	str	r3, [r7, #112]	; 0x70
 8004118:	2300      	movs	r3, #0
 800411a:	677b      	str	r3, [r7, #116]	; 0x74
 800411c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004120:	460b      	mov	r3, r1
 8004122:	4313      	orrs	r3, r2
 8004124:	d034      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004126:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800412a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800412c:	2b00      	cmp	r3, #0
 800412e:	d003      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004134:	d007      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8004136:	e011      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004138:	4b12      	ldr	r3, [pc, #72]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800413a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413c:	4a11      	ldr	r2, [pc, #68]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800413e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004142:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004144:	e00e      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004146:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800414a:	3308      	adds	r3, #8
 800414c:	2102      	movs	r1, #2
 800414e:	4618      	mov	r0, r3
 8004150:	f000 fca4 	bl	8004a9c <RCCEx_PLL2_Config>
 8004154:	4603      	mov	r3, r0
 8004156:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800415a:	e003      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004162:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004164:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10d      	bne.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800416c:	4b05      	ldr	r3, [pc, #20]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800416e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004170:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004174:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800417a:	4a02      	ldr	r2, [pc, #8]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800417c:	430b      	orrs	r3, r1
 800417e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004180:	e006      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004182:	bf00      	nop
 8004184:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004188:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800418c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004190:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004198:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800419c:	66bb      	str	r3, [r7, #104]	; 0x68
 800419e:	2300      	movs	r3, #0
 80041a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041a2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80041a6:	460b      	mov	r3, r1
 80041a8:	4313      	orrs	r3, r2
 80041aa:	d00c      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80041ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041b0:	3328      	adds	r3, #40	; 0x28
 80041b2:	2102      	movs	r1, #2
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 fd23 	bl	8004c00 <RCCEx_PLL3_Config>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d002      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80041c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ce:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80041d2:	663b      	str	r3, [r7, #96]	; 0x60
 80041d4:	2300      	movs	r3, #0
 80041d6:	667b      	str	r3, [r7, #100]	; 0x64
 80041d8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80041dc:	460b      	mov	r3, r1
 80041de:	4313      	orrs	r3, r2
 80041e0:	d038      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80041e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041ee:	d018      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80041f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041f4:	d811      	bhi.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80041f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041fa:	d014      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80041fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004200:	d80b      	bhi.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004202:	2b00      	cmp	r3, #0
 8004204:	d011      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800420a:	d106      	bne.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800420c:	4bc3      	ldr	r3, [pc, #780]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800420e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004210:	4ac2      	ldr	r2, [pc, #776]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004212:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004216:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004218:	e008      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004220:	e004      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004222:	bf00      	nop
 8004224:	e002      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004226:	bf00      	nop
 8004228:	e000      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800422a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800422c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10b      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004234:	4bb9      	ldr	r3, [pc, #740]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004238:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800423c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004244:	4ab5      	ldr	r2, [pc, #724]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004246:	430b      	orrs	r3, r1
 8004248:	6553      	str	r3, [r2, #84]	; 0x54
 800424a:	e003      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800424c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004250:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004254:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004260:	65bb      	str	r3, [r7, #88]	; 0x58
 8004262:	2300      	movs	r3, #0
 8004264:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004266:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800426a:	460b      	mov	r3, r1
 800426c:	4313      	orrs	r3, r2
 800426e:	d009      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004270:	4baa      	ldr	r3, [pc, #680]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004274:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004278:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800427c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800427e:	4aa7      	ldr	r2, [pc, #668]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004280:	430b      	orrs	r3, r1
 8004282:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004284:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004290:	653b      	str	r3, [r7, #80]	; 0x50
 8004292:	2300      	movs	r3, #0
 8004294:	657b      	str	r3, [r7, #84]	; 0x54
 8004296:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800429a:	460b      	mov	r3, r1
 800429c:	4313      	orrs	r3, r2
 800429e:	d009      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042a0:	4b9e      	ldr	r3, [pc, #632]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80042a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a4:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80042a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ae:	4a9b      	ldr	r2, [pc, #620]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80042b0:	430b      	orrs	r3, r1
 80042b2:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80042b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042bc:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80042c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80042c2:	2300      	movs	r3, #0
 80042c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042c6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80042ca:	460b      	mov	r3, r1
 80042cc:	4313      	orrs	r3, r2
 80042ce:	d009      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80042d0:	4b92      	ldr	r3, [pc, #584]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80042d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d4:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 80042d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042de:	4a8f      	ldr	r2, [pc, #572]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80042e0:	430b      	orrs	r3, r1
 80042e2:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80042e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ec:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80042f0:	643b      	str	r3, [r7, #64]	; 0x40
 80042f2:	2300      	movs	r3, #0
 80042f4:	647b      	str	r3, [r7, #68]	; 0x44
 80042f6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80042fa:	460b      	mov	r3, r1
 80042fc:	4313      	orrs	r3, r2
 80042fe:	d00e      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004300:	4b86      	ldr	r3, [pc, #536]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	4a85      	ldr	r2, [pc, #532]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004306:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800430a:	6113      	str	r3, [r2, #16]
 800430c:	4b83      	ldr	r3, [pc, #524]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800430e:	6919      	ldr	r1, [r3, #16]
 8004310:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004314:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004318:	4a80      	ldr	r2, [pc, #512]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800431a:	430b      	orrs	r3, r1
 800431c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800431e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004326:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800432a:	63bb      	str	r3, [r7, #56]	; 0x38
 800432c:	2300      	movs	r3, #0
 800432e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004330:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004334:	460b      	mov	r3, r1
 8004336:	4313      	orrs	r3, r2
 8004338:	d009      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800433a:	4b78      	ldr	r3, [pc, #480]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800433c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800433e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004342:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004348:	4a74      	ldr	r2, [pc, #464]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800434a:	430b      	orrs	r3, r1
 800434c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800434e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004356:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800435a:	633b      	str	r3, [r7, #48]	; 0x30
 800435c:	2300      	movs	r3, #0
 800435e:	637b      	str	r3, [r7, #52]	; 0x34
 8004360:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004364:	460b      	mov	r3, r1
 8004366:	4313      	orrs	r3, r2
 8004368:	d00a      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800436a:	4b6c      	ldr	r3, [pc, #432]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800436c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800436e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004372:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004376:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800437a:	4a68      	ldr	r2, [pc, #416]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800437c:	430b      	orrs	r3, r1
 800437e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004380:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004388:	2100      	movs	r1, #0
 800438a:	62b9      	str	r1, [r7, #40]	; 0x28
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004392:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004396:	460b      	mov	r3, r1
 8004398:	4313      	orrs	r3, r2
 800439a:	d011      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800439c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043a0:	3308      	adds	r3, #8
 80043a2:	2100      	movs	r1, #0
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 fb79 	bl	8004a9c <RCCEx_PLL2_Config>
 80043aa:	4603      	mov	r3, r0
 80043ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80043b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d003      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043bc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80043c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c8:	2100      	movs	r1, #0
 80043ca:	6239      	str	r1, [r7, #32]
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	627b      	str	r3, [r7, #36]	; 0x24
 80043d2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80043d6:	460b      	mov	r3, r1
 80043d8:	4313      	orrs	r3, r2
 80043da:	d011      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043e0:	3308      	adds	r3, #8
 80043e2:	2101      	movs	r1, #1
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 fb59 	bl	8004a9c <RCCEx_PLL2_Config>
 80043ea:	4603      	mov	r3, r0
 80043ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80043f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d003      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043fc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004400:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004408:	2100      	movs	r1, #0
 800440a:	61b9      	str	r1, [r7, #24]
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	61fb      	str	r3, [r7, #28]
 8004412:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004416:	460b      	mov	r3, r1
 8004418:	4313      	orrs	r3, r2
 800441a:	d011      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800441c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004420:	3308      	adds	r3, #8
 8004422:	2102      	movs	r1, #2
 8004424:	4618      	mov	r0, r3
 8004426:	f000 fb39 	bl	8004a9c <RCCEx_PLL2_Config>
 800442a:	4603      	mov	r3, r0
 800442c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004430:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004434:	2b00      	cmp	r3, #0
 8004436:	d003      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004438:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800443c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004440:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004448:	2100      	movs	r1, #0
 800444a:	6139      	str	r1, [r7, #16]
 800444c:	f003 0308 	and.w	r3, r3, #8
 8004450:	617b      	str	r3, [r7, #20]
 8004452:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004456:	460b      	mov	r3, r1
 8004458:	4313      	orrs	r3, r2
 800445a:	d011      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800445c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004460:	3328      	adds	r3, #40	; 0x28
 8004462:	2100      	movs	r1, #0
 8004464:	4618      	mov	r0, r3
 8004466:	f000 fbcb 	bl	8004c00 <RCCEx_PLL3_Config>
 800446a:	4603      	mov	r3, r0
 800446c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8004470:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004474:	2b00      	cmp	r3, #0
 8004476:	d003      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004478:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800447c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004480:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004488:	2100      	movs	r1, #0
 800448a:	60b9      	str	r1, [r7, #8]
 800448c:	f003 0310 	and.w	r3, r3, #16
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004496:	460b      	mov	r3, r1
 8004498:	4313      	orrs	r3, r2
 800449a:	d011      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800449c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044a0:	3328      	adds	r3, #40	; 0x28
 80044a2:	2101      	movs	r1, #1
 80044a4:	4618      	mov	r0, r3
 80044a6:	f000 fbab 	bl	8004c00 <RCCEx_PLL3_Config>
 80044aa:	4603      	mov	r3, r0
 80044ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80044b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d003      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80044bc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80044c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c8:	2100      	movs	r1, #0
 80044ca:	6039      	str	r1, [r7, #0]
 80044cc:	f003 0320 	and.w	r3, r3, #32
 80044d0:	607b      	str	r3, [r7, #4]
 80044d2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80044d6:	460b      	mov	r3, r1
 80044d8:	4313      	orrs	r3, r2
 80044da:	d011      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044e0:	3328      	adds	r3, #40	; 0x28
 80044e2:	2102      	movs	r1, #2
 80044e4:	4618      	mov	r0, r3
 80044e6:	f000 fb8b 	bl	8004c00 <RCCEx_PLL3_Config>
 80044ea:	4603      	mov	r3, r0
 80044ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80044f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d003      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80044fc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8004500:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004504:	2b00      	cmp	r3, #0
 8004506:	d101      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8004508:	2300      	movs	r3, #0
 800450a:	e000      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
}
 800450e:	4618      	mov	r0, r3
 8004510:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8004514:	46bd      	mov	sp, r7
 8004516:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800451a:	bf00      	nop
 800451c:	58024400 	.word	0x58024400

08004520 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004524:	f7fe fde2 	bl	80030ec <HAL_RCC_GetHCLKFreq>
 8004528:	4602      	mov	r2, r0
 800452a:	4b06      	ldr	r3, [pc, #24]	; (8004544 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	091b      	lsrs	r3, r3, #4
 8004530:	f003 0307 	and.w	r3, r3, #7
 8004534:	4904      	ldr	r1, [pc, #16]	; (8004548 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004536:	5ccb      	ldrb	r3, [r1, r3]
 8004538:	f003 031f 	and.w	r3, r3, #31
 800453c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004540:	4618      	mov	r0, r3
 8004542:	bd80      	pop	{r7, pc}
 8004544:	58024400 	.word	0x58024400
 8004548:	080079bc 	.word	0x080079bc

0800454c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800454c:	b480      	push	{r7}
 800454e:	b089      	sub	sp, #36	; 0x24
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004554:	4ba1      	ldr	r3, [pc, #644]	; (80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004558:	f003 0303 	and.w	r3, r3, #3
 800455c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800455e:	4b9f      	ldr	r3, [pc, #636]	; (80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004562:	0b1b      	lsrs	r3, r3, #12
 8004564:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004568:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800456a:	4b9c      	ldr	r3, [pc, #624]	; (80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800456c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456e:	091b      	lsrs	r3, r3, #4
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004576:	4b99      	ldr	r3, [pc, #612]	; (80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800457a:	08db      	lsrs	r3, r3, #3
 800457c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	fb02 f303 	mul.w	r3, r2, r3
 8004586:	ee07 3a90 	vmov	s15, r3
 800458a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800458e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 8111 	beq.w	80047bc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	2b02      	cmp	r3, #2
 800459e:	f000 8083 	beq.w	80046a8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	f200 80a1 	bhi.w	80046ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d003      	beq.n	80045b8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d056      	beq.n	8004664 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80045b6:	e099      	b.n	80046ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045b8:	4b88      	ldr	r3, [pc, #544]	; (80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0320 	and.w	r3, r3, #32
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d02d      	beq.n	8004620 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80045c4:	4b85      	ldr	r3, [pc, #532]	; (80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	08db      	lsrs	r3, r3, #3
 80045ca:	f003 0303 	and.w	r3, r3, #3
 80045ce:	4a84      	ldr	r2, [pc, #528]	; (80047e0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80045d0:	fa22 f303 	lsr.w	r3, r2, r3
 80045d4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	ee07 3a90 	vmov	s15, r3
 80045dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	ee07 3a90 	vmov	s15, r3
 80045e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ee:	4b7b      	ldr	r3, [pc, #492]	; (80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045f6:	ee07 3a90 	vmov	s15, r3
 80045fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004602:	eddf 5a78 	vldr	s11, [pc, #480]	; 80047e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800460a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800460e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800461a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800461e:	e087      	b.n	8004730 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	ee07 3a90 	vmov	s15, r3
 8004626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800462a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80047e8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800462e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004632:	4b6a      	ldr	r3, [pc, #424]	; (80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800463a:	ee07 3a90 	vmov	s15, r3
 800463e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004642:	ed97 6a03 	vldr	s12, [r7, #12]
 8004646:	eddf 5a67 	vldr	s11, [pc, #412]	; 80047e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800464a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800464e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800465a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800465e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004662:	e065      	b.n	8004730 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	ee07 3a90 	vmov	s15, r3
 800466a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800466e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80047ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004676:	4b59      	ldr	r3, [pc, #356]	; (80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800467e:	ee07 3a90 	vmov	s15, r3
 8004682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004686:	ed97 6a03 	vldr	s12, [r7, #12]
 800468a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80047e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800468e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004696:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800469a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800469e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046a6:	e043      	b.n	8004730 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	ee07 3a90 	vmov	s15, r3
 80046ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046b2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80047f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80046b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ba:	4b48      	ldr	r3, [pc, #288]	; (80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046c2:	ee07 3a90 	vmov	s15, r3
 80046c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80046ce:	eddf 5a45 	vldr	s11, [pc, #276]	; 80047e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046ea:	e021      	b.n	8004730 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	ee07 3a90 	vmov	s15, r3
 80046f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046f6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80047ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80046fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046fe:	4b37      	ldr	r3, [pc, #220]	; (80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004706:	ee07 3a90 	vmov	s15, r3
 800470a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800470e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004712:	eddf 5a34 	vldr	s11, [pc, #208]	; 80047e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800471a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800471e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800472a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800472e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004730:	4b2a      	ldr	r3, [pc, #168]	; (80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004734:	0a5b      	lsrs	r3, r3, #9
 8004736:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800473a:	ee07 3a90 	vmov	s15, r3
 800473e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004742:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004746:	ee37 7a87 	vadd.f32	s14, s15, s14
 800474a:	edd7 6a07 	vldr	s13, [r7, #28]
 800474e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004752:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004756:	ee17 2a90 	vmov	r2, s15
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800475e:	4b1f      	ldr	r3, [pc, #124]	; (80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004762:	0c1b      	lsrs	r3, r3, #16
 8004764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004768:	ee07 3a90 	vmov	s15, r3
 800476c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004770:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004774:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004778:	edd7 6a07 	vldr	s13, [r7, #28]
 800477c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004784:	ee17 2a90 	vmov	r2, s15
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800478c:	4b13      	ldr	r3, [pc, #76]	; (80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800478e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004790:	0e1b      	lsrs	r3, r3, #24
 8004792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004796:	ee07 3a90 	vmov	s15, r3
 800479a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800479e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80047aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047b2:	ee17 2a90 	vmov	r2, s15
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80047ba:	e008      	b.n	80047ce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	609a      	str	r2, [r3, #8]
}
 80047ce:	bf00      	nop
 80047d0:	3724      	adds	r7, #36	; 0x24
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	58024400 	.word	0x58024400
 80047e0:	03d09000 	.word	0x03d09000
 80047e4:	46000000 	.word	0x46000000
 80047e8:	4c742400 	.word	0x4c742400
 80047ec:	4a742400 	.word	0x4a742400
 80047f0:	4af42400 	.word	0x4af42400

080047f4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b089      	sub	sp, #36	; 0x24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047fc:	4ba1      	ldr	r3, [pc, #644]	; (8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004800:	f003 0303 	and.w	r3, r3, #3
 8004804:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004806:	4b9f      	ldr	r3, [pc, #636]	; (8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480a:	0d1b      	lsrs	r3, r3, #20
 800480c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004810:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004812:	4b9c      	ldr	r3, [pc, #624]	; (8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004816:	0a1b      	lsrs	r3, r3, #8
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800481e:	4b99      	ldr	r3, [pc, #612]	; (8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004822:	08db      	lsrs	r3, r3, #3
 8004824:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	fb02 f303 	mul.w	r3, r2, r3
 800482e:	ee07 3a90 	vmov	s15, r3
 8004832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004836:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	2b00      	cmp	r3, #0
 800483e:	f000 8111 	beq.w	8004a64 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	2b02      	cmp	r3, #2
 8004846:	f000 8083 	beq.w	8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	2b02      	cmp	r3, #2
 800484e:	f200 80a1 	bhi.w	8004994 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d003      	beq.n	8004860 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d056      	beq.n	800490c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800485e:	e099      	b.n	8004994 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004860:	4b88      	ldr	r3, [pc, #544]	; (8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0320 	and.w	r3, r3, #32
 8004868:	2b00      	cmp	r3, #0
 800486a:	d02d      	beq.n	80048c8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800486c:	4b85      	ldr	r3, [pc, #532]	; (8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	08db      	lsrs	r3, r3, #3
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	4a84      	ldr	r2, [pc, #528]	; (8004a88 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004878:	fa22 f303 	lsr.w	r3, r2, r3
 800487c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	ee07 3a90 	vmov	s15, r3
 8004884:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	ee07 3a90 	vmov	s15, r3
 800488e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004896:	4b7b      	ldr	r3, [pc, #492]	; (8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800489e:	ee07 3a90 	vmov	s15, r3
 80048a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004a8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80048c6:	e087      	b.n	80049d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	ee07 3a90 	vmov	s15, r3
 80048ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004a90 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80048d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048da:	4b6a      	ldr	r3, [pc, #424]	; (8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048e2:	ee07 3a90 	vmov	s15, r3
 80048e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80048ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004a8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004906:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800490a:	e065      	b.n	80049d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	ee07 3a90 	vmov	s15, r3
 8004912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004916:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004a94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800491a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800491e:	4b59      	ldr	r3, [pc, #356]	; (8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004926:	ee07 3a90 	vmov	s15, r3
 800492a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800492e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004932:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004a8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800493a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800493e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800494a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800494e:	e043      	b.n	80049d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	ee07 3a90 	vmov	s15, r3
 8004956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800495a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004a98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800495e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004962:	4b48      	ldr	r3, [pc, #288]	; (8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800496a:	ee07 3a90 	vmov	s15, r3
 800496e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004972:	ed97 6a03 	vldr	s12, [r7, #12]
 8004976:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004a8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800497a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800497e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800498a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800498e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004992:	e021      	b.n	80049d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	ee07 3a90 	vmov	s15, r3
 800499a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800499e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004a94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80049a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049a6:	4b37      	ldr	r3, [pc, #220]	; (8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ae:	ee07 3a90 	vmov	s15, r3
 80049b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80049ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004a8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049d6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80049d8:	4b2a      	ldr	r3, [pc, #168]	; (8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049dc:	0a5b      	lsrs	r3, r3, #9
 80049de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049e2:	ee07 3a90 	vmov	s15, r3
 80049e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80049f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049fe:	ee17 2a90 	vmov	r2, s15
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004a06:	4b1f      	ldr	r3, [pc, #124]	; (8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0a:	0c1b      	lsrs	r3, r3, #16
 8004a0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a10:	ee07 3a90 	vmov	s15, r3
 8004a14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a20:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a2c:	ee17 2a90 	vmov	r2, s15
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004a34:	4b13      	ldr	r3, [pc, #76]	; (8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a38:	0e1b      	lsrs	r3, r3, #24
 8004a3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a3e:	ee07 3a90 	vmov	s15, r3
 8004a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a5a:	ee17 2a90 	vmov	r2, s15
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004a62:	e008      	b.n	8004a76 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	609a      	str	r2, [r3, #8]
}
 8004a76:	bf00      	nop
 8004a78:	3724      	adds	r7, #36	; 0x24
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	58024400 	.word	0x58024400
 8004a88:	03d09000 	.word	0x03d09000
 8004a8c:	46000000 	.word	0x46000000
 8004a90:	4c742400 	.word	0x4c742400
 8004a94:	4a742400 	.word	0x4a742400
 8004a98:	4af42400 	.word	0x4af42400

08004a9c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004aaa:	4b53      	ldr	r3, [pc, #332]	; (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aae:	f003 0303 	and.w	r3, r3, #3
 8004ab2:	2b03      	cmp	r3, #3
 8004ab4:	d101      	bne.n	8004aba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e099      	b.n	8004bee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004aba:	4b4f      	ldr	r3, [pc, #316]	; (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a4e      	ldr	r2, [pc, #312]	; (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004ac0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ac4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ac6:	f7fc facf 	bl	8001068 <HAL_GetTick>
 8004aca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004acc:	e008      	b.n	8004ae0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004ace:	f7fc facb 	bl	8001068 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d901      	bls.n	8004ae0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e086      	b.n	8004bee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ae0:	4b45      	ldr	r3, [pc, #276]	; (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1f0      	bne.n	8004ace <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004aec:	4b42      	ldr	r3, [pc, #264]	; (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	031b      	lsls	r3, r3, #12
 8004afa:	493f      	ldr	r1, [pc, #252]	; (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	628b      	str	r3, [r1, #40]	; 0x28
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	3b01      	subs	r3, #1
 8004b06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	025b      	lsls	r3, r3, #9
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	431a      	orrs	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	041b      	lsls	r3, r3, #16
 8004b1e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004b22:	431a      	orrs	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	061b      	lsls	r3, r3, #24
 8004b2c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004b30:	4931      	ldr	r1, [pc, #196]	; (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004b36:	4b30      	ldr	r3, [pc, #192]	; (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	492d      	ldr	r1, [pc, #180]	; (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004b48:	4b2b      	ldr	r3, [pc, #172]	; (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4c:	f023 0220 	bic.w	r2, r3, #32
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	4928      	ldr	r1, [pc, #160]	; (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004b5a:	4b27      	ldr	r3, [pc, #156]	; (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5e:	4a26      	ldr	r2, [pc, #152]	; (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004b60:	f023 0310 	bic.w	r3, r3, #16
 8004b64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004b66:	4b24      	ldr	r3, [pc, #144]	; (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004b68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b6a:	4b24      	ldr	r3, [pc, #144]	; (8004bfc <RCCEx_PLL2_Config+0x160>)
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	69d2      	ldr	r2, [r2, #28]
 8004b72:	00d2      	lsls	r2, r2, #3
 8004b74:	4920      	ldr	r1, [pc, #128]	; (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004b7a:	4b1f      	ldr	r3, [pc, #124]	; (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7e:	4a1e      	ldr	r2, [pc, #120]	; (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004b80:	f043 0310 	orr.w	r3, r3, #16
 8004b84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d106      	bne.n	8004b9a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004b8c:	4b1a      	ldr	r3, [pc, #104]	; (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b90:	4a19      	ldr	r2, [pc, #100]	; (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004b92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b98:	e00f      	b.n	8004bba <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d106      	bne.n	8004bae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004ba0:	4b15      	ldr	r3, [pc, #84]	; (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba4:	4a14      	ldr	r2, [pc, #80]	; (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004ba6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004baa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004bac:	e005      	b.n	8004bba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004bae:	4b12      	ldr	r3, [pc, #72]	; (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb2:	4a11      	ldr	r2, [pc, #68]	; (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004bb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004bb8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004bba:	4b0f      	ldr	r3, [pc, #60]	; (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a0e      	ldr	r2, [pc, #56]	; (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004bc0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bc6:	f7fc fa4f 	bl	8001068 <HAL_GetTick>
 8004bca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004bcc:	e008      	b.n	8004be0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004bce:	f7fc fa4b 	bl	8001068 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e006      	b.n	8004bee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004be0:	4b05      	ldr	r3, [pc, #20]	; (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0f0      	beq.n	8004bce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	58024400 	.word	0x58024400
 8004bfc:	ffff0007 	.word	0xffff0007

08004c00 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c0e:	4b53      	ldr	r3, [pc, #332]	; (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c12:	f003 0303 	and.w	r3, r3, #3
 8004c16:	2b03      	cmp	r3, #3
 8004c18:	d101      	bne.n	8004c1e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e099      	b.n	8004d52 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004c1e:	4b4f      	ldr	r3, [pc, #316]	; (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a4e      	ldr	r2, [pc, #312]	; (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004c24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c2a:	f7fc fa1d 	bl	8001068 <HAL_GetTick>
 8004c2e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c30:	e008      	b.n	8004c44 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004c32:	f7fc fa19 	bl	8001068 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d901      	bls.n	8004c44 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e086      	b.n	8004d52 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c44:	4b45      	ldr	r3, [pc, #276]	; (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1f0      	bne.n	8004c32 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004c50:	4b42      	ldr	r3, [pc, #264]	; (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c54:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	051b      	lsls	r3, r3, #20
 8004c5e:	493f      	ldr	r1, [pc, #252]	; (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	628b      	str	r3, [r1, #40]	; 0x28
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	3b01      	subs	r3, #1
 8004c74:	025b      	lsls	r3, r3, #9
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	041b      	lsls	r3, r3, #16
 8004c82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c86:	431a      	orrs	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	061b      	lsls	r3, r3, #24
 8004c90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c94:	4931      	ldr	r1, [pc, #196]	; (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004c9a:	4b30      	ldr	r3, [pc, #192]	; (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	492d      	ldr	r1, [pc, #180]	; (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004cac:	4b2b      	ldr	r3, [pc, #172]	; (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	4928      	ldr	r1, [pc, #160]	; (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004cbe:	4b27      	ldr	r3, [pc, #156]	; (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc2:	4a26      	ldr	r2, [pc, #152]	; (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004cc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004cca:	4b24      	ldr	r3, [pc, #144]	; (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004ccc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cce:	4b24      	ldr	r3, [pc, #144]	; (8004d60 <RCCEx_PLL3_Config+0x160>)
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	69d2      	ldr	r2, [r2, #28]
 8004cd6:	00d2      	lsls	r2, r2, #3
 8004cd8:	4920      	ldr	r1, [pc, #128]	; (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004cde:	4b1f      	ldr	r3, [pc, #124]	; (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce2:	4a1e      	ldr	r2, [pc, #120]	; (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ce8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d106      	bne.n	8004cfe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004cf0:	4b1a      	ldr	r3, [pc, #104]	; (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf4:	4a19      	ldr	r2, [pc, #100]	; (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004cf6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004cfa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004cfc:	e00f      	b.n	8004d1e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d106      	bne.n	8004d12 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004d04:	4b15      	ldr	r3, [pc, #84]	; (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d08:	4a14      	ldr	r2, [pc, #80]	; (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004d0a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d10:	e005      	b.n	8004d1e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004d12:	4b12      	ldr	r3, [pc, #72]	; (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d16:	4a11      	ldr	r2, [pc, #68]	; (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004d18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d1c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004d1e:	4b0f      	ldr	r3, [pc, #60]	; (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a0e      	ldr	r2, [pc, #56]	; (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d2a:	f7fc f99d 	bl	8001068 <HAL_GetTick>
 8004d2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d30:	e008      	b.n	8004d44 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004d32:	f7fc f999 	bl	8001068 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d901      	bls.n	8004d44 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e006      	b.n	8004d52 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d44:	4b05      	ldr	r3, [pc, #20]	; (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d0f0      	beq.n	8004d32 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	58024400 	.word	0x58024400
 8004d60:	ffff0007 	.word	0xffff0007

08004d64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e042      	b.n	8004dfc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d106      	bne.n	8004d8e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f7fb ff9f 	bl	8000ccc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2224      	movs	r2, #36	; 0x24
 8004d92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 0201 	bic.w	r2, r2, #1
 8004da4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 fda8 	bl	80058fc <UART_SetConfig>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d101      	bne.n	8004db6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e022      	b.n	8004dfc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d002      	beq.n	8004dc4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f001 fc08 	bl	80065d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	689a      	ldr	r2, [r3, #8]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004de2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f042 0201 	orr.w	r2, r2, #1
 8004df2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f001 fc8f 	bl	8006718 <UART_CheckIdleState>
 8004dfa:	4603      	mov	r3, r0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3708      	adds	r7, #8
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b08a      	sub	sp, #40	; 0x28
 8004e08:	af02      	add	r7, sp, #8
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	603b      	str	r3, [r7, #0]
 8004e10:	4613      	mov	r3, r2
 8004e12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1a:	2b20      	cmp	r3, #32
 8004e1c:	d17b      	bne.n	8004f16 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d002      	beq.n	8004e2a <HAL_UART_Transmit+0x26>
 8004e24:	88fb      	ldrh	r3, [r7, #6]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e074      	b.n	8004f18 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2221      	movs	r2, #33	; 0x21
 8004e3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e3e:	f7fc f913 	bl	8001068 <HAL_GetTick>
 8004e42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	88fa      	ldrh	r2, [r7, #6]
 8004e48:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	88fa      	ldrh	r2, [r7, #6]
 8004e50:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e5c:	d108      	bne.n	8004e70 <HAL_UART_Transmit+0x6c>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d104      	bne.n	8004e70 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004e66:	2300      	movs	r3, #0
 8004e68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	61bb      	str	r3, [r7, #24]
 8004e6e:	e003      	b.n	8004e78 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e74:	2300      	movs	r3, #0
 8004e76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e78:	e030      	b.n	8004edc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	9300      	str	r3, [sp, #0]
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	2200      	movs	r2, #0
 8004e82:	2180      	movs	r1, #128	; 0x80
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f001 fcf1 	bl	800686c <UART_WaitOnFlagUntilTimeout>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d005      	beq.n	8004e9c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e03d      	b.n	8004f18 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10b      	bne.n	8004eba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	881b      	ldrh	r3, [r3, #0]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004eb0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	3302      	adds	r3, #2
 8004eb6:	61bb      	str	r3, [r7, #24]
 8004eb8:	e007      	b.n	8004eca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	781a      	ldrb	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1c8      	bne.n	8004e7a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	9300      	str	r3, [sp, #0]
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	2140      	movs	r1, #64	; 0x40
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f001 fcba 	bl	800686c <UART_WaitOnFlagUntilTimeout>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d005      	beq.n	8004f0a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2220      	movs	r2, #32
 8004f02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e006      	b.n	8004f18 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004f12:	2300      	movs	r3, #0
 8004f14:	e000      	b.n	8004f18 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004f16:	2302      	movs	r3, #2
  }
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3720      	adds	r7, #32
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b08a      	sub	sp, #40	; 0x28
 8004f24:	af02      	add	r7, sp, #8
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	603b      	str	r3, [r7, #0]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f36:	2b20      	cmp	r3, #32
 8004f38:	f040 80b5 	bne.w	80050a6 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d002      	beq.n	8004f48 <HAL_UART_Receive+0x28>
 8004f42:	88fb      	ldrh	r3, [r7, #6]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d101      	bne.n	8004f4c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e0ad      	b.n	80050a8 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2222      	movs	r2, #34	; 0x22
 8004f58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f62:	f7fc f881 	bl	8001068 <HAL_GetTick>
 8004f66:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	88fa      	ldrh	r2, [r7, #6]
 8004f6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	88fa      	ldrh	r2, [r7, #6]
 8004f74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f80:	d10e      	bne.n	8004fa0 <HAL_UART_Receive+0x80>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d105      	bne.n	8004f96 <HAL_UART_Receive+0x76>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004f90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004f94:	e02d      	b.n	8004ff2 <HAL_UART_Receive+0xd2>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	22ff      	movs	r2, #255	; 0xff
 8004f9a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004f9e:	e028      	b.n	8004ff2 <HAL_UART_Receive+0xd2>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10d      	bne.n	8004fc4 <HAL_UART_Receive+0xa4>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d104      	bne.n	8004fba <HAL_UART_Receive+0x9a>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	22ff      	movs	r2, #255	; 0xff
 8004fb4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004fb8:	e01b      	b.n	8004ff2 <HAL_UART_Receive+0xd2>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	227f      	movs	r2, #127	; 0x7f
 8004fbe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004fc2:	e016      	b.n	8004ff2 <HAL_UART_Receive+0xd2>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fcc:	d10d      	bne.n	8004fea <HAL_UART_Receive+0xca>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d104      	bne.n	8004fe0 <HAL_UART_Receive+0xc0>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	227f      	movs	r2, #127	; 0x7f
 8004fda:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004fde:	e008      	b.n	8004ff2 <HAL_UART_Receive+0xd2>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	223f      	movs	r2, #63	; 0x3f
 8004fe4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004fe8:	e003      	b.n	8004ff2 <HAL_UART_Receive+0xd2>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004ff8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005002:	d108      	bne.n	8005016 <HAL_UART_Receive+0xf6>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d104      	bne.n	8005016 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800500c:	2300      	movs	r3, #0
 800500e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	61bb      	str	r3, [r7, #24]
 8005014:	e003      	b.n	800501e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800501a:	2300      	movs	r3, #0
 800501c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800501e:	e036      	b.n	800508e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	2200      	movs	r2, #0
 8005028:	2120      	movs	r1, #32
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f001 fc1e 	bl	800686c <UART_WaitOnFlagUntilTimeout>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d005      	beq.n	8005042 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2220      	movs	r2, #32
 800503a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e032      	b.n	80050a8 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d10c      	bne.n	8005062 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	b29a      	uxth	r2, r3
 8005050:	8a7b      	ldrh	r3, [r7, #18]
 8005052:	4013      	ands	r3, r2
 8005054:	b29a      	uxth	r2, r3
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	3302      	adds	r3, #2
 800505e:	61bb      	str	r3, [r7, #24]
 8005060:	e00c      	b.n	800507c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005068:	b2da      	uxtb	r2, r3
 800506a:	8a7b      	ldrh	r3, [r7, #18]
 800506c:	b2db      	uxtb	r3, r3
 800506e:	4013      	ands	r3, r2
 8005070:	b2da      	uxtb	r2, r3
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	3301      	adds	r3, #1
 800507a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005082:	b29b      	uxth	r3, r3
 8005084:	3b01      	subs	r3, #1
 8005086:	b29a      	uxth	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005094:	b29b      	uxth	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1c2      	bne.n	8005020 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2220      	movs	r2, #32
 800509e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80050a2:	2300      	movs	r3, #0
 80050a4:	e000      	b.n	80050a8 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80050a6:	2302      	movs	r3, #2
  }
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3720      	adds	r7, #32
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b08a      	sub	sp, #40	; 0x28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	4613      	mov	r3, r2
 80050bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050c4:	2b20      	cmp	r3, #32
 80050c6:	d137      	bne.n	8005138 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d002      	beq.n	80050d4 <HAL_UART_Receive_IT+0x24>
 80050ce:	88fb      	ldrh	r3, [r7, #6]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d101      	bne.n	80050d8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e030      	b.n	800513a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a18      	ldr	r2, [pc, #96]	; (8005144 <HAL_UART_Receive_IT+0x94>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d01f      	beq.n	8005128 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d018      	beq.n	8005128 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	e853 3f00 	ldrex	r3, [r3]
 8005102:	613b      	str	r3, [r7, #16]
   return(result);
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800510a:	627b      	str	r3, [r7, #36]	; 0x24
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	461a      	mov	r2, r3
 8005112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005114:	623b      	str	r3, [r7, #32]
 8005116:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005118:	69f9      	ldr	r1, [r7, #28]
 800511a:	6a3a      	ldr	r2, [r7, #32]
 800511c:	e841 2300 	strex	r3, r2, [r1]
 8005120:	61bb      	str	r3, [r7, #24]
   return(result);
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1e6      	bne.n	80050f6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005128:	88fb      	ldrh	r3, [r7, #6]
 800512a:	461a      	mov	r2, r3
 800512c:	68b9      	ldr	r1, [r7, #8]
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f001 fc04 	bl	800693c <UART_Start_Receive_IT>
 8005134:	4603      	mov	r3, r0
 8005136:	e000      	b.n	800513a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005138:	2302      	movs	r3, #2
  }
}
 800513a:	4618      	mov	r0, r3
 800513c:	3728      	adds	r7, #40	; 0x28
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	58000c00 	.word	0x58000c00

08005148 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b0ba      	sub	sp, #232	; 0xe8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800516e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005172:	f640 030f 	movw	r3, #2063	; 0x80f
 8005176:	4013      	ands	r3, r2
 8005178:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800517c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005180:	2b00      	cmp	r3, #0
 8005182:	d11b      	bne.n	80051bc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005188:	f003 0320 	and.w	r3, r3, #32
 800518c:	2b00      	cmp	r3, #0
 800518e:	d015      	beq.n	80051bc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005194:	f003 0320 	and.w	r3, r3, #32
 8005198:	2b00      	cmp	r3, #0
 800519a:	d105      	bne.n	80051a8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800519c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d009      	beq.n	80051bc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 8377 	beq.w	80058a0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	4798      	blx	r3
      }
      return;
 80051ba:	e371      	b.n	80058a0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80051bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f000 8123 	beq.w	800540c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80051c6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80051ca:	4b8d      	ldr	r3, [pc, #564]	; (8005400 <HAL_UART_IRQHandler+0x2b8>)
 80051cc:	4013      	ands	r3, r2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d106      	bne.n	80051e0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80051d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80051d6:	4b8b      	ldr	r3, [pc, #556]	; (8005404 <HAL_UART_IRQHandler+0x2bc>)
 80051d8:	4013      	ands	r3, r2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	f000 8116 	beq.w	800540c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80051e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051e4:	f003 0301 	and.w	r3, r3, #1
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d011      	beq.n	8005210 <HAL_UART_IRQHandler+0xc8>
 80051ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00b      	beq.n	8005210 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2201      	movs	r2, #1
 80051fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005206:	f043 0201 	orr.w	r2, r3, #1
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005214:	f003 0302 	and.w	r3, r3, #2
 8005218:	2b00      	cmp	r3, #0
 800521a:	d011      	beq.n	8005240 <HAL_UART_IRQHandler+0xf8>
 800521c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005220:	f003 0301 	and.w	r3, r3, #1
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00b      	beq.n	8005240 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2202      	movs	r2, #2
 800522e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005236:	f043 0204 	orr.w	r2, r3, #4
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005244:	f003 0304 	and.w	r3, r3, #4
 8005248:	2b00      	cmp	r3, #0
 800524a:	d011      	beq.n	8005270 <HAL_UART_IRQHandler+0x128>
 800524c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00b      	beq.n	8005270 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2204      	movs	r2, #4
 800525e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005266:	f043 0202 	orr.w	r2, r3, #2
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005274:	f003 0308 	and.w	r3, r3, #8
 8005278:	2b00      	cmp	r3, #0
 800527a:	d017      	beq.n	80052ac <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800527c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005280:	f003 0320 	and.w	r3, r3, #32
 8005284:	2b00      	cmp	r3, #0
 8005286:	d105      	bne.n	8005294 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005288:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800528c:	4b5c      	ldr	r3, [pc, #368]	; (8005400 <HAL_UART_IRQHandler+0x2b8>)
 800528e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00b      	beq.n	80052ac <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2208      	movs	r2, #8
 800529a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a2:	f043 0208 	orr.w	r2, r3, #8
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80052ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d012      	beq.n	80052de <HAL_UART_IRQHandler+0x196>
 80052b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00c      	beq.n	80052de <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d4:	f043 0220 	orr.w	r2, r3, #32
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 82dd 	beq.w	80058a4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80052ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ee:	f003 0320 	and.w	r3, r3, #32
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d013      	beq.n	800531e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80052f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052fa:	f003 0320 	and.w	r3, r3, #32
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d105      	bne.n	800530e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005302:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d007      	beq.n	800531e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005324:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005332:	2b40      	cmp	r3, #64	; 0x40
 8005334:	d005      	beq.n	8005342 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005336:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800533a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800533e:	2b00      	cmp	r3, #0
 8005340:	d054      	beq.n	80053ec <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f001 fc1c 	bl	8006b80 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005352:	2b40      	cmp	r3, #64	; 0x40
 8005354:	d146      	bne.n	80053e4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	3308      	adds	r3, #8
 800535c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005360:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005364:	e853 3f00 	ldrex	r3, [r3]
 8005368:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800536c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005370:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005374:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	3308      	adds	r3, #8
 800537e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005382:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005386:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800538e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005392:	e841 2300 	strex	r3, r2, [r1]
 8005396:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800539a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1d9      	bne.n	8005356 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d017      	beq.n	80053dc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053b2:	4a15      	ldr	r2, [pc, #84]	; (8005408 <HAL_UART_IRQHandler+0x2c0>)
 80053b4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053bc:	4618      	mov	r0, r3
 80053be:	f7fc fab1 	bl	8001924 <HAL_DMA_Abort_IT>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d019      	beq.n	80053fc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80053d6:	4610      	mov	r0, r2
 80053d8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053da:	e00f      	b.n	80053fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 fa77 	bl	80058d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053e2:	e00b      	b.n	80053fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 fa73 	bl	80058d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053ea:	e007      	b.n	80053fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 fa6f 	bl	80058d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80053fa:	e253      	b.n	80058a4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053fc:	bf00      	nop
    return;
 80053fe:	e251      	b.n	80058a4 <HAL_UART_IRQHandler+0x75c>
 8005400:	10000001 	.word	0x10000001
 8005404:	04000120 	.word	0x04000120
 8005408:	08006c4d 	.word	0x08006c4d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005410:	2b01      	cmp	r3, #1
 8005412:	f040 81e7 	bne.w	80057e4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800541a:	f003 0310 	and.w	r3, r3, #16
 800541e:	2b00      	cmp	r3, #0
 8005420:	f000 81e0 	beq.w	80057e4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005428:	f003 0310 	and.w	r3, r3, #16
 800542c:	2b00      	cmp	r3, #0
 800542e:	f000 81d9 	beq.w	80057e4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2210      	movs	r2, #16
 8005438:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005444:	2b40      	cmp	r3, #64	; 0x40
 8005446:	f040 8151 	bne.w	80056ec <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a96      	ldr	r2, [pc, #600]	; (80056ac <HAL_UART_IRQHandler+0x564>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d068      	beq.n	800552a <HAL_UART_IRQHandler+0x3e2>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a93      	ldr	r2, [pc, #588]	; (80056b0 <HAL_UART_IRQHandler+0x568>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d061      	beq.n	800552a <HAL_UART_IRQHandler+0x3e2>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a91      	ldr	r2, [pc, #580]	; (80056b4 <HAL_UART_IRQHandler+0x56c>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d05a      	beq.n	800552a <HAL_UART_IRQHandler+0x3e2>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a8e      	ldr	r2, [pc, #568]	; (80056b8 <HAL_UART_IRQHandler+0x570>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d053      	beq.n	800552a <HAL_UART_IRQHandler+0x3e2>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a8c      	ldr	r2, [pc, #560]	; (80056bc <HAL_UART_IRQHandler+0x574>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d04c      	beq.n	800552a <HAL_UART_IRQHandler+0x3e2>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a89      	ldr	r2, [pc, #548]	; (80056c0 <HAL_UART_IRQHandler+0x578>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d045      	beq.n	800552a <HAL_UART_IRQHandler+0x3e2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a87      	ldr	r2, [pc, #540]	; (80056c4 <HAL_UART_IRQHandler+0x57c>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d03e      	beq.n	800552a <HAL_UART_IRQHandler+0x3e2>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a84      	ldr	r2, [pc, #528]	; (80056c8 <HAL_UART_IRQHandler+0x580>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d037      	beq.n	800552a <HAL_UART_IRQHandler+0x3e2>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a82      	ldr	r2, [pc, #520]	; (80056cc <HAL_UART_IRQHandler+0x584>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d030      	beq.n	800552a <HAL_UART_IRQHandler+0x3e2>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a7f      	ldr	r2, [pc, #508]	; (80056d0 <HAL_UART_IRQHandler+0x588>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d029      	beq.n	800552a <HAL_UART_IRQHandler+0x3e2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a7d      	ldr	r2, [pc, #500]	; (80056d4 <HAL_UART_IRQHandler+0x58c>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d022      	beq.n	800552a <HAL_UART_IRQHandler+0x3e2>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a7a      	ldr	r2, [pc, #488]	; (80056d8 <HAL_UART_IRQHandler+0x590>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d01b      	beq.n	800552a <HAL_UART_IRQHandler+0x3e2>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a78      	ldr	r2, [pc, #480]	; (80056dc <HAL_UART_IRQHandler+0x594>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d014      	beq.n	800552a <HAL_UART_IRQHandler+0x3e2>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a75      	ldr	r2, [pc, #468]	; (80056e0 <HAL_UART_IRQHandler+0x598>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d00d      	beq.n	800552a <HAL_UART_IRQHandler+0x3e2>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a73      	ldr	r2, [pc, #460]	; (80056e4 <HAL_UART_IRQHandler+0x59c>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d006      	beq.n	800552a <HAL_UART_IRQHandler+0x3e2>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a70      	ldr	r2, [pc, #448]	; (80056e8 <HAL_UART_IRQHandler+0x5a0>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d106      	bne.n	8005538 <HAL_UART_IRQHandler+0x3f0>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	b29b      	uxth	r3, r3
 8005536:	e005      	b.n	8005544 <HAL_UART_IRQHandler+0x3fc>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	b29b      	uxth	r3, r3
 8005544:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005548:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800554c:	2b00      	cmp	r3, #0
 800554e:	f000 81ab 	beq.w	80058a8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005558:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800555c:	429a      	cmp	r2, r3
 800555e:	f080 81a3 	bcs.w	80058a8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005568:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005572:	69db      	ldr	r3, [r3, #28]
 8005574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005578:	f000 8087 	beq.w	800568a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005584:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005588:	e853 3f00 	ldrex	r3, [r3]
 800558c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005590:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005594:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005598:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	461a      	mov	r2, r3
 80055a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80055a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80055aa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80055b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80055b6:	e841 2300 	strex	r3, r2, [r1]
 80055ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80055be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1da      	bne.n	800557c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	3308      	adds	r3, #8
 80055cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055d0:	e853 3f00 	ldrex	r3, [r3]
 80055d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80055d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055d8:	f023 0301 	bic.w	r3, r3, #1
 80055dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	3308      	adds	r3, #8
 80055e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80055ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80055ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80055f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80055f6:	e841 2300 	strex	r3, r2, [r1]
 80055fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80055fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1e1      	bne.n	80055c6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	3308      	adds	r3, #8
 8005608:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800560c:	e853 3f00 	ldrex	r3, [r3]
 8005610:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005614:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005618:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	3308      	adds	r3, #8
 8005622:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005626:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005628:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800562c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800562e:	e841 2300 	strex	r3, r2, [r1]
 8005632:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005634:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1e3      	bne.n	8005602 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2220      	movs	r2, #32
 800563e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005650:	e853 3f00 	ldrex	r3, [r3]
 8005654:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005658:	f023 0310 	bic.w	r3, r3, #16
 800565c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	461a      	mov	r2, r3
 8005666:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800566a:	65bb      	str	r3, [r7, #88]	; 0x58
 800566c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005670:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005672:	e841 2300 	strex	r3, r2, [r1]
 8005676:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005678:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800567a:	2b00      	cmp	r3, #0
 800567c:	d1e4      	bne.n	8005648 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005684:	4618      	mov	r0, r3
 8005686:	f7fb fe2f 	bl	80012e8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2202      	movs	r2, #2
 800568e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800569c:	b29b      	uxth	r3, r3
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	4619      	mov	r1, r3
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 f91d 	bl	80058e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80056aa:	e0fd      	b.n	80058a8 <HAL_UART_IRQHandler+0x760>
 80056ac:	40020010 	.word	0x40020010
 80056b0:	40020028 	.word	0x40020028
 80056b4:	40020040 	.word	0x40020040
 80056b8:	40020058 	.word	0x40020058
 80056bc:	40020070 	.word	0x40020070
 80056c0:	40020088 	.word	0x40020088
 80056c4:	400200a0 	.word	0x400200a0
 80056c8:	400200b8 	.word	0x400200b8
 80056cc:	40020410 	.word	0x40020410
 80056d0:	40020428 	.word	0x40020428
 80056d4:	40020440 	.word	0x40020440
 80056d8:	40020458 	.word	0x40020458
 80056dc:	40020470 	.word	0x40020470
 80056e0:	40020488 	.word	0x40020488
 80056e4:	400204a0 	.word	0x400204a0
 80056e8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005706:	b29b      	uxth	r3, r3
 8005708:	2b00      	cmp	r3, #0
 800570a:	f000 80cf 	beq.w	80058ac <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800570e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005712:	2b00      	cmp	r3, #0
 8005714:	f000 80ca 	beq.w	80058ac <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005720:	e853 3f00 	ldrex	r3, [r3]
 8005724:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005728:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800572c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	461a      	mov	r2, r3
 8005736:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800573a:	647b      	str	r3, [r7, #68]	; 0x44
 800573c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005740:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005742:	e841 2300 	strex	r3, r2, [r1]
 8005746:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1e4      	bne.n	8005718 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	3308      	adds	r3, #8
 8005754:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005758:	e853 3f00 	ldrex	r3, [r3]
 800575c:	623b      	str	r3, [r7, #32]
   return(result);
 800575e:	6a3a      	ldr	r2, [r7, #32]
 8005760:	4b55      	ldr	r3, [pc, #340]	; (80058b8 <HAL_UART_IRQHandler+0x770>)
 8005762:	4013      	ands	r3, r2
 8005764:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	3308      	adds	r3, #8
 800576e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005772:	633a      	str	r2, [r7, #48]	; 0x30
 8005774:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005776:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800577a:	e841 2300 	strex	r3, r2, [r1]
 800577e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1e3      	bne.n	800574e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2220      	movs	r2, #32
 800578a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	e853 3f00 	ldrex	r3, [r3]
 80057a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 0310 	bic.w	r3, r3, #16
 80057ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	461a      	mov	r2, r3
 80057b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80057bc:	61fb      	str	r3, [r7, #28]
 80057be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c0:	69b9      	ldr	r1, [r7, #24]
 80057c2:	69fa      	ldr	r2, [r7, #28]
 80057c4:	e841 2300 	strex	r3, r2, [r1]
 80057c8:	617b      	str	r3, [r7, #20]
   return(result);
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1e4      	bne.n	800579a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2202      	movs	r2, #2
 80057d4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057da:	4619      	mov	r1, r3
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 f881 	bl	80058e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80057e2:	e063      	b.n	80058ac <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80057e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00e      	beq.n	800580e <HAL_UART_IRQHandler+0x6c6>
 80057f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d008      	beq.n	800580e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005804:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f001 ff7e 	bl	8007708 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800580c:	e051      	b.n	80058b2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800580e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005816:	2b00      	cmp	r3, #0
 8005818:	d014      	beq.n	8005844 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800581a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800581e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005822:	2b00      	cmp	r3, #0
 8005824:	d105      	bne.n	8005832 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800582a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d008      	beq.n	8005844 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005836:	2b00      	cmp	r3, #0
 8005838:	d03a      	beq.n	80058b0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	4798      	blx	r3
    }
    return;
 8005842:	e035      	b.n	80058b0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800584c:	2b00      	cmp	r3, #0
 800584e:	d009      	beq.n	8005864 <HAL_UART_IRQHandler+0x71c>
 8005850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005858:	2b00      	cmp	r3, #0
 800585a:	d003      	beq.n	8005864 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f001 fa0b 	bl	8006c78 <UART_EndTransmit_IT>
    return;
 8005862:	e026      	b.n	80058b2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005868:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d009      	beq.n	8005884 <HAL_UART_IRQHandler+0x73c>
 8005870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005874:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d003      	beq.n	8005884 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f001 ff57 	bl	8007730 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005882:	e016      	b.n	80058b2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005888:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d010      	beq.n	80058b2 <HAL_UART_IRQHandler+0x76a>
 8005890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005894:	2b00      	cmp	r3, #0
 8005896:	da0c      	bge.n	80058b2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f001 ff3f 	bl	800771c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800589e:	e008      	b.n	80058b2 <HAL_UART_IRQHandler+0x76a>
      return;
 80058a0:	bf00      	nop
 80058a2:	e006      	b.n	80058b2 <HAL_UART_IRQHandler+0x76a>
    return;
 80058a4:	bf00      	nop
 80058a6:	e004      	b.n	80058b2 <HAL_UART_IRQHandler+0x76a>
      return;
 80058a8:	bf00      	nop
 80058aa:	e002      	b.n	80058b2 <HAL_UART_IRQHandler+0x76a>
      return;
 80058ac:	bf00      	nop
 80058ae:	e000      	b.n	80058b2 <HAL_UART_IRQHandler+0x76a>
    return;
 80058b0:	bf00      	nop
  }
}
 80058b2:	37e8      	adds	r7, #232	; 0xe8
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	effffffe 	.word	0xeffffffe

080058bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	460b      	mov	r3, r1
 80058ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005900:	b092      	sub	sp, #72	; 0x48
 8005902:	af00      	add	r7, sp, #0
 8005904:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005906:	2300      	movs	r3, #0
 8005908:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	689a      	ldr	r2, [r3, #8]
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	431a      	orrs	r2, r3
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	431a      	orrs	r2, r3
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	69db      	ldr	r3, [r3, #28]
 8005920:	4313      	orrs	r3, r2
 8005922:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	4bbe      	ldr	r3, [pc, #760]	; (8005c24 <UART_SetConfig+0x328>)
 800592c:	4013      	ands	r3, r2
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	6812      	ldr	r2, [r2, #0]
 8005932:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005934:	430b      	orrs	r3, r1
 8005936:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	68da      	ldr	r2, [r3, #12]
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	430a      	orrs	r2, r1
 800594c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4ab3      	ldr	r2, [pc, #716]	; (8005c28 <UART_SetConfig+0x32c>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d004      	beq.n	8005968 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005964:	4313      	orrs	r3, r2
 8005966:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689a      	ldr	r2, [r3, #8]
 800596e:	4baf      	ldr	r3, [pc, #700]	; (8005c2c <UART_SetConfig+0x330>)
 8005970:	4013      	ands	r3, r2
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	6812      	ldr	r2, [r2, #0]
 8005976:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005978:	430b      	orrs	r3, r1
 800597a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005982:	f023 010f 	bic.w	r1, r3, #15
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4aa6      	ldr	r2, [pc, #664]	; (8005c30 <UART_SetConfig+0x334>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d177      	bne.n	8005a8c <UART_SetConfig+0x190>
 800599c:	4ba5      	ldr	r3, [pc, #660]	; (8005c34 <UART_SetConfig+0x338>)
 800599e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059a4:	2b28      	cmp	r3, #40	; 0x28
 80059a6:	d86d      	bhi.n	8005a84 <UART_SetConfig+0x188>
 80059a8:	a201      	add	r2, pc, #4	; (adr r2, 80059b0 <UART_SetConfig+0xb4>)
 80059aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ae:	bf00      	nop
 80059b0:	08005a55 	.word	0x08005a55
 80059b4:	08005a85 	.word	0x08005a85
 80059b8:	08005a85 	.word	0x08005a85
 80059bc:	08005a85 	.word	0x08005a85
 80059c0:	08005a85 	.word	0x08005a85
 80059c4:	08005a85 	.word	0x08005a85
 80059c8:	08005a85 	.word	0x08005a85
 80059cc:	08005a85 	.word	0x08005a85
 80059d0:	08005a5d 	.word	0x08005a5d
 80059d4:	08005a85 	.word	0x08005a85
 80059d8:	08005a85 	.word	0x08005a85
 80059dc:	08005a85 	.word	0x08005a85
 80059e0:	08005a85 	.word	0x08005a85
 80059e4:	08005a85 	.word	0x08005a85
 80059e8:	08005a85 	.word	0x08005a85
 80059ec:	08005a85 	.word	0x08005a85
 80059f0:	08005a65 	.word	0x08005a65
 80059f4:	08005a85 	.word	0x08005a85
 80059f8:	08005a85 	.word	0x08005a85
 80059fc:	08005a85 	.word	0x08005a85
 8005a00:	08005a85 	.word	0x08005a85
 8005a04:	08005a85 	.word	0x08005a85
 8005a08:	08005a85 	.word	0x08005a85
 8005a0c:	08005a85 	.word	0x08005a85
 8005a10:	08005a6d 	.word	0x08005a6d
 8005a14:	08005a85 	.word	0x08005a85
 8005a18:	08005a85 	.word	0x08005a85
 8005a1c:	08005a85 	.word	0x08005a85
 8005a20:	08005a85 	.word	0x08005a85
 8005a24:	08005a85 	.word	0x08005a85
 8005a28:	08005a85 	.word	0x08005a85
 8005a2c:	08005a85 	.word	0x08005a85
 8005a30:	08005a75 	.word	0x08005a75
 8005a34:	08005a85 	.word	0x08005a85
 8005a38:	08005a85 	.word	0x08005a85
 8005a3c:	08005a85 	.word	0x08005a85
 8005a40:	08005a85 	.word	0x08005a85
 8005a44:	08005a85 	.word	0x08005a85
 8005a48:	08005a85 	.word	0x08005a85
 8005a4c:	08005a85 	.word	0x08005a85
 8005a50:	08005a7d 	.word	0x08005a7d
 8005a54:	2301      	movs	r3, #1
 8005a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a5a:	e326      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005a5c:	2304      	movs	r3, #4
 8005a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a62:	e322      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005a64:	2308      	movs	r3, #8
 8005a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a6a:	e31e      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005a6c:	2310      	movs	r3, #16
 8005a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a72:	e31a      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005a74:	2320      	movs	r3, #32
 8005a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a7a:	e316      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005a7c:	2340      	movs	r3, #64	; 0x40
 8005a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a82:	e312      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005a84:	2380      	movs	r3, #128	; 0x80
 8005a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a8a:	e30e      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a69      	ldr	r2, [pc, #420]	; (8005c38 <UART_SetConfig+0x33c>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d130      	bne.n	8005af8 <UART_SetConfig+0x1fc>
 8005a96:	4b67      	ldr	r3, [pc, #412]	; (8005c34 <UART_SetConfig+0x338>)
 8005a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a9a:	f003 0307 	and.w	r3, r3, #7
 8005a9e:	2b05      	cmp	r3, #5
 8005aa0:	d826      	bhi.n	8005af0 <UART_SetConfig+0x1f4>
 8005aa2:	a201      	add	r2, pc, #4	; (adr r2, 8005aa8 <UART_SetConfig+0x1ac>)
 8005aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa8:	08005ac1 	.word	0x08005ac1
 8005aac:	08005ac9 	.word	0x08005ac9
 8005ab0:	08005ad1 	.word	0x08005ad1
 8005ab4:	08005ad9 	.word	0x08005ad9
 8005ab8:	08005ae1 	.word	0x08005ae1
 8005abc:	08005ae9 	.word	0x08005ae9
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ac6:	e2f0      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005ac8:	2304      	movs	r3, #4
 8005aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ace:	e2ec      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005ad0:	2308      	movs	r3, #8
 8005ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ad6:	e2e8      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005ad8:	2310      	movs	r3, #16
 8005ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ade:	e2e4      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005ae0:	2320      	movs	r3, #32
 8005ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ae6:	e2e0      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005ae8:	2340      	movs	r3, #64	; 0x40
 8005aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005aee:	e2dc      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005af0:	2380      	movs	r3, #128	; 0x80
 8005af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005af6:	e2d8      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a4f      	ldr	r2, [pc, #316]	; (8005c3c <UART_SetConfig+0x340>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d130      	bne.n	8005b64 <UART_SetConfig+0x268>
 8005b02:	4b4c      	ldr	r3, [pc, #304]	; (8005c34 <UART_SetConfig+0x338>)
 8005b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b06:	f003 0307 	and.w	r3, r3, #7
 8005b0a:	2b05      	cmp	r3, #5
 8005b0c:	d826      	bhi.n	8005b5c <UART_SetConfig+0x260>
 8005b0e:	a201      	add	r2, pc, #4	; (adr r2, 8005b14 <UART_SetConfig+0x218>)
 8005b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b14:	08005b2d 	.word	0x08005b2d
 8005b18:	08005b35 	.word	0x08005b35
 8005b1c:	08005b3d 	.word	0x08005b3d
 8005b20:	08005b45 	.word	0x08005b45
 8005b24:	08005b4d 	.word	0x08005b4d
 8005b28:	08005b55 	.word	0x08005b55
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b32:	e2ba      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005b34:	2304      	movs	r3, #4
 8005b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b3a:	e2b6      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005b3c:	2308      	movs	r3, #8
 8005b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b42:	e2b2      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005b44:	2310      	movs	r3, #16
 8005b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b4a:	e2ae      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005b4c:	2320      	movs	r3, #32
 8005b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b52:	e2aa      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005b54:	2340      	movs	r3, #64	; 0x40
 8005b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b5a:	e2a6      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005b5c:	2380      	movs	r3, #128	; 0x80
 8005b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b62:	e2a2      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a35      	ldr	r2, [pc, #212]	; (8005c40 <UART_SetConfig+0x344>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d130      	bne.n	8005bd0 <UART_SetConfig+0x2d4>
 8005b6e:	4b31      	ldr	r3, [pc, #196]	; (8005c34 <UART_SetConfig+0x338>)
 8005b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b72:	f003 0307 	and.w	r3, r3, #7
 8005b76:	2b05      	cmp	r3, #5
 8005b78:	d826      	bhi.n	8005bc8 <UART_SetConfig+0x2cc>
 8005b7a:	a201      	add	r2, pc, #4	; (adr r2, 8005b80 <UART_SetConfig+0x284>)
 8005b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b80:	08005b99 	.word	0x08005b99
 8005b84:	08005ba1 	.word	0x08005ba1
 8005b88:	08005ba9 	.word	0x08005ba9
 8005b8c:	08005bb1 	.word	0x08005bb1
 8005b90:	08005bb9 	.word	0x08005bb9
 8005b94:	08005bc1 	.word	0x08005bc1
 8005b98:	2300      	movs	r3, #0
 8005b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b9e:	e284      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005ba0:	2304      	movs	r3, #4
 8005ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ba6:	e280      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005ba8:	2308      	movs	r3, #8
 8005baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bae:	e27c      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005bb0:	2310      	movs	r3, #16
 8005bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bb6:	e278      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005bb8:	2320      	movs	r3, #32
 8005bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bbe:	e274      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005bc0:	2340      	movs	r3, #64	; 0x40
 8005bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bc6:	e270      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005bc8:	2380      	movs	r3, #128	; 0x80
 8005bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bce:	e26c      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a1b      	ldr	r2, [pc, #108]	; (8005c44 <UART_SetConfig+0x348>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d142      	bne.n	8005c60 <UART_SetConfig+0x364>
 8005bda:	4b16      	ldr	r3, [pc, #88]	; (8005c34 <UART_SetConfig+0x338>)
 8005bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bde:	f003 0307 	and.w	r3, r3, #7
 8005be2:	2b05      	cmp	r3, #5
 8005be4:	d838      	bhi.n	8005c58 <UART_SetConfig+0x35c>
 8005be6:	a201      	add	r2, pc, #4	; (adr r2, 8005bec <UART_SetConfig+0x2f0>)
 8005be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bec:	08005c05 	.word	0x08005c05
 8005bf0:	08005c0d 	.word	0x08005c0d
 8005bf4:	08005c15 	.word	0x08005c15
 8005bf8:	08005c1d 	.word	0x08005c1d
 8005bfc:	08005c49 	.word	0x08005c49
 8005c00:	08005c51 	.word	0x08005c51
 8005c04:	2300      	movs	r3, #0
 8005c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c0a:	e24e      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005c0c:	2304      	movs	r3, #4
 8005c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c12:	e24a      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005c14:	2308      	movs	r3, #8
 8005c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c1a:	e246      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005c1c:	2310      	movs	r3, #16
 8005c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c22:	e242      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005c24:	cfff69f3 	.word	0xcfff69f3
 8005c28:	58000c00 	.word	0x58000c00
 8005c2c:	11fff4ff 	.word	0x11fff4ff
 8005c30:	40011000 	.word	0x40011000
 8005c34:	58024400 	.word	0x58024400
 8005c38:	40004400 	.word	0x40004400
 8005c3c:	40004800 	.word	0x40004800
 8005c40:	40004c00 	.word	0x40004c00
 8005c44:	40005000 	.word	0x40005000
 8005c48:	2320      	movs	r3, #32
 8005c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c4e:	e22c      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005c50:	2340      	movs	r3, #64	; 0x40
 8005c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c56:	e228      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005c58:	2380      	movs	r3, #128	; 0x80
 8005c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c5e:	e224      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4ab1      	ldr	r2, [pc, #708]	; (8005f2c <UART_SetConfig+0x630>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d176      	bne.n	8005d58 <UART_SetConfig+0x45c>
 8005c6a:	4bb1      	ldr	r3, [pc, #708]	; (8005f30 <UART_SetConfig+0x634>)
 8005c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c72:	2b28      	cmp	r3, #40	; 0x28
 8005c74:	d86c      	bhi.n	8005d50 <UART_SetConfig+0x454>
 8005c76:	a201      	add	r2, pc, #4	; (adr r2, 8005c7c <UART_SetConfig+0x380>)
 8005c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7c:	08005d21 	.word	0x08005d21
 8005c80:	08005d51 	.word	0x08005d51
 8005c84:	08005d51 	.word	0x08005d51
 8005c88:	08005d51 	.word	0x08005d51
 8005c8c:	08005d51 	.word	0x08005d51
 8005c90:	08005d51 	.word	0x08005d51
 8005c94:	08005d51 	.word	0x08005d51
 8005c98:	08005d51 	.word	0x08005d51
 8005c9c:	08005d29 	.word	0x08005d29
 8005ca0:	08005d51 	.word	0x08005d51
 8005ca4:	08005d51 	.word	0x08005d51
 8005ca8:	08005d51 	.word	0x08005d51
 8005cac:	08005d51 	.word	0x08005d51
 8005cb0:	08005d51 	.word	0x08005d51
 8005cb4:	08005d51 	.word	0x08005d51
 8005cb8:	08005d51 	.word	0x08005d51
 8005cbc:	08005d31 	.word	0x08005d31
 8005cc0:	08005d51 	.word	0x08005d51
 8005cc4:	08005d51 	.word	0x08005d51
 8005cc8:	08005d51 	.word	0x08005d51
 8005ccc:	08005d51 	.word	0x08005d51
 8005cd0:	08005d51 	.word	0x08005d51
 8005cd4:	08005d51 	.word	0x08005d51
 8005cd8:	08005d51 	.word	0x08005d51
 8005cdc:	08005d39 	.word	0x08005d39
 8005ce0:	08005d51 	.word	0x08005d51
 8005ce4:	08005d51 	.word	0x08005d51
 8005ce8:	08005d51 	.word	0x08005d51
 8005cec:	08005d51 	.word	0x08005d51
 8005cf0:	08005d51 	.word	0x08005d51
 8005cf4:	08005d51 	.word	0x08005d51
 8005cf8:	08005d51 	.word	0x08005d51
 8005cfc:	08005d41 	.word	0x08005d41
 8005d00:	08005d51 	.word	0x08005d51
 8005d04:	08005d51 	.word	0x08005d51
 8005d08:	08005d51 	.word	0x08005d51
 8005d0c:	08005d51 	.word	0x08005d51
 8005d10:	08005d51 	.word	0x08005d51
 8005d14:	08005d51 	.word	0x08005d51
 8005d18:	08005d51 	.word	0x08005d51
 8005d1c:	08005d49 	.word	0x08005d49
 8005d20:	2301      	movs	r3, #1
 8005d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d26:	e1c0      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005d28:	2304      	movs	r3, #4
 8005d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d2e:	e1bc      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005d30:	2308      	movs	r3, #8
 8005d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d36:	e1b8      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005d38:	2310      	movs	r3, #16
 8005d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d3e:	e1b4      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005d40:	2320      	movs	r3, #32
 8005d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d46:	e1b0      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005d48:	2340      	movs	r3, #64	; 0x40
 8005d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d4e:	e1ac      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005d50:	2380      	movs	r3, #128	; 0x80
 8005d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d56:	e1a8      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a75      	ldr	r2, [pc, #468]	; (8005f34 <UART_SetConfig+0x638>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d130      	bne.n	8005dc4 <UART_SetConfig+0x4c8>
 8005d62:	4b73      	ldr	r3, [pc, #460]	; (8005f30 <UART_SetConfig+0x634>)
 8005d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d66:	f003 0307 	and.w	r3, r3, #7
 8005d6a:	2b05      	cmp	r3, #5
 8005d6c:	d826      	bhi.n	8005dbc <UART_SetConfig+0x4c0>
 8005d6e:	a201      	add	r2, pc, #4	; (adr r2, 8005d74 <UART_SetConfig+0x478>)
 8005d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d74:	08005d8d 	.word	0x08005d8d
 8005d78:	08005d95 	.word	0x08005d95
 8005d7c:	08005d9d 	.word	0x08005d9d
 8005d80:	08005da5 	.word	0x08005da5
 8005d84:	08005dad 	.word	0x08005dad
 8005d88:	08005db5 	.word	0x08005db5
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d92:	e18a      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005d94:	2304      	movs	r3, #4
 8005d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d9a:	e186      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005d9c:	2308      	movs	r3, #8
 8005d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005da2:	e182      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005da4:	2310      	movs	r3, #16
 8005da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005daa:	e17e      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005dac:	2320      	movs	r3, #32
 8005dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005db2:	e17a      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005db4:	2340      	movs	r3, #64	; 0x40
 8005db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dba:	e176      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005dbc:	2380      	movs	r3, #128	; 0x80
 8005dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dc2:	e172      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a5b      	ldr	r2, [pc, #364]	; (8005f38 <UART_SetConfig+0x63c>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d130      	bne.n	8005e30 <UART_SetConfig+0x534>
 8005dce:	4b58      	ldr	r3, [pc, #352]	; (8005f30 <UART_SetConfig+0x634>)
 8005dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dd2:	f003 0307 	and.w	r3, r3, #7
 8005dd6:	2b05      	cmp	r3, #5
 8005dd8:	d826      	bhi.n	8005e28 <UART_SetConfig+0x52c>
 8005dda:	a201      	add	r2, pc, #4	; (adr r2, 8005de0 <UART_SetConfig+0x4e4>)
 8005ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de0:	08005df9 	.word	0x08005df9
 8005de4:	08005e01 	.word	0x08005e01
 8005de8:	08005e09 	.word	0x08005e09
 8005dec:	08005e11 	.word	0x08005e11
 8005df0:	08005e19 	.word	0x08005e19
 8005df4:	08005e21 	.word	0x08005e21
 8005df8:	2300      	movs	r3, #0
 8005dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dfe:	e154      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005e00:	2304      	movs	r3, #4
 8005e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e06:	e150      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005e08:	2308      	movs	r3, #8
 8005e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e0e:	e14c      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005e10:	2310      	movs	r3, #16
 8005e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e16:	e148      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005e18:	2320      	movs	r3, #32
 8005e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e1e:	e144      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005e20:	2340      	movs	r3, #64	; 0x40
 8005e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e26:	e140      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005e28:	2380      	movs	r3, #128	; 0x80
 8005e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e2e:	e13c      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a41      	ldr	r2, [pc, #260]	; (8005f3c <UART_SetConfig+0x640>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	f040 8082 	bne.w	8005f40 <UART_SetConfig+0x644>
 8005e3c:	4b3c      	ldr	r3, [pc, #240]	; (8005f30 <UART_SetConfig+0x634>)
 8005e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e44:	2b28      	cmp	r3, #40	; 0x28
 8005e46:	d86d      	bhi.n	8005f24 <UART_SetConfig+0x628>
 8005e48:	a201      	add	r2, pc, #4	; (adr r2, 8005e50 <UART_SetConfig+0x554>)
 8005e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4e:	bf00      	nop
 8005e50:	08005ef5 	.word	0x08005ef5
 8005e54:	08005f25 	.word	0x08005f25
 8005e58:	08005f25 	.word	0x08005f25
 8005e5c:	08005f25 	.word	0x08005f25
 8005e60:	08005f25 	.word	0x08005f25
 8005e64:	08005f25 	.word	0x08005f25
 8005e68:	08005f25 	.word	0x08005f25
 8005e6c:	08005f25 	.word	0x08005f25
 8005e70:	08005efd 	.word	0x08005efd
 8005e74:	08005f25 	.word	0x08005f25
 8005e78:	08005f25 	.word	0x08005f25
 8005e7c:	08005f25 	.word	0x08005f25
 8005e80:	08005f25 	.word	0x08005f25
 8005e84:	08005f25 	.word	0x08005f25
 8005e88:	08005f25 	.word	0x08005f25
 8005e8c:	08005f25 	.word	0x08005f25
 8005e90:	08005f05 	.word	0x08005f05
 8005e94:	08005f25 	.word	0x08005f25
 8005e98:	08005f25 	.word	0x08005f25
 8005e9c:	08005f25 	.word	0x08005f25
 8005ea0:	08005f25 	.word	0x08005f25
 8005ea4:	08005f25 	.word	0x08005f25
 8005ea8:	08005f25 	.word	0x08005f25
 8005eac:	08005f25 	.word	0x08005f25
 8005eb0:	08005f0d 	.word	0x08005f0d
 8005eb4:	08005f25 	.word	0x08005f25
 8005eb8:	08005f25 	.word	0x08005f25
 8005ebc:	08005f25 	.word	0x08005f25
 8005ec0:	08005f25 	.word	0x08005f25
 8005ec4:	08005f25 	.word	0x08005f25
 8005ec8:	08005f25 	.word	0x08005f25
 8005ecc:	08005f25 	.word	0x08005f25
 8005ed0:	08005f15 	.word	0x08005f15
 8005ed4:	08005f25 	.word	0x08005f25
 8005ed8:	08005f25 	.word	0x08005f25
 8005edc:	08005f25 	.word	0x08005f25
 8005ee0:	08005f25 	.word	0x08005f25
 8005ee4:	08005f25 	.word	0x08005f25
 8005ee8:	08005f25 	.word	0x08005f25
 8005eec:	08005f25 	.word	0x08005f25
 8005ef0:	08005f1d 	.word	0x08005f1d
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005efa:	e0d6      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005efc:	2304      	movs	r3, #4
 8005efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f02:	e0d2      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005f04:	2308      	movs	r3, #8
 8005f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f0a:	e0ce      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005f0c:	2310      	movs	r3, #16
 8005f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f12:	e0ca      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005f14:	2320      	movs	r3, #32
 8005f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f1a:	e0c6      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005f1c:	2340      	movs	r3, #64	; 0x40
 8005f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f22:	e0c2      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005f24:	2380      	movs	r3, #128	; 0x80
 8005f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f2a:	e0be      	b.n	80060aa <UART_SetConfig+0x7ae>
 8005f2c:	40011400 	.word	0x40011400
 8005f30:	58024400 	.word	0x58024400
 8005f34:	40007800 	.word	0x40007800
 8005f38:	40007c00 	.word	0x40007c00
 8005f3c:	40011800 	.word	0x40011800
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4aad      	ldr	r2, [pc, #692]	; (80061fc <UART_SetConfig+0x900>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d176      	bne.n	8006038 <UART_SetConfig+0x73c>
 8005f4a:	4bad      	ldr	r3, [pc, #692]	; (8006200 <UART_SetConfig+0x904>)
 8005f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f52:	2b28      	cmp	r3, #40	; 0x28
 8005f54:	d86c      	bhi.n	8006030 <UART_SetConfig+0x734>
 8005f56:	a201      	add	r2, pc, #4	; (adr r2, 8005f5c <UART_SetConfig+0x660>)
 8005f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f5c:	08006001 	.word	0x08006001
 8005f60:	08006031 	.word	0x08006031
 8005f64:	08006031 	.word	0x08006031
 8005f68:	08006031 	.word	0x08006031
 8005f6c:	08006031 	.word	0x08006031
 8005f70:	08006031 	.word	0x08006031
 8005f74:	08006031 	.word	0x08006031
 8005f78:	08006031 	.word	0x08006031
 8005f7c:	08006009 	.word	0x08006009
 8005f80:	08006031 	.word	0x08006031
 8005f84:	08006031 	.word	0x08006031
 8005f88:	08006031 	.word	0x08006031
 8005f8c:	08006031 	.word	0x08006031
 8005f90:	08006031 	.word	0x08006031
 8005f94:	08006031 	.word	0x08006031
 8005f98:	08006031 	.word	0x08006031
 8005f9c:	08006011 	.word	0x08006011
 8005fa0:	08006031 	.word	0x08006031
 8005fa4:	08006031 	.word	0x08006031
 8005fa8:	08006031 	.word	0x08006031
 8005fac:	08006031 	.word	0x08006031
 8005fb0:	08006031 	.word	0x08006031
 8005fb4:	08006031 	.word	0x08006031
 8005fb8:	08006031 	.word	0x08006031
 8005fbc:	08006019 	.word	0x08006019
 8005fc0:	08006031 	.word	0x08006031
 8005fc4:	08006031 	.word	0x08006031
 8005fc8:	08006031 	.word	0x08006031
 8005fcc:	08006031 	.word	0x08006031
 8005fd0:	08006031 	.word	0x08006031
 8005fd4:	08006031 	.word	0x08006031
 8005fd8:	08006031 	.word	0x08006031
 8005fdc:	08006021 	.word	0x08006021
 8005fe0:	08006031 	.word	0x08006031
 8005fe4:	08006031 	.word	0x08006031
 8005fe8:	08006031 	.word	0x08006031
 8005fec:	08006031 	.word	0x08006031
 8005ff0:	08006031 	.word	0x08006031
 8005ff4:	08006031 	.word	0x08006031
 8005ff8:	08006031 	.word	0x08006031
 8005ffc:	08006029 	.word	0x08006029
 8006000:	2301      	movs	r3, #1
 8006002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006006:	e050      	b.n	80060aa <UART_SetConfig+0x7ae>
 8006008:	2304      	movs	r3, #4
 800600a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800600e:	e04c      	b.n	80060aa <UART_SetConfig+0x7ae>
 8006010:	2308      	movs	r3, #8
 8006012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006016:	e048      	b.n	80060aa <UART_SetConfig+0x7ae>
 8006018:	2310      	movs	r3, #16
 800601a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800601e:	e044      	b.n	80060aa <UART_SetConfig+0x7ae>
 8006020:	2320      	movs	r3, #32
 8006022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006026:	e040      	b.n	80060aa <UART_SetConfig+0x7ae>
 8006028:	2340      	movs	r3, #64	; 0x40
 800602a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800602e:	e03c      	b.n	80060aa <UART_SetConfig+0x7ae>
 8006030:	2380      	movs	r3, #128	; 0x80
 8006032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006036:	e038      	b.n	80060aa <UART_SetConfig+0x7ae>
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a71      	ldr	r2, [pc, #452]	; (8006204 <UART_SetConfig+0x908>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d130      	bne.n	80060a4 <UART_SetConfig+0x7a8>
 8006042:	4b6f      	ldr	r3, [pc, #444]	; (8006200 <UART_SetConfig+0x904>)
 8006044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006046:	f003 0307 	and.w	r3, r3, #7
 800604a:	2b05      	cmp	r3, #5
 800604c:	d826      	bhi.n	800609c <UART_SetConfig+0x7a0>
 800604e:	a201      	add	r2, pc, #4	; (adr r2, 8006054 <UART_SetConfig+0x758>)
 8006050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006054:	0800606d 	.word	0x0800606d
 8006058:	08006075 	.word	0x08006075
 800605c:	0800607d 	.word	0x0800607d
 8006060:	08006085 	.word	0x08006085
 8006064:	0800608d 	.word	0x0800608d
 8006068:	08006095 	.word	0x08006095
 800606c:	2302      	movs	r3, #2
 800606e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006072:	e01a      	b.n	80060aa <UART_SetConfig+0x7ae>
 8006074:	2304      	movs	r3, #4
 8006076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800607a:	e016      	b.n	80060aa <UART_SetConfig+0x7ae>
 800607c:	2308      	movs	r3, #8
 800607e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006082:	e012      	b.n	80060aa <UART_SetConfig+0x7ae>
 8006084:	2310      	movs	r3, #16
 8006086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800608a:	e00e      	b.n	80060aa <UART_SetConfig+0x7ae>
 800608c:	2320      	movs	r3, #32
 800608e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006092:	e00a      	b.n	80060aa <UART_SetConfig+0x7ae>
 8006094:	2340      	movs	r3, #64	; 0x40
 8006096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800609a:	e006      	b.n	80060aa <UART_SetConfig+0x7ae>
 800609c:	2380      	movs	r3, #128	; 0x80
 800609e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060a2:	e002      	b.n	80060aa <UART_SetConfig+0x7ae>
 80060a4:	2380      	movs	r3, #128	; 0x80
 80060a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a55      	ldr	r2, [pc, #340]	; (8006204 <UART_SetConfig+0x908>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	f040 80f8 	bne.w	80062a6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80060b6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80060ba:	2b20      	cmp	r3, #32
 80060bc:	dc46      	bgt.n	800614c <UART_SetConfig+0x850>
 80060be:	2b02      	cmp	r3, #2
 80060c0:	db75      	blt.n	80061ae <UART_SetConfig+0x8b2>
 80060c2:	3b02      	subs	r3, #2
 80060c4:	2b1e      	cmp	r3, #30
 80060c6:	d872      	bhi.n	80061ae <UART_SetConfig+0x8b2>
 80060c8:	a201      	add	r2, pc, #4	; (adr r2, 80060d0 <UART_SetConfig+0x7d4>)
 80060ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ce:	bf00      	nop
 80060d0:	08006153 	.word	0x08006153
 80060d4:	080061af 	.word	0x080061af
 80060d8:	0800615b 	.word	0x0800615b
 80060dc:	080061af 	.word	0x080061af
 80060e0:	080061af 	.word	0x080061af
 80060e4:	080061af 	.word	0x080061af
 80060e8:	0800616b 	.word	0x0800616b
 80060ec:	080061af 	.word	0x080061af
 80060f0:	080061af 	.word	0x080061af
 80060f4:	080061af 	.word	0x080061af
 80060f8:	080061af 	.word	0x080061af
 80060fc:	080061af 	.word	0x080061af
 8006100:	080061af 	.word	0x080061af
 8006104:	080061af 	.word	0x080061af
 8006108:	0800617b 	.word	0x0800617b
 800610c:	080061af 	.word	0x080061af
 8006110:	080061af 	.word	0x080061af
 8006114:	080061af 	.word	0x080061af
 8006118:	080061af 	.word	0x080061af
 800611c:	080061af 	.word	0x080061af
 8006120:	080061af 	.word	0x080061af
 8006124:	080061af 	.word	0x080061af
 8006128:	080061af 	.word	0x080061af
 800612c:	080061af 	.word	0x080061af
 8006130:	080061af 	.word	0x080061af
 8006134:	080061af 	.word	0x080061af
 8006138:	080061af 	.word	0x080061af
 800613c:	080061af 	.word	0x080061af
 8006140:	080061af 	.word	0x080061af
 8006144:	080061af 	.word	0x080061af
 8006148:	080061a1 	.word	0x080061a1
 800614c:	2b40      	cmp	r3, #64	; 0x40
 800614e:	d02a      	beq.n	80061a6 <UART_SetConfig+0x8aa>
 8006150:	e02d      	b.n	80061ae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006152:	f7fe f9e5 	bl	8004520 <HAL_RCCEx_GetD3PCLK1Freq>
 8006156:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006158:	e02f      	b.n	80061ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800615a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800615e:	4618      	mov	r0, r3
 8006160:	f7fe f9f4 	bl	800454c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006166:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006168:	e027      	b.n	80061ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800616a:	f107 0318 	add.w	r3, r7, #24
 800616e:	4618      	mov	r0, r3
 8006170:	f7fe fb40 	bl	80047f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006178:	e01f      	b.n	80061ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800617a:	4b21      	ldr	r3, [pc, #132]	; (8006200 <UART_SetConfig+0x904>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0320 	and.w	r3, r3, #32
 8006182:	2b00      	cmp	r3, #0
 8006184:	d009      	beq.n	800619a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006186:	4b1e      	ldr	r3, [pc, #120]	; (8006200 <UART_SetConfig+0x904>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	08db      	lsrs	r3, r3, #3
 800618c:	f003 0303 	and.w	r3, r3, #3
 8006190:	4a1d      	ldr	r2, [pc, #116]	; (8006208 <UART_SetConfig+0x90c>)
 8006192:	fa22 f303 	lsr.w	r3, r2, r3
 8006196:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006198:	e00f      	b.n	80061ba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800619a:	4b1b      	ldr	r3, [pc, #108]	; (8006208 <UART_SetConfig+0x90c>)
 800619c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800619e:	e00c      	b.n	80061ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80061a0:	4b1a      	ldr	r3, [pc, #104]	; (800620c <UART_SetConfig+0x910>)
 80061a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061a4:	e009      	b.n	80061ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061ac:	e005      	b.n	80061ba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80061ae:	2300      	movs	r3, #0
 80061b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80061b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80061ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f000 81ee 	beq.w	800659e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c6:	4a12      	ldr	r2, [pc, #72]	; (8006210 <UART_SetConfig+0x914>)
 80061c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061cc:	461a      	mov	r2, r3
 80061ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80061d4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	685a      	ldr	r2, [r3, #4]
 80061da:	4613      	mov	r3, r2
 80061dc:	005b      	lsls	r3, r3, #1
 80061de:	4413      	add	r3, r2
 80061e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d305      	bcc.n	80061f2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d910      	bls.n	8006214 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80061f8:	e1d1      	b.n	800659e <UART_SetConfig+0xca2>
 80061fa:	bf00      	nop
 80061fc:	40011c00 	.word	0x40011c00
 8006200:	58024400 	.word	0x58024400
 8006204:	58000c00 	.word	0x58000c00
 8006208:	03d09000 	.word	0x03d09000
 800620c:	003d0900 	.word	0x003d0900
 8006210:	080079cc 	.word	0x080079cc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006216:	2200      	movs	r2, #0
 8006218:	60bb      	str	r3, [r7, #8]
 800621a:	60fa      	str	r2, [r7, #12]
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006220:	4ac0      	ldr	r2, [pc, #768]	; (8006524 <UART_SetConfig+0xc28>)
 8006222:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006226:	b29b      	uxth	r3, r3
 8006228:	2200      	movs	r2, #0
 800622a:	603b      	str	r3, [r7, #0]
 800622c:	607a      	str	r2, [r7, #4]
 800622e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006232:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006236:	f7fa f859 	bl	80002ec <__aeabi_uldivmod>
 800623a:	4602      	mov	r2, r0
 800623c:	460b      	mov	r3, r1
 800623e:	4610      	mov	r0, r2
 8006240:	4619      	mov	r1, r3
 8006242:	f04f 0200 	mov.w	r2, #0
 8006246:	f04f 0300 	mov.w	r3, #0
 800624a:	020b      	lsls	r3, r1, #8
 800624c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006250:	0202      	lsls	r2, r0, #8
 8006252:	6979      	ldr	r1, [r7, #20]
 8006254:	6849      	ldr	r1, [r1, #4]
 8006256:	0849      	lsrs	r1, r1, #1
 8006258:	2000      	movs	r0, #0
 800625a:	460c      	mov	r4, r1
 800625c:	4605      	mov	r5, r0
 800625e:	eb12 0804 	adds.w	r8, r2, r4
 8006262:	eb43 0905 	adc.w	r9, r3, r5
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	469a      	mov	sl, r3
 800626e:	4693      	mov	fp, r2
 8006270:	4652      	mov	r2, sl
 8006272:	465b      	mov	r3, fp
 8006274:	4640      	mov	r0, r8
 8006276:	4649      	mov	r1, r9
 8006278:	f7fa f838 	bl	80002ec <__aeabi_uldivmod>
 800627c:	4602      	mov	r2, r0
 800627e:	460b      	mov	r3, r1
 8006280:	4613      	mov	r3, r2
 8006282:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006286:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800628a:	d308      	bcc.n	800629e <UART_SetConfig+0x9a2>
 800628c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006292:	d204      	bcs.n	800629e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800629a:	60da      	str	r2, [r3, #12]
 800629c:	e17f      	b.n	800659e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80062a4:	e17b      	b.n	800659e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	69db      	ldr	r3, [r3, #28]
 80062aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062ae:	f040 80bd 	bne.w	800642c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80062b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80062b6:	2b20      	cmp	r3, #32
 80062b8:	dc48      	bgt.n	800634c <UART_SetConfig+0xa50>
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	db7b      	blt.n	80063b6 <UART_SetConfig+0xaba>
 80062be:	2b20      	cmp	r3, #32
 80062c0:	d879      	bhi.n	80063b6 <UART_SetConfig+0xaba>
 80062c2:	a201      	add	r2, pc, #4	; (adr r2, 80062c8 <UART_SetConfig+0x9cc>)
 80062c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c8:	08006353 	.word	0x08006353
 80062cc:	0800635b 	.word	0x0800635b
 80062d0:	080063b7 	.word	0x080063b7
 80062d4:	080063b7 	.word	0x080063b7
 80062d8:	08006363 	.word	0x08006363
 80062dc:	080063b7 	.word	0x080063b7
 80062e0:	080063b7 	.word	0x080063b7
 80062e4:	080063b7 	.word	0x080063b7
 80062e8:	08006373 	.word	0x08006373
 80062ec:	080063b7 	.word	0x080063b7
 80062f0:	080063b7 	.word	0x080063b7
 80062f4:	080063b7 	.word	0x080063b7
 80062f8:	080063b7 	.word	0x080063b7
 80062fc:	080063b7 	.word	0x080063b7
 8006300:	080063b7 	.word	0x080063b7
 8006304:	080063b7 	.word	0x080063b7
 8006308:	08006383 	.word	0x08006383
 800630c:	080063b7 	.word	0x080063b7
 8006310:	080063b7 	.word	0x080063b7
 8006314:	080063b7 	.word	0x080063b7
 8006318:	080063b7 	.word	0x080063b7
 800631c:	080063b7 	.word	0x080063b7
 8006320:	080063b7 	.word	0x080063b7
 8006324:	080063b7 	.word	0x080063b7
 8006328:	080063b7 	.word	0x080063b7
 800632c:	080063b7 	.word	0x080063b7
 8006330:	080063b7 	.word	0x080063b7
 8006334:	080063b7 	.word	0x080063b7
 8006338:	080063b7 	.word	0x080063b7
 800633c:	080063b7 	.word	0x080063b7
 8006340:	080063b7 	.word	0x080063b7
 8006344:	080063b7 	.word	0x080063b7
 8006348:	080063a9 	.word	0x080063a9
 800634c:	2b40      	cmp	r3, #64	; 0x40
 800634e:	d02e      	beq.n	80063ae <UART_SetConfig+0xab2>
 8006350:	e031      	b.n	80063b6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006352:	f7fc fefb 	bl	800314c <HAL_RCC_GetPCLK1Freq>
 8006356:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006358:	e033      	b.n	80063c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800635a:	f7fc ff0d 	bl	8003178 <HAL_RCC_GetPCLK2Freq>
 800635e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006360:	e02f      	b.n	80063c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006366:	4618      	mov	r0, r3
 8006368:	f7fe f8f0 	bl	800454c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800636c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006370:	e027      	b.n	80063c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006372:	f107 0318 	add.w	r3, r7, #24
 8006376:	4618      	mov	r0, r3
 8006378:	f7fe fa3c 	bl	80047f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006380:	e01f      	b.n	80063c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006382:	4b69      	ldr	r3, [pc, #420]	; (8006528 <UART_SetConfig+0xc2c>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0320 	and.w	r3, r3, #32
 800638a:	2b00      	cmp	r3, #0
 800638c:	d009      	beq.n	80063a2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800638e:	4b66      	ldr	r3, [pc, #408]	; (8006528 <UART_SetConfig+0xc2c>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	08db      	lsrs	r3, r3, #3
 8006394:	f003 0303 	and.w	r3, r3, #3
 8006398:	4a64      	ldr	r2, [pc, #400]	; (800652c <UART_SetConfig+0xc30>)
 800639a:	fa22 f303 	lsr.w	r3, r2, r3
 800639e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80063a0:	e00f      	b.n	80063c2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80063a2:	4b62      	ldr	r3, [pc, #392]	; (800652c <UART_SetConfig+0xc30>)
 80063a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063a6:	e00c      	b.n	80063c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80063a8:	4b61      	ldr	r3, [pc, #388]	; (8006530 <UART_SetConfig+0xc34>)
 80063aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063ac:	e009      	b.n	80063c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063b4:	e005      	b.n	80063c2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80063b6:	2300      	movs	r3, #0
 80063b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80063c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f000 80ea 	beq.w	800659e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ce:	4a55      	ldr	r2, [pc, #340]	; (8006524 <UART_SetConfig+0xc28>)
 80063d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063d4:	461a      	mov	r2, r3
 80063d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80063dc:	005a      	lsls	r2, r3, #1
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	085b      	lsrs	r3, r3, #1
 80063e4:	441a      	add	r2, r3
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ee:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f2:	2b0f      	cmp	r3, #15
 80063f4:	d916      	bls.n	8006424 <UART_SetConfig+0xb28>
 80063f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063fc:	d212      	bcs.n	8006424 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006400:	b29b      	uxth	r3, r3
 8006402:	f023 030f 	bic.w	r3, r3, #15
 8006406:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800640a:	085b      	lsrs	r3, r3, #1
 800640c:	b29b      	uxth	r3, r3
 800640e:	f003 0307 	and.w	r3, r3, #7
 8006412:	b29a      	uxth	r2, r3
 8006414:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006416:	4313      	orrs	r3, r2
 8006418:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006420:	60da      	str	r2, [r3, #12]
 8006422:	e0bc      	b.n	800659e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800642a:	e0b8      	b.n	800659e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800642c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006430:	2b20      	cmp	r3, #32
 8006432:	dc4b      	bgt.n	80064cc <UART_SetConfig+0xbd0>
 8006434:	2b00      	cmp	r3, #0
 8006436:	f2c0 8087 	blt.w	8006548 <UART_SetConfig+0xc4c>
 800643a:	2b20      	cmp	r3, #32
 800643c:	f200 8084 	bhi.w	8006548 <UART_SetConfig+0xc4c>
 8006440:	a201      	add	r2, pc, #4	; (adr r2, 8006448 <UART_SetConfig+0xb4c>)
 8006442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006446:	bf00      	nop
 8006448:	080064d3 	.word	0x080064d3
 800644c:	080064db 	.word	0x080064db
 8006450:	08006549 	.word	0x08006549
 8006454:	08006549 	.word	0x08006549
 8006458:	080064e3 	.word	0x080064e3
 800645c:	08006549 	.word	0x08006549
 8006460:	08006549 	.word	0x08006549
 8006464:	08006549 	.word	0x08006549
 8006468:	080064f3 	.word	0x080064f3
 800646c:	08006549 	.word	0x08006549
 8006470:	08006549 	.word	0x08006549
 8006474:	08006549 	.word	0x08006549
 8006478:	08006549 	.word	0x08006549
 800647c:	08006549 	.word	0x08006549
 8006480:	08006549 	.word	0x08006549
 8006484:	08006549 	.word	0x08006549
 8006488:	08006503 	.word	0x08006503
 800648c:	08006549 	.word	0x08006549
 8006490:	08006549 	.word	0x08006549
 8006494:	08006549 	.word	0x08006549
 8006498:	08006549 	.word	0x08006549
 800649c:	08006549 	.word	0x08006549
 80064a0:	08006549 	.word	0x08006549
 80064a4:	08006549 	.word	0x08006549
 80064a8:	08006549 	.word	0x08006549
 80064ac:	08006549 	.word	0x08006549
 80064b0:	08006549 	.word	0x08006549
 80064b4:	08006549 	.word	0x08006549
 80064b8:	08006549 	.word	0x08006549
 80064bc:	08006549 	.word	0x08006549
 80064c0:	08006549 	.word	0x08006549
 80064c4:	08006549 	.word	0x08006549
 80064c8:	0800653b 	.word	0x0800653b
 80064cc:	2b40      	cmp	r3, #64	; 0x40
 80064ce:	d037      	beq.n	8006540 <UART_SetConfig+0xc44>
 80064d0:	e03a      	b.n	8006548 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064d2:	f7fc fe3b 	bl	800314c <HAL_RCC_GetPCLK1Freq>
 80064d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80064d8:	e03c      	b.n	8006554 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064da:	f7fc fe4d 	bl	8003178 <HAL_RCC_GetPCLK2Freq>
 80064de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80064e0:	e038      	b.n	8006554 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7fe f830 	bl	800454c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80064ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064f0:	e030      	b.n	8006554 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064f2:	f107 0318 	add.w	r3, r7, #24
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7fe f97c 	bl	80047f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006500:	e028      	b.n	8006554 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006502:	4b09      	ldr	r3, [pc, #36]	; (8006528 <UART_SetConfig+0xc2c>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 0320 	and.w	r3, r3, #32
 800650a:	2b00      	cmp	r3, #0
 800650c:	d012      	beq.n	8006534 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800650e:	4b06      	ldr	r3, [pc, #24]	; (8006528 <UART_SetConfig+0xc2c>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	08db      	lsrs	r3, r3, #3
 8006514:	f003 0303 	and.w	r3, r3, #3
 8006518:	4a04      	ldr	r2, [pc, #16]	; (800652c <UART_SetConfig+0xc30>)
 800651a:	fa22 f303 	lsr.w	r3, r2, r3
 800651e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006520:	e018      	b.n	8006554 <UART_SetConfig+0xc58>
 8006522:	bf00      	nop
 8006524:	080079cc 	.word	0x080079cc
 8006528:	58024400 	.word	0x58024400
 800652c:	03d09000 	.word	0x03d09000
 8006530:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006534:	4b24      	ldr	r3, [pc, #144]	; (80065c8 <UART_SetConfig+0xccc>)
 8006536:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006538:	e00c      	b.n	8006554 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800653a:	4b24      	ldr	r3, [pc, #144]	; (80065cc <UART_SetConfig+0xcd0>)
 800653c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800653e:	e009      	b.n	8006554 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006540:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006544:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006546:	e005      	b.n	8006554 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006548:	2300      	movs	r3, #0
 800654a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006552:	bf00      	nop
    }

    if (pclk != 0U)
 8006554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006556:	2b00      	cmp	r3, #0
 8006558:	d021      	beq.n	800659e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655e:	4a1c      	ldr	r2, [pc, #112]	; (80065d0 <UART_SetConfig+0xcd4>)
 8006560:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006564:	461a      	mov	r2, r3
 8006566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006568:	fbb3 f2f2 	udiv	r2, r3, r2
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	085b      	lsrs	r3, r3, #1
 8006572:	441a      	add	r2, r3
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	fbb2 f3f3 	udiv	r3, r2, r3
 800657c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800657e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006580:	2b0f      	cmp	r3, #15
 8006582:	d909      	bls.n	8006598 <UART_SetConfig+0xc9c>
 8006584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800658a:	d205      	bcs.n	8006598 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800658c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658e:	b29a      	uxth	r2, r3
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	60da      	str	r2, [r3, #12]
 8006596:	e002      	b.n	800659e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	2201      	movs	r2, #1
 80065a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	2200      	movs	r2, #0
 80065b2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	2200      	movs	r2, #0
 80065b8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80065ba:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3748      	adds	r7, #72	; 0x48
 80065c2:	46bd      	mov	sp, r7
 80065c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065c8:	03d09000 	.word	0x03d09000
 80065cc:	003d0900 	.word	0x003d0900
 80065d0:	080079cc 	.word	0x080079cc

080065d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e0:	f003 0301 	and.w	r3, r3, #1
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d00a      	beq.n	80065fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	430a      	orrs	r2, r1
 80065fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006602:	f003 0302 	and.w	r3, r3, #2
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00a      	beq.n	8006620 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	430a      	orrs	r2, r1
 800661e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006624:	f003 0304 	and.w	r3, r3, #4
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00a      	beq.n	8006642 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	430a      	orrs	r2, r1
 8006640:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006646:	f003 0308 	and.w	r3, r3, #8
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00a      	beq.n	8006664 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	430a      	orrs	r2, r1
 8006662:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006668:	f003 0310 	and.w	r3, r3, #16
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00a      	beq.n	8006686 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	430a      	orrs	r2, r1
 8006684:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668a:	f003 0320 	and.w	r3, r3, #32
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00a      	beq.n	80066a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	430a      	orrs	r2, r1
 80066a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d01a      	beq.n	80066ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	430a      	orrs	r2, r1
 80066c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066d2:	d10a      	bne.n	80066ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	430a      	orrs	r2, r1
 80066e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00a      	beq.n	800670c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	430a      	orrs	r2, r1
 800670a:	605a      	str	r2, [r3, #4]
  }
}
 800670c:	bf00      	nop
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b098      	sub	sp, #96	; 0x60
 800671c:	af02      	add	r7, sp, #8
 800671e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006728:	f7fa fc9e 	bl	8001068 <HAL_GetTick>
 800672c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 0308 	and.w	r3, r3, #8
 8006738:	2b08      	cmp	r3, #8
 800673a:	d12f      	bne.n	800679c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800673c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006740:	9300      	str	r3, [sp, #0]
 8006742:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006744:	2200      	movs	r2, #0
 8006746:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 f88e 	bl	800686c <UART_WaitOnFlagUntilTimeout>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d022      	beq.n	800679c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675e:	e853 3f00 	ldrex	r3, [r3]
 8006762:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006766:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800676a:	653b      	str	r3, [r7, #80]	; 0x50
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	461a      	mov	r2, r3
 8006772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006774:	647b      	str	r3, [r7, #68]	; 0x44
 8006776:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006778:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800677a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800677c:	e841 2300 	strex	r3, r2, [r1]
 8006780:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006784:	2b00      	cmp	r3, #0
 8006786:	d1e6      	bne.n	8006756 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2220      	movs	r2, #32
 800678c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	e063      	b.n	8006864 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 0304 	and.w	r3, r3, #4
 80067a6:	2b04      	cmp	r3, #4
 80067a8:	d149      	bne.n	800683e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067b2:	2200      	movs	r2, #0
 80067b4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 f857 	bl	800686c <UART_WaitOnFlagUntilTimeout>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d03c      	beq.n	800683e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067cc:	e853 3f00 	ldrex	r3, [r3]
 80067d0:	623b      	str	r3, [r7, #32]
   return(result);
 80067d2:	6a3b      	ldr	r3, [r7, #32]
 80067d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	461a      	mov	r2, r3
 80067e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067e2:	633b      	str	r3, [r7, #48]	; 0x30
 80067e4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067ea:	e841 2300 	strex	r3, r2, [r1]
 80067ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80067f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1e6      	bne.n	80067c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	3308      	adds	r3, #8
 80067fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	e853 3f00 	ldrex	r3, [r3]
 8006804:	60fb      	str	r3, [r7, #12]
   return(result);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f023 0301 	bic.w	r3, r3, #1
 800680c:	64bb      	str	r3, [r7, #72]	; 0x48
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	3308      	adds	r3, #8
 8006814:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006816:	61fa      	str	r2, [r7, #28]
 8006818:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681a:	69b9      	ldr	r1, [r7, #24]
 800681c:	69fa      	ldr	r2, [r7, #28]
 800681e:	e841 2300 	strex	r3, r2, [r1]
 8006822:	617b      	str	r3, [r7, #20]
   return(result);
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1e5      	bne.n	80067f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2220      	movs	r2, #32
 800682e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e012      	b.n	8006864 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2220      	movs	r2, #32
 8006842:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2220      	movs	r2, #32
 800684a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	3758      	adds	r7, #88	; 0x58
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	603b      	str	r3, [r7, #0]
 8006878:	4613      	mov	r3, r2
 800687a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800687c:	e049      	b.n	8006912 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006884:	d045      	beq.n	8006912 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006886:	f7fa fbef 	bl	8001068 <HAL_GetTick>
 800688a:	4602      	mov	r2, r0
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	69ba      	ldr	r2, [r7, #24]
 8006892:	429a      	cmp	r2, r3
 8006894:	d302      	bcc.n	800689c <UART_WaitOnFlagUntilTimeout+0x30>
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d101      	bne.n	80068a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	e048      	b.n	8006932 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0304 	and.w	r3, r3, #4
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d031      	beq.n	8006912 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	69db      	ldr	r3, [r3, #28]
 80068b4:	f003 0308 	and.w	r3, r3, #8
 80068b8:	2b08      	cmp	r3, #8
 80068ba:	d110      	bne.n	80068de <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2208      	movs	r2, #8
 80068c2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f000 f95b 	bl	8006b80 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2208      	movs	r2, #8
 80068ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e029      	b.n	8006932 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	69db      	ldr	r3, [r3, #28]
 80068e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068ec:	d111      	bne.n	8006912 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	f000 f941 	bl	8006b80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2220      	movs	r2, #32
 8006902:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e00f      	b.n	8006932 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	69da      	ldr	r2, [r3, #28]
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	4013      	ands	r3, r2
 800691c:	68ba      	ldr	r2, [r7, #8]
 800691e:	429a      	cmp	r2, r3
 8006920:	bf0c      	ite	eq
 8006922:	2301      	moveq	r3, #1
 8006924:	2300      	movne	r3, #0
 8006926:	b2db      	uxtb	r3, r3
 8006928:	461a      	mov	r2, r3
 800692a:	79fb      	ldrb	r3, [r7, #7]
 800692c:	429a      	cmp	r2, r3
 800692e:	d0a6      	beq.n	800687e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
	...

0800693c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800693c:	b480      	push	{r7}
 800693e:	b0a3      	sub	sp, #140	; 0x8c
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	4613      	mov	r3, r2
 8006948:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	68ba      	ldr	r2, [r7, #8]
 800694e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	88fa      	ldrh	r2, [r7, #6]
 8006954:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	88fa      	ldrh	r2, [r7, #6]
 800695c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800696e:	d10e      	bne.n	800698e <UART_Start_Receive_IT+0x52>
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d105      	bne.n	8006984 <UART_Start_Receive_IT+0x48>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800697e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006982:	e02d      	b.n	80069e0 <UART_Start_Receive_IT+0xa4>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	22ff      	movs	r2, #255	; 0xff
 8006988:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800698c:	e028      	b.n	80069e0 <UART_Start_Receive_IT+0xa4>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d10d      	bne.n	80069b2 <UART_Start_Receive_IT+0x76>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d104      	bne.n	80069a8 <UART_Start_Receive_IT+0x6c>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	22ff      	movs	r2, #255	; 0xff
 80069a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80069a6:	e01b      	b.n	80069e0 <UART_Start_Receive_IT+0xa4>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	227f      	movs	r2, #127	; 0x7f
 80069ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80069b0:	e016      	b.n	80069e0 <UART_Start_Receive_IT+0xa4>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069ba:	d10d      	bne.n	80069d8 <UART_Start_Receive_IT+0x9c>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d104      	bne.n	80069ce <UART_Start_Receive_IT+0x92>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	227f      	movs	r2, #127	; 0x7f
 80069c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80069cc:	e008      	b.n	80069e0 <UART_Start_Receive_IT+0xa4>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	223f      	movs	r2, #63	; 0x3f
 80069d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80069d6:	e003      	b.n	80069e0 <UART_Start_Receive_IT+0xa4>
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2200      	movs	r2, #0
 80069dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2222      	movs	r2, #34	; 0x22
 80069ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	3308      	adds	r3, #8
 80069f6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069fa:	e853 3f00 	ldrex	r3, [r3]
 80069fe:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006a00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a02:	f043 0301 	orr.w	r3, r3, #1
 8006a06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	3308      	adds	r3, #8
 8006a10:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006a14:	673a      	str	r2, [r7, #112]	; 0x70
 8006a16:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a18:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006a1a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006a1c:	e841 2300 	strex	r3, r2, [r1]
 8006a20:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006a22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d1e3      	bne.n	80069f0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a30:	d14f      	bne.n	8006ad2 <UART_Start_Receive_IT+0x196>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006a38:	88fa      	ldrh	r2, [r7, #6]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d349      	bcc.n	8006ad2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a46:	d107      	bne.n	8006a58 <UART_Start_Receive_IT+0x11c>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d103      	bne.n	8006a58 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	4a47      	ldr	r2, [pc, #284]	; (8006b70 <UART_Start_Receive_IT+0x234>)
 8006a54:	675a      	str	r2, [r3, #116]	; 0x74
 8006a56:	e002      	b.n	8006a5e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	4a46      	ldr	r2, [pc, #280]	; (8006b74 <UART_Start_Receive_IT+0x238>)
 8006a5c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d01a      	beq.n	8006a9c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a6e:	e853 3f00 	ldrex	r3, [r3]
 8006a72:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	461a      	mov	r2, r3
 8006a84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006a88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a8a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a8e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006a90:	e841 2300 	strex	r3, r2, [r1]
 8006a94:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006a96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d1e4      	bne.n	8006a66 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	3308      	adds	r3, #8
 8006aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aa6:	e853 3f00 	ldrex	r3, [r3]
 8006aaa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ab2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	3308      	adds	r3, #8
 8006aba:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006abc:	64ba      	str	r2, [r7, #72]	; 0x48
 8006abe:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006ac2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ac4:	e841 2300 	strex	r3, r2, [r1]
 8006ac8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006aca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1e5      	bne.n	8006a9c <UART_Start_Receive_IT+0x160>
 8006ad0:	e046      	b.n	8006b60 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ada:	d107      	bne.n	8006aec <UART_Start_Receive_IT+0x1b0>
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d103      	bne.n	8006aec <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	4a24      	ldr	r2, [pc, #144]	; (8006b78 <UART_Start_Receive_IT+0x23c>)
 8006ae8:	675a      	str	r2, [r3, #116]	; 0x74
 8006aea:	e002      	b.n	8006af2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	4a23      	ldr	r2, [pc, #140]	; (8006b7c <UART_Start_Receive_IT+0x240>)
 8006af0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d019      	beq.n	8006b2e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b02:	e853 3f00 	ldrex	r3, [r3]
 8006b06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006b0e:	677b      	str	r3, [r7, #116]	; 0x74
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	461a      	mov	r2, r3
 8006b16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b18:	637b      	str	r3, [r7, #52]	; 0x34
 8006b1a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b20:	e841 2300 	strex	r3, r2, [r1]
 8006b24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1e6      	bne.n	8006afa <UART_Start_Receive_IT+0x1be>
 8006b2c:	e018      	b.n	8006b60 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	e853 3f00 	ldrex	r3, [r3]
 8006b3a:	613b      	str	r3, [r7, #16]
   return(result);
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	f043 0320 	orr.w	r3, r3, #32
 8006b42:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	461a      	mov	r2, r3
 8006b4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b4c:	623b      	str	r3, [r7, #32]
 8006b4e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b50:	69f9      	ldr	r1, [r7, #28]
 8006b52:	6a3a      	ldr	r2, [r7, #32]
 8006b54:	e841 2300 	strex	r3, r2, [r1]
 8006b58:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d1e6      	bne.n	8006b2e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	378c      	adds	r7, #140	; 0x8c
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	080073a1 	.word	0x080073a1
 8006b74:	08007041 	.word	0x08007041
 8006b78:	08006e89 	.word	0x08006e89
 8006b7c:	08006cd1 	.word	0x08006cd1

08006b80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b095      	sub	sp, #84	; 0x54
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b90:	e853 3f00 	ldrex	r3, [r3]
 8006b94:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ba6:	643b      	str	r3, [r7, #64]	; 0x40
 8006ba8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006baa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006bac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006bae:	e841 2300 	strex	r3, r2, [r1]
 8006bb2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1e6      	bne.n	8006b88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	3308      	adds	r3, #8
 8006bc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc2:	6a3b      	ldr	r3, [r7, #32]
 8006bc4:	e853 3f00 	ldrex	r3, [r3]
 8006bc8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bca:	69fa      	ldr	r2, [r7, #28]
 8006bcc:	4b1e      	ldr	r3, [pc, #120]	; (8006c48 <UART_EndRxTransfer+0xc8>)
 8006bce:	4013      	ands	r3, r2
 8006bd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	3308      	adds	r3, #8
 8006bd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bdc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006be0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006be2:	e841 2300 	strex	r3, r2, [r1]
 8006be6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1e5      	bne.n	8006bba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d118      	bne.n	8006c28 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	e853 3f00 	ldrex	r3, [r3]
 8006c02:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	f023 0310 	bic.w	r3, r3, #16
 8006c0a:	647b      	str	r3, [r7, #68]	; 0x44
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	461a      	mov	r2, r3
 8006c12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c14:	61bb      	str	r3, [r7, #24]
 8006c16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c18:	6979      	ldr	r1, [r7, #20]
 8006c1a:	69ba      	ldr	r2, [r7, #24]
 8006c1c:	e841 2300 	strex	r3, r2, [r1]
 8006c20:	613b      	str	r3, [r7, #16]
   return(result);
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d1e6      	bne.n	8006bf6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2220      	movs	r2, #32
 8006c2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006c3c:	bf00      	nop
 8006c3e:	3754      	adds	r7, #84	; 0x54
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr
 8006c48:	effffffe 	.word	0xeffffffe

08006c4c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	f7fe fe30 	bl	80058d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c70:	bf00      	nop
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b088      	sub	sp, #32
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	e853 3f00 	ldrex	r3, [r3]
 8006c8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c94:	61fb      	str	r3, [r7, #28]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	61bb      	str	r3, [r7, #24]
 8006ca0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca2:	6979      	ldr	r1, [r7, #20]
 8006ca4:	69ba      	ldr	r2, [r7, #24]
 8006ca6:	e841 2300 	strex	r3, r2, [r1]
 8006caa:	613b      	str	r3, [r7, #16]
   return(result);
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1e6      	bne.n	8006c80 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2220      	movs	r2, #32
 8006cb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f7fe fdfb 	bl	80058bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cc6:	bf00      	nop
 8006cc8:	3720      	adds	r7, #32
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
	...

08006cd0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b09c      	sub	sp, #112	; 0x70
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006cde:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ce8:	2b22      	cmp	r3, #34	; 0x22
 8006cea:	f040 80be 	bne.w	8006e6a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006cf8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006cfc:	b2d9      	uxtb	r1, r3
 8006cfe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006d02:	b2da      	uxtb	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d08:	400a      	ands	r2, r1
 8006d0a:	b2d2      	uxtb	r2, r2
 8006d0c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d12:	1c5a      	adds	r2, r3, #1
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	3b01      	subs	r3, #1
 8006d22:	b29a      	uxth	r2, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f040 80a1 	bne.w	8006e7a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d40:	e853 3f00 	ldrex	r3, [r3]
 8006d44:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006d46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	461a      	mov	r2, r3
 8006d54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d56:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d58:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d5e:	e841 2300 	strex	r3, r2, [r1]
 8006d62:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006d64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1e6      	bne.n	8006d38 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	3308      	adds	r3, #8
 8006d70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d74:	e853 3f00 	ldrex	r3, [r3]
 8006d78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d7c:	f023 0301 	bic.w	r3, r3, #1
 8006d80:	667b      	str	r3, [r7, #100]	; 0x64
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	3308      	adds	r3, #8
 8006d88:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006d8a:	647a      	str	r2, [r7, #68]	; 0x44
 8006d8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d92:	e841 2300 	strex	r3, r2, [r1]
 8006d96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1e5      	bne.n	8006d6a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2220      	movs	r2, #32
 8006da2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a33      	ldr	r2, [pc, #204]	; (8006e84 <UART_RxISR_8BIT+0x1b4>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d01f      	beq.n	8006dfc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d018      	beq.n	8006dfc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd2:	e853 3f00 	ldrex	r3, [r3]
 8006dd6:	623b      	str	r3, [r7, #32]
   return(result);
 8006dd8:	6a3b      	ldr	r3, [r7, #32]
 8006dda:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006dde:	663b      	str	r3, [r7, #96]	; 0x60
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	461a      	mov	r2, r3
 8006de6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006de8:	633b      	str	r3, [r7, #48]	; 0x30
 8006dea:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006dee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006df0:	e841 2300 	strex	r3, r2, [r1]
 8006df4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1e6      	bne.n	8006dca <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d12e      	bne.n	8006e62 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	e853 3f00 	ldrex	r3, [r3]
 8006e16:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f023 0310 	bic.w	r3, r3, #16
 8006e1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	461a      	mov	r2, r3
 8006e26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e28:	61fb      	str	r3, [r7, #28]
 8006e2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2c:	69b9      	ldr	r1, [r7, #24]
 8006e2e:	69fa      	ldr	r2, [r7, #28]
 8006e30:	e841 2300 	strex	r3, r2, [r1]
 8006e34:	617b      	str	r3, [r7, #20]
   return(result);
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1e6      	bne.n	8006e0a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	69db      	ldr	r3, [r3, #28]
 8006e42:	f003 0310 	and.w	r3, r3, #16
 8006e46:	2b10      	cmp	r3, #16
 8006e48:	d103      	bne.n	8006e52 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2210      	movs	r2, #16
 8006e50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e58:	4619      	mov	r1, r3
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f7fe fd42 	bl	80058e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e60:	e00b      	b.n	8006e7a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f7f9 fec8 	bl	8000bf8 <HAL_UART_RxCpltCallback>
}
 8006e68:	e007      	b.n	8006e7a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	699a      	ldr	r2, [r3, #24]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f042 0208 	orr.w	r2, r2, #8
 8006e78:	619a      	str	r2, [r3, #24]
}
 8006e7a:	bf00      	nop
 8006e7c:	3770      	adds	r7, #112	; 0x70
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	58000c00 	.word	0x58000c00

08006e88 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b09c      	sub	sp, #112	; 0x70
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006e96:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ea0:	2b22      	cmp	r3, #34	; 0x22
 8006ea2:	f040 80be 	bne.w	8007022 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eb4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006eb6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006eba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006ebe:	4013      	ands	r3, r2
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ec4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eca:	1c9a      	adds	r2, r3, #2
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f040 80a1 	bne.w	8007032 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ef8:	e853 3f00 	ldrex	r3, [r3]
 8006efc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006efe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f04:	667b      	str	r3, [r7, #100]	; 0x64
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f0e:	657b      	str	r3, [r7, #84]	; 0x54
 8006f10:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006f14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006f16:	e841 2300 	strex	r3, r2, [r1]
 8006f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1e6      	bne.n	8006ef0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	3308      	adds	r3, #8
 8006f28:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f2c:	e853 3f00 	ldrex	r3, [r3]
 8006f30:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f34:	f023 0301 	bic.w	r3, r3, #1
 8006f38:	663b      	str	r3, [r7, #96]	; 0x60
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	3308      	adds	r3, #8
 8006f40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006f42:	643a      	str	r2, [r7, #64]	; 0x40
 8006f44:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f46:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f4a:	e841 2300 	strex	r3, r2, [r1]
 8006f4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1e5      	bne.n	8006f22 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2220      	movs	r2, #32
 8006f5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a33      	ldr	r2, [pc, #204]	; (800703c <UART_RxISR_16BIT+0x1b4>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d01f      	beq.n	8006fb4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d018      	beq.n	8006fb4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f88:	6a3b      	ldr	r3, [r7, #32]
 8006f8a:	e853 3f00 	ldrex	r3, [r3]
 8006f8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006f96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fa2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fa8:	e841 2300 	strex	r3, r2, [r1]
 8006fac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d1e6      	bne.n	8006f82 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d12e      	bne.n	800701a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	e853 3f00 	ldrex	r3, [r3]
 8006fce:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	f023 0310 	bic.w	r3, r3, #16
 8006fd6:	65bb      	str	r3, [r7, #88]	; 0x58
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	461a      	mov	r2, r3
 8006fde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006fe0:	61bb      	str	r3, [r7, #24]
 8006fe2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe4:	6979      	ldr	r1, [r7, #20]
 8006fe6:	69ba      	ldr	r2, [r7, #24]
 8006fe8:	e841 2300 	strex	r3, r2, [r1]
 8006fec:	613b      	str	r3, [r7, #16]
   return(result);
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1e6      	bne.n	8006fc2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	69db      	ldr	r3, [r3, #28]
 8006ffa:	f003 0310 	and.w	r3, r3, #16
 8006ffe:	2b10      	cmp	r3, #16
 8007000:	d103      	bne.n	800700a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2210      	movs	r2, #16
 8007008:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007010:	4619      	mov	r1, r3
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f7fe fc66 	bl	80058e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007018:	e00b      	b.n	8007032 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f7f9 fdec 	bl	8000bf8 <HAL_UART_RxCpltCallback>
}
 8007020:	e007      	b.n	8007032 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	699a      	ldr	r2, [r3, #24]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f042 0208 	orr.w	r2, r2, #8
 8007030:	619a      	str	r2, [r3, #24]
}
 8007032:	bf00      	nop
 8007034:	3770      	adds	r7, #112	; 0x70
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	58000c00 	.word	0x58000c00

08007040 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b0ac      	sub	sp, #176	; 0xb0
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800704e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	69db      	ldr	r3, [r3, #28]
 8007058:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007076:	2b22      	cmp	r3, #34	; 0x22
 8007078:	f040 8180 	bne.w	800737c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007082:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007086:	e123      	b.n	80072d0 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007092:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8007096:	b2d9      	uxtb	r1, r3
 8007098:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800709c:	b2da      	uxtb	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070a2:	400a      	ands	r2, r1
 80070a4:	b2d2      	uxtb	r2, r2
 80070a6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ac:	1c5a      	adds	r2, r3, #1
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	3b01      	subs	r3, #1
 80070bc:	b29a      	uxth	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	69db      	ldr	r3, [r3, #28]
 80070ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80070ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80070d2:	f003 0307 	and.w	r3, r3, #7
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d053      	beq.n	8007182 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80070da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80070de:	f003 0301 	and.w	r3, r3, #1
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d011      	beq.n	800710a <UART_RxISR_8BIT_FIFOEN+0xca>
 80070e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80070ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00b      	beq.n	800710a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2201      	movs	r2, #1
 80070f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007100:	f043 0201 	orr.w	r2, r3, #1
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800710a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800710e:	f003 0302 	and.w	r3, r3, #2
 8007112:	2b00      	cmp	r3, #0
 8007114:	d011      	beq.n	800713a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007116:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800711a:	f003 0301 	and.w	r3, r3, #1
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00b      	beq.n	800713a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2202      	movs	r2, #2
 8007128:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007130:	f043 0204 	orr.w	r2, r3, #4
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800713a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800713e:	f003 0304 	and.w	r3, r3, #4
 8007142:	2b00      	cmp	r3, #0
 8007144:	d011      	beq.n	800716a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007146:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800714a:	f003 0301 	and.w	r3, r3, #1
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00b      	beq.n	800716a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2204      	movs	r2, #4
 8007158:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007160:	f043 0202 	orr.w	r2, r3, #2
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007170:	2b00      	cmp	r3, #0
 8007172:	d006      	beq.n	8007182 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f7fe fbab 	bl	80058d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007188:	b29b      	uxth	r3, r3
 800718a:	2b00      	cmp	r3, #0
 800718c:	f040 80a0 	bne.w	80072d0 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007196:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007198:	e853 3f00 	ldrex	r3, [r3]
 800719c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800719e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	461a      	mov	r2, r3
 80071ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80071b4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80071b8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80071ba:	e841 2300 	strex	r3, r2, [r1]
 80071be:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80071c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d1e4      	bne.n	8007190 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	3308      	adds	r3, #8
 80071cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071d0:	e853 3f00 	ldrex	r3, [r3]
 80071d4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80071d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071d8:	4b6e      	ldr	r3, [pc, #440]	; (8007394 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80071da:	4013      	ands	r3, r2
 80071dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	3308      	adds	r3, #8
 80071e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80071ea:	66ba      	str	r2, [r7, #104]	; 0x68
 80071ec:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ee:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80071f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80071f2:	e841 2300 	strex	r3, r2, [r1]
 80071f6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80071f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1e3      	bne.n	80071c6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2220      	movs	r2, #32
 8007202:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a60      	ldr	r2, [pc, #384]	; (8007398 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d021      	beq.n	8007260 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007226:	2b00      	cmp	r3, #0
 8007228:	d01a      	beq.n	8007260 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007230:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007232:	e853 3f00 	ldrex	r3, [r3]
 8007236:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800723a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800723e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	461a      	mov	r2, r3
 8007248:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800724c:	657b      	str	r3, [r7, #84]	; 0x54
 800724e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007250:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007252:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007254:	e841 2300 	strex	r3, r2, [r1]
 8007258:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800725a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800725c:	2b00      	cmp	r3, #0
 800725e:	d1e4      	bne.n	800722a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007264:	2b01      	cmp	r3, #1
 8007266:	d130      	bne.n	80072ca <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007276:	e853 3f00 	ldrex	r3, [r3]
 800727a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800727c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727e:	f023 0310 	bic.w	r3, r3, #16
 8007282:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	461a      	mov	r2, r3
 800728c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007290:	643b      	str	r3, [r7, #64]	; 0x40
 8007292:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007294:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007296:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007298:	e841 2300 	strex	r3, r2, [r1]
 800729c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800729e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d1e4      	bne.n	800726e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	69db      	ldr	r3, [r3, #28]
 80072aa:	f003 0310 	and.w	r3, r3, #16
 80072ae:	2b10      	cmp	r3, #16
 80072b0:	d103      	bne.n	80072ba <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2210      	movs	r2, #16
 80072b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80072c0:	4619      	mov	r1, r3
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f7fe fb0e 	bl	80058e4 <HAL_UARTEx_RxEventCallback>
 80072c8:	e002      	b.n	80072d0 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f7f9 fc94 	bl	8000bf8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80072d0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d006      	beq.n	80072e6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80072d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072dc:	f003 0320 	and.w	r3, r3, #32
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f47f aed1 	bne.w	8007088 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072ec:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80072f0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d049      	beq.n	800738c <UART_RxISR_8BIT_FIFOEN+0x34c>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80072fe:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8007302:	429a      	cmp	r2, r3
 8007304:	d242      	bcs.n	800738c <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	3308      	adds	r3, #8
 800730c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730e:	6a3b      	ldr	r3, [r7, #32]
 8007310:	e853 3f00 	ldrex	r3, [r3]
 8007314:	61fb      	str	r3, [r7, #28]
   return(result);
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800731c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	3308      	adds	r3, #8
 8007326:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800732a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800732c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007332:	e841 2300 	strex	r3, r2, [r1]
 8007336:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733a:	2b00      	cmp	r3, #0
 800733c:	d1e3      	bne.n	8007306 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4a16      	ldr	r2, [pc, #88]	; (800739c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007342:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	e853 3f00 	ldrex	r3, [r3]
 8007350:	60bb      	str	r3, [r7, #8]
   return(result);
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	f043 0320 	orr.w	r3, r3, #32
 8007358:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	461a      	mov	r2, r3
 8007362:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007366:	61bb      	str	r3, [r7, #24]
 8007368:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736a:	6979      	ldr	r1, [r7, #20]
 800736c:	69ba      	ldr	r2, [r7, #24]
 800736e:	e841 2300 	strex	r3, r2, [r1]
 8007372:	613b      	str	r3, [r7, #16]
   return(result);
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d1e4      	bne.n	8007344 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800737a:	e007      	b.n	800738c <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	699a      	ldr	r2, [r3, #24]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f042 0208 	orr.w	r2, r2, #8
 800738a:	619a      	str	r2, [r3, #24]
}
 800738c:	bf00      	nop
 800738e:	37b0      	adds	r7, #176	; 0xb0
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	effffffe 	.word	0xeffffffe
 8007398:	58000c00 	.word	0x58000c00
 800739c:	08006cd1 	.word	0x08006cd1

080073a0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b0ae      	sub	sp, #184	; 0xb8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80073ae:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	69db      	ldr	r3, [r3, #28]
 80073b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073d6:	2b22      	cmp	r3, #34	; 0x22
 80073d8:	f040 8184 	bne.w	80076e4 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80073e2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80073e6:	e127      	b.n	8007638 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ee:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80073fa:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80073fe:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8007402:	4013      	ands	r3, r2
 8007404:	b29a      	uxth	r2, r3
 8007406:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800740a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007410:	1c9a      	adds	r2, r3, #2
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800741c:	b29b      	uxth	r3, r3
 800741e:	3b01      	subs	r3, #1
 8007420:	b29a      	uxth	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	69db      	ldr	r3, [r3, #28]
 800742e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007432:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007436:	f003 0307 	and.w	r3, r3, #7
 800743a:	2b00      	cmp	r3, #0
 800743c:	d053      	beq.n	80074e6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800743e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007442:	f003 0301 	and.w	r3, r3, #1
 8007446:	2b00      	cmp	r3, #0
 8007448:	d011      	beq.n	800746e <UART_RxISR_16BIT_FIFOEN+0xce>
 800744a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800744e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00b      	beq.n	800746e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2201      	movs	r2, #1
 800745c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007464:	f043 0201 	orr.w	r2, r3, #1
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800746e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007472:	f003 0302 	and.w	r3, r3, #2
 8007476:	2b00      	cmp	r3, #0
 8007478:	d011      	beq.n	800749e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800747a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800747e:	f003 0301 	and.w	r3, r3, #1
 8007482:	2b00      	cmp	r3, #0
 8007484:	d00b      	beq.n	800749e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2202      	movs	r2, #2
 800748c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007494:	f043 0204 	orr.w	r2, r3, #4
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800749e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80074a2:	f003 0304 	and.w	r3, r3, #4
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d011      	beq.n	80074ce <UART_RxISR_16BIT_FIFOEN+0x12e>
 80074aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80074ae:	f003 0301 	and.w	r3, r3, #1
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00b      	beq.n	80074ce <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2204      	movs	r2, #4
 80074bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074c4:	f043 0202 	orr.w	r2, r3, #2
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d006      	beq.n	80074e6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f7fe f9f9 	bl	80058d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	f040 80a2 	bne.w	8007638 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074fc:	e853 3f00 	ldrex	r3, [r3]
 8007500:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007502:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007508:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	461a      	mov	r2, r3
 8007512:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007516:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800751a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800751e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007522:	e841 2300 	strex	r3, r2, [r1]
 8007526:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007528:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1e2      	bne.n	80074f4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	3308      	adds	r3, #8
 8007534:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007536:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007538:	e853 3f00 	ldrex	r3, [r3]
 800753c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800753e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007540:	4b6e      	ldr	r3, [pc, #440]	; (80076fc <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8007542:	4013      	ands	r3, r2
 8007544:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	3308      	adds	r3, #8
 800754e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007552:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007554:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007556:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007558:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800755a:	e841 2300 	strex	r3, r2, [r1]
 800755e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007560:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007562:	2b00      	cmp	r3, #0
 8007564:	d1e3      	bne.n	800752e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2220      	movs	r2, #32
 800756a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a60      	ldr	r2, [pc, #384]	; (8007700 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d021      	beq.n	80075c8 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800758e:	2b00      	cmp	r3, #0
 8007590:	d01a      	beq.n	80075c8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800759a:	e853 3f00 	ldrex	r3, [r3]
 800759e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80075a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80075a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	461a      	mov	r2, r3
 80075b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80075b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80075b6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80075ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075bc:	e841 2300 	strex	r3, r2, [r1]
 80075c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80075c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d1e4      	bne.n	8007592 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d130      	bne.n	8007632 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075de:	e853 3f00 	ldrex	r3, [r3]
 80075e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80075e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075e6:	f023 0310 	bic.w	r3, r3, #16
 80075ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	461a      	mov	r2, r3
 80075f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80075f8:	647b      	str	r3, [r7, #68]	; 0x44
 80075fa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007600:	e841 2300 	strex	r3, r2, [r1]
 8007604:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007608:	2b00      	cmp	r3, #0
 800760a:	d1e4      	bne.n	80075d6 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	69db      	ldr	r3, [r3, #28]
 8007612:	f003 0310 	and.w	r3, r3, #16
 8007616:	2b10      	cmp	r3, #16
 8007618:	d103      	bne.n	8007622 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2210      	movs	r2, #16
 8007620:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007628:	4619      	mov	r1, r3
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f7fe f95a 	bl	80058e4 <HAL_UARTEx_RxEventCallback>
 8007630:	e002      	b.n	8007638 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7f9 fae0 	bl	8000bf8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007638:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800763c:	2b00      	cmp	r3, #0
 800763e:	d006      	beq.n	800764e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8007640:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007644:	f003 0320 	and.w	r3, r3, #32
 8007648:	2b00      	cmp	r3, #0
 800764a:	f47f aecd 	bne.w	80073e8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007654:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007658:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800765c:	2b00      	cmp	r3, #0
 800765e:	d049      	beq.n	80076f4 <UART_RxISR_16BIT_FIFOEN+0x354>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007666:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800766a:	429a      	cmp	r2, r3
 800766c:	d242      	bcs.n	80076f4 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	3308      	adds	r3, #8
 8007674:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007678:	e853 3f00 	ldrex	r3, [r3]
 800767c:	623b      	str	r3, [r7, #32]
   return(result);
 800767e:	6a3b      	ldr	r3, [r7, #32]
 8007680:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007684:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	3308      	adds	r3, #8
 800768e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007692:	633a      	str	r2, [r7, #48]	; 0x30
 8007694:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007696:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007698:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800769a:	e841 2300 	strex	r3, r2, [r1]
 800769e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1e3      	bne.n	800766e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a16      	ldr	r2, [pc, #88]	; (8007704 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80076aa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	e853 3f00 	ldrex	r3, [r3]
 80076b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f043 0320 	orr.w	r3, r3, #32
 80076c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	461a      	mov	r2, r3
 80076ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076ce:	61fb      	str	r3, [r7, #28]
 80076d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d2:	69b9      	ldr	r1, [r7, #24]
 80076d4:	69fa      	ldr	r2, [r7, #28]
 80076d6:	e841 2300 	strex	r3, r2, [r1]
 80076da:	617b      	str	r3, [r7, #20]
   return(result);
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d1e4      	bne.n	80076ac <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076e2:	e007      	b.n	80076f4 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	699a      	ldr	r2, [r3, #24]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f042 0208 	orr.w	r2, r2, #8
 80076f2:	619a      	str	r2, [r3, #24]
}
 80076f4:	bf00      	nop
 80076f6:	37b8      	adds	r7, #184	; 0xb8
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	effffffe 	.word	0xeffffffe
 8007700:	58000c00 	.word	0x58000c00
 8007704:	08006e89 	.word	0x08006e89

08007708 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007710:	bf00      	nop
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007724:	bf00      	nop
 8007726:	370c      	adds	r7, #12
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007738:	bf00      	nop
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007752:	2b01      	cmp	r3, #1
 8007754:	d101      	bne.n	800775a <HAL_UARTEx_DisableFifoMode+0x16>
 8007756:	2302      	movs	r3, #2
 8007758:	e027      	b.n	80077aa <HAL_UARTEx_DisableFifoMode+0x66>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2201      	movs	r2, #1
 800775e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2224      	movs	r2, #36	; 0x24
 8007766:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f022 0201 	bic.w	r2, r2, #1
 8007780:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007788:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2220      	movs	r2, #32
 800779c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3714      	adds	r7, #20
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr

080077b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b084      	sub	sp, #16
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
 80077be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d101      	bne.n	80077ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80077ca:	2302      	movs	r3, #2
 80077cc:	e02d      	b.n	800782a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2201      	movs	r2, #1
 80077d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2224      	movs	r2, #36	; 0x24
 80077da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f022 0201 	bic.w	r2, r2, #1
 80077f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	683a      	ldr	r2, [r7, #0]
 8007806:	430a      	orrs	r2, r1
 8007808:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f850 	bl	80078b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2220      	movs	r2, #32
 800781c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b084      	sub	sp, #16
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
 800783a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007842:	2b01      	cmp	r3, #1
 8007844:	d101      	bne.n	800784a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007846:	2302      	movs	r3, #2
 8007848:	e02d      	b.n	80078a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2201      	movs	r2, #1
 800784e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2224      	movs	r2, #36	; 0x24
 8007856:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f022 0201 	bic.w	r2, r2, #1
 8007870:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	683a      	ldr	r2, [r7, #0]
 8007882:	430a      	orrs	r2, r1
 8007884:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 f812 	bl	80078b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2220      	movs	r2, #32
 8007898:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
	...

080078b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b085      	sub	sp, #20
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d108      	bne.n	80078d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2201      	movs	r2, #1
 80078c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80078d0:	e031      	b.n	8007936 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80078d2:	2310      	movs	r3, #16
 80078d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80078d6:	2310      	movs	r3, #16
 80078d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	0e5b      	lsrs	r3, r3, #25
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	f003 0307 	and.w	r3, r3, #7
 80078e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	0f5b      	lsrs	r3, r3, #29
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	f003 0307 	and.w	r3, r3, #7
 80078f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078fa:	7bbb      	ldrb	r3, [r7, #14]
 80078fc:	7b3a      	ldrb	r2, [r7, #12]
 80078fe:	4911      	ldr	r1, [pc, #68]	; (8007944 <UARTEx_SetNbDataToProcess+0x94>)
 8007900:	5c8a      	ldrb	r2, [r1, r2]
 8007902:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007906:	7b3a      	ldrb	r2, [r7, #12]
 8007908:	490f      	ldr	r1, [pc, #60]	; (8007948 <UARTEx_SetNbDataToProcess+0x98>)
 800790a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800790c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007910:	b29a      	uxth	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007918:	7bfb      	ldrb	r3, [r7, #15]
 800791a:	7b7a      	ldrb	r2, [r7, #13]
 800791c:	4909      	ldr	r1, [pc, #36]	; (8007944 <UARTEx_SetNbDataToProcess+0x94>)
 800791e:	5c8a      	ldrb	r2, [r1, r2]
 8007920:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007924:	7b7a      	ldrb	r2, [r7, #13]
 8007926:	4908      	ldr	r1, [pc, #32]	; (8007948 <UARTEx_SetNbDataToProcess+0x98>)
 8007928:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800792a:	fb93 f3f2 	sdiv	r3, r3, r2
 800792e:	b29a      	uxth	r2, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007936:	bf00      	nop
 8007938:	3714      	adds	r7, #20
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr
 8007942:	bf00      	nop
 8007944:	080079e4 	.word	0x080079e4
 8007948:	080079ec 	.word	0x080079ec

0800794c <memset>:
 800794c:	4402      	add	r2, r0
 800794e:	4603      	mov	r3, r0
 8007950:	4293      	cmp	r3, r2
 8007952:	d100      	bne.n	8007956 <memset+0xa>
 8007954:	4770      	bx	lr
 8007956:	f803 1b01 	strb.w	r1, [r3], #1
 800795a:	e7f9      	b.n	8007950 <memset+0x4>

0800795c <__libc_init_array>:
 800795c:	b570      	push	{r4, r5, r6, lr}
 800795e:	4d0d      	ldr	r5, [pc, #52]	; (8007994 <__libc_init_array+0x38>)
 8007960:	4c0d      	ldr	r4, [pc, #52]	; (8007998 <__libc_init_array+0x3c>)
 8007962:	1b64      	subs	r4, r4, r5
 8007964:	10a4      	asrs	r4, r4, #2
 8007966:	2600      	movs	r6, #0
 8007968:	42a6      	cmp	r6, r4
 800796a:	d109      	bne.n	8007980 <__libc_init_array+0x24>
 800796c:	4d0b      	ldr	r5, [pc, #44]	; (800799c <__libc_init_array+0x40>)
 800796e:	4c0c      	ldr	r4, [pc, #48]	; (80079a0 <__libc_init_array+0x44>)
 8007970:	f000 f818 	bl	80079a4 <_init>
 8007974:	1b64      	subs	r4, r4, r5
 8007976:	10a4      	asrs	r4, r4, #2
 8007978:	2600      	movs	r6, #0
 800797a:	42a6      	cmp	r6, r4
 800797c:	d105      	bne.n	800798a <__libc_init_array+0x2e>
 800797e:	bd70      	pop	{r4, r5, r6, pc}
 8007980:	f855 3b04 	ldr.w	r3, [r5], #4
 8007984:	4798      	blx	r3
 8007986:	3601      	adds	r6, #1
 8007988:	e7ee      	b.n	8007968 <__libc_init_array+0xc>
 800798a:	f855 3b04 	ldr.w	r3, [r5], #4
 800798e:	4798      	blx	r3
 8007990:	3601      	adds	r6, #1
 8007992:	e7f2      	b.n	800797a <__libc_init_array+0x1e>
 8007994:	080079fc 	.word	0x080079fc
 8007998:	080079fc 	.word	0x080079fc
 800799c:	080079fc 	.word	0x080079fc
 80079a0:	08007a00 	.word	0x08007a00

080079a4 <_init>:
 80079a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079a6:	bf00      	nop
 80079a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079aa:	bc08      	pop	{r3}
 80079ac:	469e      	mov	lr, r3
 80079ae:	4770      	bx	lr

080079b0 <_fini>:
 80079b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079b2:	bf00      	nop
 80079b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079b6:	bc08      	pop	{r3}
 80079b8:	469e      	mov	lr, r3
 80079ba:	4770      	bx	lr
