/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include <stdio.h>

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define POLL 1	// poll mode
#define IT 2	// interrupt mode
/* USER CODE END PD */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart3;

/* USER CODE BEGIN PV */
// kiirando uzenetek
uint8_t welcome[] 	= "LED control project\r\n  using UART\r\n  on Nucleo-HA3ZI-Q board\n\r";
uint8_t instruction[] = "\nType \"1\" to turn on LED2\r\nType \"0\" to turn off LED2 \n\r\n";
uint8_t LED1ON[] 	= "LED1 is ON \r\n";
uint8_t LED1OFF[] 	= "LED1 is OFF\r\n";
uint8_t LED2ON[] 	= "LED2 is ON \r\n";
uint8_t LED2OFF[] 	= "LED2 is OFF\r\n";
uint8_t AUTOON[] 	= "\nAuto LED on\r\n";
uint8_t AUTOOFF[] 	= "\nAuto LED off\r\n";
uint8_t poll[]		= "  Poll mode\r\n";
uint8_t it[]		= "  Interrupt mode\r\n";
// UART-on kapott adat tarolasara
uint8_t data[] 		= "-";	// alapetelmezett ertek a "-" -> biztos nem 1 vagy 0
// allapotvaltozok
int state 	= 0;
int state_old = 1;
// mode indikator - poll/interrupt (POLL/IT)
int mode = POLL;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_USB_OTG_HS_USB_Init(void);
/* USER CODE BEGIN PFP */
// UART interrupt fuggveny deklaralasa
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);
/* USER CODE END PFP */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void){
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* Configure the system clock */
  SystemClock_Config();

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART3_UART_Init();
  MX_USB_OTG_HS_USB_Init();

  /* USER CODE BEGIN 2*/
  // UART interrupt inditasa
  if(mode != POLL){
	  HAL_UART_Receive_IT(&huart3, data, 1);
  }

  // alap adatok, udvozlo szoveg, utmutato kikuldese UART-on
  HAL_UART_Transmit(&huart3, welcome, sizeof(welcome), 10);
  if(mode == POLL){
	  HAL_UART_Transmit(&huart3, poll, sizeof(poll), 10);
  }else{
	  HAL_UART_Transmit(&huart3, it, sizeof(it), 10);
  }
  HAL_UART_Transmit(&huart3, instruction, sizeof(instruction), 10);
  HAL_Delay(10);
  /* USER CODE END 2 */


  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  // gombnyomas erzekelese
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)){
		  while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)){}	// pergesmentesites
		  if(state == 0 && state_old == 1){
			  // LED-ek alaphelyzetbe allitasa
			  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);	// state allapotat mutato LED
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);	// UART-on kapcsolhato LED
			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);	// state 1-ben villogo LED
			  // uzenet, hogy atleptunk villogo modba
			  HAL_UART_Transmit(&huart3, AUTOON, sizeof(AUTOON), 10);
		  }
		  if(state == 1 && state_old == 0){
			  // LED-e alaphelyzetbe allitasa
			  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);	// state allapotat mutato LED
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);	// UART-on kapcsolhato LED
			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);	// state 1-ben villogo LED
			  // uzenet, hogy visszaleptunk alap modba
			  HAL_UART_Transmit(&huart3, AUTOOFF, sizeof(AUTOOFF), 10);
			  // utmutato kiirasa UART-on
			  HAL_UART_Transmit(&huart3, instruction, sizeof(instruction), 10);
		  }
		  // state allapotvaltozok frissitese
		  state_old = state;
		  state++;
		  state %= 2;
	  }// if(B1)


	  // basic allapot - nem vilagitanak LED-ek, csak LED2 kapcsolhato UART-on
	  if(state == 0){
		  // POLL mode
		  if(mode == POLL){
			  // varja UART-on az utasitast
			  HAL_UART_Receive(&huart3, data, 1, 1);

			  if(data[0] == '1' && HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin) == 0){
				  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
				  HAL_UART_Transmit(&huart3, LED2ON, sizeof(LED2ON), 10);
			  }
			  if(data[0] == '0' && HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin) == 1){
				  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
				  HAL_UART_Transmit(&huart3, LED2OFF, sizeof(LED2OFF), 10);
			  }

			  HAL_Delay(5);
		  }

		  // IT mode
		  if(mode == IT){
			  // itt nincs szukseg LED kapcsolo kod-ra,
			  // mivel az interrupt fuggvenyben van megvalositva
		  }
	  }// if(state==0)

	  if(state == 1){
		  // LED1 villog, kikuldi UART-on, hogy a fel vagy le van kapcsolva
		  // poll modban ilyenkor nem tud UART-on adatot fogadni
		  if(HAL_GPIO_ReadPin(LD1_GPIO_Port, LD1_Pin) == 0){
			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
			  HAL_UART_Transmit(&huart3, LED1ON, sizeof(LED1ON), 10);
		  }else{
			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
			  HAL_UART_Transmit(&huart3, LED1OFF, sizeof(LED1OFF), 10);
		  }

		  HAL_Delay(1000);
	  }// if(state==1)

  }// wile(1)

}// main()


/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 24;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}

/**
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{

  /* USER CODE BEGIN USB_OTG_HS_Init 0 */

  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
// UART recieve interrupt fuggveny definialasa
// ez a fuggveny kerul meghivasra, ha az adatfgadas sikeres volt
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
	// csak interrupt modban hasznaljuk
	if(mode == IT){
		// csak akkor kapcsolja fel a LED2-t,
		// ha UART-on "1"-et kapott es a LED2 nem vilagit
		if(data[0] == '1' && HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin) == 0){
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
			HAL_UART_Transmit(&huart3, LED2ON, sizeof(LED2ON), 10);
		}
		// csak akkor kapcsolja le a LED2-t,
		// ha UART-on "0"-t kapott es a LED2 vilagit
		if(data[0] == '0' && HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin) == 1){
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
			HAL_UART_Transmit(&huart3, LED2OFF, sizeof(LED2OFF), 10);
		}
		// adatfogado interrupt fuggveny ujboli meghivasa
		HAL_UART_Receive_IT(&huart3, data, 1);
	}
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
